{
    "docs/scripts/generate_ref_files.py": {
        "file_name": "/docs/scripts/generate_ref_files.py",
        "imports": [
            "pathlib.Path",
            "string.capwords"
        ],
        "classes": [],
        "functions": {
            "to_identifier": [
                "with_suffix",
                "relative_to",
                "join"
            ],
            "md_target": [
                "with_suffix",
                "relative_to"
            ],
            "pretty_title": [
                "replace",
                "capwords"
            ],
            "main": [
                "exists",
                "SystemExit",
                "rglob",
                "startswith",
                "md_target",
                "mkdir",
                "to_identifier",
                "pretty_title",
                "split",
                "write_text",
                "print",
                "relative_to"
            ]
        }
    },
    "docs/scripts/translate_docs.py": {
        "file_name": "/docs/scripts/translate_docs.py",
        "imports": [
            "os",
            "sys",
            "argparse",
            "openai.OpenAI",
            "concurrent.futures.ThreadPoolExecutor"
        ],
        "classes": [],
        "functions": {
            "built_instructions": [
                "join",
                "items",
                "get"
            ],
            "translate_file": [
                "print",
                "open",
                "read",
                "splitlines",
                "len",
                "startswith",
                "append",
                "join",
                "strip",
                "clear",
                "built_instructions",
                "create",
                "enumerate",
                "replace",
                "write"
            ],
            "translate_single_source_file": [
                "relpath",
                "endswith",
                "join",
                "makedirs",
                "dirname",
                "translate_file"
            ],
            "main": [
                "ArgumentParser",
                "add_argument",
                "parse_args",
                "startswith",
                "join",
                "exists",
                "translate_single_source_file",
                "print",
                "exit",
                "walk",
                "any",
                "ThreadPoolExecutor",
                "append",
                "submit",
                "len",
                "result",
                "clear"
            ]
        }
    },
    "src/agents/guardrail.py": {
        "file_name": "/src/agents/guardrail.py",
        "imports": [
            "__future__.annotations",
            "inspect",
            "collections.abc.Awaitable",
            "dataclasses.dataclass",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.Generic",
            "typing.Union",
            "typing.overload",
            "typing_extensions.TypeVar",
            "exceptions.UserError",
            "items.TResponseInputItem",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "util._types.MaybeAwaitable",
            "agent.Agent"
        ],
        "classes": [
            {
                "class_name": "GuardrailFunctionOutput",
                "methods": []
            },
            {
                "class_name": "InputGuardrailResult",
                "methods": []
            },
            {
                "class_name": "OutputGuardrailResult",
                "methods": []
            },
            {
                "class_name": "InputGuardrail",
                "methods": [
                    "get_name"
                ]
            },
            {
                "class_name": "OutputGuardrail",
                "methods": [
                    "get_name"
                ]
            }
        ],
        "functions": {
            "get_name": [],
            "input_guardrail": [
                "decorator"
            ],
            "decorator": [
                "InputGuardrail",
                "OutputGuardrail"
            ],
            "output_guardrail": [
                "decorator"
            ]
        }
    },
    "src/agents/repl.py": {
        "file_name": "/src/agents/repl.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "openai.types.responses.response_text_delta_event.ResponseTextDeltaEvent",
            "agent.Agent",
            "items.TResponseInputItem",
            "result.RunResultBase",
            "run.Runner",
            "run_context.TContext",
            "stream_events.AgentUpdatedStreamEvent",
            "stream_events.RawResponsesStreamEvent",
            "stream_events.RunItemStreamEvent"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/version.py": {
        "file_name": "/src/agents/version.py",
        "imports": [
            "importlib.metadata"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/model_settings.py": {
        "file_name": "/src/agents/model_settings.py",
        "imports": [
            "__future__.annotations",
            "dataclasses",
            "collections.abc.Mapping",
            "dataclasses.fields",
            "dataclasses.replace",
            "typing.Annotated",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "openai.Omit",
            "openai._types.Body",
            "openai._types.Query",
            "openai.types.responses.ResponseIncludable",
            "openai.types.shared.Reasoning",
            "pydantic.BaseModel",
            "pydantic.GetCoreSchemaHandler",
            "pydantic.dataclasses.dataclass",
            "pydantic_core.core_schema",
            "typing_extensions.TypeAlias"
        ],
        "classes": [
            {
                "class_name": "_OmitTypeAnnotation",
                "methods": [
                    "__get_pydantic_core_schema__"
                ]
            },
            {
                "class_name": "MCPToolChoice",
                "methods": []
            },
            {
                "class_name": "ModelSettings",
                "methods": [
                    "resolve",
                    "to_json_dict"
                ]
            }
        ],
        "functions": {
            "__get_pydantic_core_schema__": [
                "chain_schema",
                "none_schema",
                "no_info_plain_validator_function",
                "json_or_python_schema",
                "union_schema",
                "is_instance_schema",
                "plain_serializer_function_ser_schema"
            ],
            "validate_from_none": [
                "_Omit"
            ],
            "resolve": [
                "getattr",
                "fields",
                "update",
                "replace"
            ],
            "to_json_dict": [
                "asdict",
                "items",
                "isinstance",
                "model_dump"
            ]
        }
    },
    "src/agents/tool_guardrails.py": {
        "file_name": "/src/agents/tool_guardrails.py",
        "imports": [
            "__future__.annotations",
            "inspect",
            "collections.abc.Awaitable",
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.Generic",
            "typing.Literal",
            "typing.overload",
            "typing_extensions.TypedDict",
            "typing_extensions.TypeVar",
            "exceptions.UserError",
            "tool_context.ToolContext",
            "util._types.MaybeAwaitable",
            "agent.Agent"
        ],
        "classes": [
            {
                "class_name": "ToolInputGuardrailResult",
                "methods": []
            },
            {
                "class_name": "ToolOutputGuardrailResult",
                "methods": []
            },
            {
                "class_name": "RejectContentBehavior",
                "methods": []
            },
            {
                "class_name": "RaiseExceptionBehavior",
                "methods": []
            },
            {
                "class_name": "AllowBehavior",
                "methods": []
            },
            {
                "class_name": "ToolGuardrailFunctionOutput",
                "methods": [
                    "allow",
                    "reject_content",
                    "raise_exception"
                ]
            },
            {
                "class_name": "ToolInputGuardrailData",
                "methods": []
            },
            {
                "class_name": "ToolOutputGuardrailData",
                "methods": []
            },
            {
                "class_name": "ToolInputGuardrail",
                "methods": [
                    "get_name"
                ]
            },
            {
                "class_name": "ToolOutputGuardrail",
                "methods": [
                    "get_name"
                ]
            }
        ],
        "functions": {
            "allow": [
                "cls",
                "AllowBehavior"
            ],
            "reject_content": [
                "cls",
                "RejectContentBehavior"
            ],
            "raise_exception": [
                "cls",
                "RaiseExceptionBehavior"
            ],
            "get_name": [],
            "tool_input_guardrail": [
                "decorator"
            ],
            "decorator": [
                "ToolInputGuardrail",
                "ToolOutputGuardrail"
            ],
            "tool_output_guardrail": [
                "decorator"
            ]
        }
    },
    "src/agents/tool_context.py": {
        "file_name": "/src/agents/tool_context.py",
        "imports": [
            "dataclasses.dataclass",
            "dataclasses.field",
            "dataclasses.fields",
            "typing.Any",
            "typing.Optional",
            "openai.types.responses.ResponseFunctionToolCall",
            "run_context.RunContextWrapper",
            "run_context.TContext"
        ],
        "classes": [
            {
                "class_name": "ToolContext",
                "methods": [
                    "from_agent_context"
                ]
            }
        ],
        "functions": {
            "_assert_must_pass_tool_call_id": [
                "ValueError"
            ],
            "_assert_must_pass_tool_name": [
                "ValueError"
            ],
            "_assert_must_pass_tool_arguments": [
                "ValueError"
            ],
            "from_agent_context": [
                "getattr",
                "fields",
                "_assert_must_pass_tool_name",
                "_assert_must_pass_tool_arguments",
                "cls"
            ]
        }
    },
    "src/agents/prompts.py": {
        "file_name": "/src/agents/prompts.py",
        "imports": [
            "__future__.annotations",
            "inspect",
            "dataclasses.dataclass",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "openai.types.responses.response_prompt_param.ResponsePromptParam",
            "openai.types.responses.response_prompt_param.Variables",
            "typing_extensions.NotRequired",
            "typing_extensions.TypedDict",
            "agents.util._types.MaybeAwaitable",
            "exceptions.UserError",
            "run_context.RunContextWrapper",
            "agent.Agent"
        ],
        "classes": [
            {
                "class_name": "Prompt",
                "methods": []
            },
            {
                "class_name": "GenerateDynamicPromptData",
                "methods": []
            },
            {
                "class_name": "PromptUtil",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/handoffs.py": {
        "file_name": "/src/agents/handoffs.py",
        "imports": [
            "__future__.annotations",
            "inspect",
            "json",
            "collections.abc.Awaitable",
            "dataclasses.dataclass",
            "dataclasses.replace",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.Generic",
            "typing.cast",
            "typing.overload",
            "pydantic.TypeAdapter",
            "typing_extensions.TypeAlias",
            "typing_extensions.TypeVar",
            "exceptions.ModelBehaviorError",
            "exceptions.UserError",
            "items.RunItem",
            "items.TResponseInputItem",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "strict_schema.ensure_strict_json_schema",
            "tracing.spans.SpanError",
            "util._error_tracing",
            "util._json",
            "util._transforms",
            "util._types.MaybeAwaitable",
            "agent.Agent",
            "agent.AgentBase",
            "agent.Agent"
        ],
        "classes": [
            {
                "class_name": "HandoffInputData",
                "methods": [
                    "clone"
                ]
            },
            {
                "class_name": "Handoff",
                "methods": [
                    "get_transfer_message",
                    "default_tool_name",
                    "default_tool_description"
                ]
            }
        ],
        "functions": {
            "clone": [
                "dataclasses_replace"
            ],
            "get_transfer_message": [
                "dumps"
            ],
            "default_tool_name": [
                "transform_string_function_style"
            ],
            "default_tool_description": [],
            "handoff": [
                "callable",
                "signature",
                "len",
                "UserError",
                "TypeAdapter",
                "json_schema",
                "attach_error_to_current_span",
                "SpanError",
                "ModelBehaviorError",
                "validate_json",
                "cast",
                "iscoroutinefunction",
                "input_func",
                "no_input_func",
                "default_tool_name",
                "default_tool_description",
                "ensure_strict_json_schema",
                "isinstance",
                "is_enabled",
                "isawaitable",
                "Handoff"
            ]
        }
    },
    "src/agents/_run_impl.py": {
        "file_name": "/src/agents/_run_impl.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "dataclasses",
            "inspect",
            "collections.abc.Awaitable",
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.cast",
            "openai.types.responses.ResponseComputerToolCall",
            "openai.types.responses.ResponseFileSearchToolCall",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseFunctionWebSearch",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.response_code_interpreter_tool_call.ResponseCodeInterpreterToolCall",
            "openai.types.responses.response_computer_tool_call.ActionClick",
            "openai.types.responses.response_computer_tool_call.ActionDoubleClick",
            "openai.types.responses.response_computer_tool_call.ActionDrag",
            "openai.types.responses.response_computer_tool_call.ActionKeypress",
            "openai.types.responses.response_computer_tool_call.ActionMove",
            "openai.types.responses.response_computer_tool_call.ActionScreenshot",
            "openai.types.responses.response_computer_tool_call.ActionScroll",
            "openai.types.responses.response_computer_tool_call.ActionType",
            "openai.types.responses.response_computer_tool_call.ActionWait",
            "openai.types.responses.response_input_item_param.ComputerCallOutputAcknowledgedSafetyCheck",
            "openai.types.responses.response_input_param.ComputerCallOutput",
            "openai.types.responses.response_input_param.McpApprovalResponse",
            "openai.types.responses.response_output_item.ImageGenerationCall",
            "openai.types.responses.response_output_item.LocalShellCall",
            "openai.types.responses.response_output_item.McpApprovalRequest",
            "openai.types.responses.response_output_item.McpCall",
            "openai.types.responses.response_output_item.McpListTools",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "agent.Agent",
            "agent.ToolsToFinalOutputResult",
            "agent_output.AgentOutputSchemaBase",
            "computer.AsyncComputer",
            "computer.Computer",
            "exceptions.AgentsException",
            "exceptions.ModelBehaviorError",
            "exceptions.ToolInputGuardrailTripwireTriggered",
            "exceptions.ToolOutputGuardrailTripwireTriggered",
            "exceptions.UserError",
            "guardrail.InputGuardrail",
            "guardrail.InputGuardrailResult",
            "guardrail.OutputGuardrail",
            "guardrail.OutputGuardrailResult",
            "handoffs.Handoff",
            "handoffs.HandoffInputData",
            "items.HandoffCallItem",
            "items.HandoffOutputItem",
            "items.ItemHelpers",
            "items.MCPApprovalRequestItem",
            "items.MCPApprovalResponseItem",
            "items.MCPListToolsItem",
            "items.MessageOutputItem",
            "items.ModelResponse",
            "items.ReasoningItem",
            "items.RunItem",
            "items.ToolCallItem",
            "items.ToolCallOutputItem",
            "items.TResponseInputItem",
            "lifecycle.RunHooks",
            "logger.logger",
            "model_settings.ModelSettings",
            "models.interface.ModelTracing",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "stream_events.RunItemStreamEvent",
            "stream_events.StreamEvent",
            "tool.ComputerTool",
            "tool.ComputerToolSafetyCheckData",
            "tool.FunctionTool",
            "tool.FunctionToolResult",
            "tool.HostedMCPTool",
            "tool.LocalShellCommandRequest",
            "tool.LocalShellTool",
            "tool.MCPToolApprovalRequest",
            "tool.Tool",
            "tool_context.ToolContext",
            "tool_guardrails.ToolInputGuardrailData",
            "tool_guardrails.ToolInputGuardrailResult",
            "tool_guardrails.ToolOutputGuardrailData",
            "tool_guardrails.ToolOutputGuardrailResult",
            "tracing.SpanError",
            "tracing.Trace",
            "tracing.function_span",
            "tracing.get_current_trace",
            "tracing.guardrail_span",
            "tracing.handoff_span",
            "tracing.trace",
            "util._coro",
            "util._error_tracing",
            "run.RunConfig",
            "json"
        ],
        "classes": [
            {
                "class_name": "QueueCompleteSentinel",
                "methods": []
            },
            {
                "class_name": "AgentToolUseTracker",
                "methods": [
                    "add_tool_use",
                    "has_used_tools"
                ]
            },
            {
                "class_name": "ToolRunHandoff",
                "methods": []
            },
            {
                "class_name": "ToolRunFunction",
                "methods": []
            },
            {
                "class_name": "ToolRunComputerAction",
                "methods": []
            },
            {
                "class_name": "ToolRunMCPApprovalRequest",
                "methods": []
            },
            {
                "class_name": "ToolRunLocalShellCall",
                "methods": []
            },
            {
                "class_name": "ProcessedResponse",
                "methods": [
                    "has_tools_or_approvals_to_run"
                ]
            },
            {
                "class_name": "NextStepHandoff",
                "methods": []
            },
            {
                "class_name": "NextStepFinalOutput",
                "methods": []
            },
            {
                "class_name": "NextStepRunAgain",
                "methods": []
            },
            {
                "class_name": "SingleStepResult",
                "methods": [
                    "generated_items"
                ]
            },
            {
                "class_name": "RunImpl",
                "methods": [
                    "maybe_reset_tool_choice",
                    "process_model_response",
                    "stream_step_items_to_queue",
                    "stream_step_result_to_queue"
                ]
            },
            {
                "class_name": "TraceCtxManager",
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__"
                ]
            },
            {
                "class_name": "ComputerAction",
                "methods": []
            },
            {
                "class_name": "LocalShellAction",
                "methods": []
            }
        ],
        "functions": {
            "add_tool_use": [
                "next",
                "extend",
                "append"
            ],
            "has_used_tools": [
                "next",
                "len"
            ],
            "has_tools_or_approvals_to_run": [
                "any"
            ],
            "generated_items": [],
            "get_model_tracing_impl": [],
            "maybe_reset_tool_choice": [
                "has_used_tools",
                "replace"
            ],
            "process_model_response": [
                "isinstance",
                "next",
                "append",
                "MessageOutputItem",
                "ToolCallItem",
                "ReasoningItem",
                "attach_error_to_current_span",
                "SpanError",
                "ModelBehaviorError",
                "ToolRunComputerAction",
                "MCPApprovalRequestItem",
                "ToolRunMCPApprovalRequest",
                "warning",
                "MCPListToolsItem",
                "ToolRunLocalShellCall",
                "type",
                "HandoffCallItem",
                "ToolRunHandoff",
                "ToolRunFunction",
                "_build_litellm_json_tool_call",
                "ProcessedResponse"
            ],
            "stream_step_items_to_queue": [
                "isinstance",
                "RunItemStreamEvent",
                "warning",
                "type",
                "put_nowait"
            ],
            "stream_step_result_to_queue": [
                "stream_step_items_to_queue"
            ],
            "__init__": [],
            "__enter__": [
                "get_current_trace",
                "trace",
                "start"
            ],
            "__exit__": [
                "finish"
            ],
            "_build_litellm_json_tool_call": [
                "isinstance",
                "loads",
                "FunctionTool"
            ]
        }
    },
    "src/agents/__init__.py": {
        "file_name": "/src/agents/__init__.py",
        "imports": [
            "logging",
            "sys",
            "typing.Literal",
            "openai.AsyncOpenAI",
            "._config",
            "agent.Agent",
            "agent.AgentBase",
            "agent.StopAtTools",
            "agent.ToolsToFinalOutputFunction",
            "agent.ToolsToFinalOutputResult",
            "agent_output.AgentOutputSchema",
            "agent_output.AgentOutputSchemaBase",
            "computer.AsyncComputer",
            "computer.Button",
            "computer.Computer",
            "computer.Environment",
            "exceptions.AgentsException",
            "exceptions.InputGuardrailTripwireTriggered",
            "exceptions.MaxTurnsExceeded",
            "exceptions.ModelBehaviorError",
            "exceptions.OutputGuardrailTripwireTriggered",
            "exceptions.RunErrorDetails",
            "exceptions.ToolInputGuardrailTripwireTriggered",
            "exceptions.ToolOutputGuardrailTripwireTriggered",
            "exceptions.UserError",
            "guardrail.GuardrailFunctionOutput",
            "guardrail.InputGuardrail",
            "guardrail.InputGuardrailResult",
            "guardrail.OutputGuardrail",
            "guardrail.OutputGuardrailResult",
            "guardrail.input_guardrail",
            "guardrail.output_guardrail",
            "handoffs.Handoff",
            "handoffs.HandoffInputData",
            "handoffs.HandoffInputFilter",
            "handoffs.handoff",
            "items.HandoffCallItem",
            "items.HandoffOutputItem",
            "items.ItemHelpers",
            "items.MessageOutputItem",
            "items.ModelResponse",
            "items.ReasoningItem",
            "items.RunItem",
            "items.ToolCallItem",
            "items.ToolCallOutputItem",
            "items.TResponseInputItem",
            "lifecycle.AgentHooks",
            "lifecycle.RunHooks",
            "memory.OpenAIConversationsSession",
            "memory.Session",
            "memory.SessionABC",
            "memory.SQLiteSession",
            "model_settings.ModelSettings",
            "models.interface.Model",
            "models.interface.ModelProvider",
            "models.interface.ModelTracing",
            "models.multi_provider.MultiProvider",
            "models.openai_chatcompletions.OpenAIChatCompletionsModel",
            "models.openai_provider.OpenAIProvider",
            "models.openai_responses.OpenAIResponsesModel",
            "prompts.DynamicPromptFunction",
            "prompts.GenerateDynamicPromptData",
            "prompts.Prompt",
            "repl.run_demo_loop",
            "result.RunResult",
            "result.RunResultStreaming",
            "run.RunConfig",
            "run.Runner",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "stream_events.AgentUpdatedStreamEvent",
            "stream_events.RawResponsesStreamEvent",
            "stream_events.RunItemStreamEvent",
            "stream_events.StreamEvent",
            "tool.CodeInterpreterTool",
            "tool.ComputerTool",
            "tool.FileSearchTool",
            "tool.FunctionTool",
            "tool.FunctionToolResult",
            "tool.HostedMCPTool",
            "tool.ImageGenerationTool",
            "tool.LocalShellCommandRequest",
            "tool.LocalShellExecutor",
            "tool.LocalShellTool",
            "tool.MCPToolApprovalFunction",
            "tool.MCPToolApprovalFunctionResult",
            "tool.MCPToolApprovalRequest",
            "tool.Tool",
            "tool.WebSearchTool",
            "tool.default_tool_error_function",
            "tool.function_tool",
            "tool_guardrails.ToolGuardrailFunctionOutput",
            "tool_guardrails.ToolInputGuardrail",
            "tool_guardrails.ToolInputGuardrailData",
            "tool_guardrails.ToolInputGuardrailResult",
            "tool_guardrails.ToolOutputGuardrail",
            "tool_guardrails.ToolOutputGuardrailData",
            "tool_guardrails.ToolOutputGuardrailResult",
            "tool_guardrails.tool_input_guardrail",
            "tool_guardrails.tool_output_guardrail",
            "tracing.AgentSpanData",
            "tracing.CustomSpanData",
            "tracing.FunctionSpanData",
            "tracing.GenerationSpanData",
            "tracing.GuardrailSpanData",
            "tracing.HandoffSpanData",
            "tracing.MCPListToolsSpanData",
            "tracing.Span",
            "tracing.SpanData",
            "tracing.SpanError",
            "tracing.SpeechGroupSpanData",
            "tracing.SpeechSpanData",
            "tracing.Trace",
            "tracing.TracingProcessor",
            "tracing.TranscriptionSpanData",
            "tracing.add_trace_processor",
            "tracing.agent_span",
            "tracing.custom_span",
            "tracing.function_span",
            "tracing.gen_span_id",
            "tracing.gen_trace_id",
            "tracing.generation_span",
            "tracing.get_current_span",
            "tracing.get_current_trace",
            "tracing.guardrail_span",
            "tracing.handoff_span",
            "tracing.mcp_tools_span",
            "tracing.set_trace_processors",
            "tracing.set_trace_provider",
            "tracing.set_tracing_disabled",
            "tracing.set_tracing_export_api_key",
            "tracing.speech_group_span",
            "tracing.speech_span",
            "tracing.trace",
            "tracing.transcription_span",
            "usage.Usage",
            "version.__version__"
        ],
        "classes": [],
        "functions": {
            "set_default_openai_key": [
                "set_default_openai_key"
            ],
            "set_default_openai_client": [
                "set_default_openai_client"
            ],
            "set_default_openai_api": [
                "set_default_openai_api"
            ],
            "enable_verbose_stdout_logging": [
                "getLogger",
                "setLevel",
                "addHandler",
                "StreamHandler"
            ]
        }
    },
    "src/agents/function_schema.py": {
        "file_name": "/src/agents/function_schema.py",
        "imports": [
            "__future__.annotations",
            "contextlib",
            "inspect",
            "logging",
            "re",
            "dataclasses.dataclass",
            "typing.Annotated",
            "typing.Any",
            "typing.Callable",
            "typing.Literal",
            "typing.get_args",
            "typing.get_origin",
            "typing.get_type_hints",
            "griffe.Docstring",
            "griffe.DocstringSectionKind",
            "pydantic.BaseModel",
            "pydantic.Field",
            "pydantic.create_model",
            "pydantic.fields.FieldInfo",
            "exceptions.UserError",
            "run_context.RunContextWrapper",
            "strict_schema.ensure_strict_json_schema",
            "tool_context.ToolContext"
        ],
        "classes": [
            {
                "class_name": "FuncSchema",
                "methods": [
                    "to_call_args"
                ]
            },
            {
                "class_name": "FuncDocumentation",
                "methods": []
            }
        ],
        "functions": {
            "to_call_args": [
                "enumerate",
                "items",
                "getattr",
                "extend",
                "update",
                "append"
            ],
            "_detect_docstring_style": [
                "search",
                "max",
                "values"
            ],
            "_suppress_griffe_logging": [
                "getLogger",
                "getEffectiveLevel",
                "setLevel"
            ],
            "generate_func_documentation": [
                "getdoc",
                "FuncDocumentation",
                "_suppress_griffe_logging",
                "Docstring",
                "_detect_docstring_style",
                "parse",
                "next"
            ],
            "_strip_annotated": [
                "get_origin",
                "get_args"
            ],
            "_extract_description_from_metadata": [
                "isinstance"
            ],
            "function_schema": [
                "generate_func_documentation",
                "dict",
                "get_type_hints",
                "items",
                "_strip_annotated",
                "_extract_description_from_metadata",
                "setdefault",
                "signature",
                "list",
                "get",
                "get_origin",
                "append",
                "UserError",
                "get_args",
                "len",
                "Field",
                "isinstance",
                "merge_field_infos",
                "create_model",
                "model_json_schema",
                "ensure_strict_json_schema",
                "FuncSchema"
            ]
        }
    },
    "src/agents/strict_schema.py": {
        "file_name": "/src/agents/strict_schema.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "openai.NOT_GIVEN",
            "typing_extensions.TypeGuard",
            "exceptions.UserError"
        ],
        "classes": [],
        "functions": {
            "ensure_strict_json_schema": [
                "_ensure_strict_json_schema"
            ],
            "_ensure_strict_json_schema": [
                "is_dict",
                "TypeError",
                "get",
                "items",
                "_ensure_strict_json_schema",
                "UserError",
                "list",
                "keys",
                "is_list",
                "str",
                "enumerate",
                "pop",
                "len",
                "update",
                "has_more_than_n_keys",
                "isinstance",
                "resolve_ref",
                "ValueError"
            ],
            "resolve_ref": [
                "startswith",
                "ValueError",
                "split",
                "is_dict"
            ],
            "is_dict": [
                "isinstance"
            ],
            "is_list": [
                "isinstance"
            ],
            "has_more_than_n_keys": [
                "keys"
            ]
        }
    },
    "src/agents/result.py": {
        "file_name": "/src/agents/result.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "asyncio",
            "collections.abc.AsyncIterator",
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.cast",
            "typing_extensions.TypeVar",
            "_run_impl.QueueCompleteSentinel",
            "agent.Agent",
            "agent_output.AgentOutputSchemaBase",
            "exceptions.AgentsException",
            "exceptions.InputGuardrailTripwireTriggered",
            "exceptions.MaxTurnsExceeded",
            "exceptions.RunErrorDetails",
            "guardrail.InputGuardrailResult",
            "guardrail.OutputGuardrailResult",
            "items.ItemHelpers",
            "items.ModelResponse",
            "items.RunItem",
            "items.TResponseInputItem",
            "logger.logger",
            "run_context.RunContextWrapper",
            "stream_events.StreamEvent",
            "tracing.Trace",
            "util._pretty_print.pretty_print_result",
            "util._pretty_print.pretty_print_run_result_streaming",
            "_run_impl.QueueCompleteSentinel",
            "agent.Agent",
            "tool_guardrails.ToolInputGuardrailResult",
            "tool_guardrails.ToolOutputGuardrailResult"
        ],
        "classes": [
            {
                "class_name": "RunResultBase",
                "methods": [
                    "last_agent",
                    "final_output_as",
                    "to_input_list",
                    "last_response_id"
                ]
            },
            {
                "class_name": "RunResult",
                "methods": [
                    "last_agent",
                    "__str__"
                ]
            },
            {
                "class_name": "RunResultStreaming",
                "methods": [
                    "last_agent",
                    "cancel",
                    "_create_error_details",
                    "_check_errors",
                    "_cleanup_tasks",
                    "__str__"
                ]
            }
        ],
        "functions": {
            "last_agent": [],
            "final_output_as": [
                "isinstance",
                "TypeError",
                "cast"
            ],
            "to_input_list": [
                "input_to_new_input_list",
                "to_input_item"
            ],
            "last_response_id": [],
            "__str__": [
                "pretty_print_result",
                "pretty_print_run_result_streaming"
            ],
            "cancel": [
                "_cleanup_tasks",
                "empty",
                "get_nowait"
            ],
            "_create_error_details": [
                "RunErrorDetails"
            ],
            "_check_errors": [
                "MaxTurnsExceeded",
                "_create_error_details",
                "empty",
                "get_nowait",
                "InputGuardrailTripwireTriggered",
                "done",
                "exception",
                "isinstance"
            ],
            "_cleanup_tasks": [
                "done",
                "cancel"
            ]
        }
    },
    "src/agents/exceptions.py": {
        "file_name": "/src/agents/exceptions.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "agent.Agent",
            "guardrail.InputGuardrailResult",
            "guardrail.OutputGuardrailResult",
            "items.ModelResponse",
            "items.RunItem",
            "items.TResponseInputItem",
            "run_context.RunContextWrapper",
            "tool_guardrails.ToolGuardrailFunctionOutput",
            "tool_guardrails.ToolInputGuardrail",
            "tool_guardrails.ToolOutputGuardrail",
            "util._pretty_print.pretty_print_run_error_details"
        ],
        "classes": [
            {
                "class_name": "RunErrorDetails",
                "methods": [
                    "__str__"
                ]
            },
            {
                "class_name": "AgentsException",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "MaxTurnsExceeded",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "ModelBehaviorError",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "UserError",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "InputGuardrailTripwireTriggered",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "OutputGuardrailTripwireTriggered",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "ToolInputGuardrailTripwireTriggered",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "ToolOutputGuardrailTripwireTriggered",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__str__": [
                "pretty_print_run_error_details"
            ],
            "__init__": [
                "__init__",
                "super"
            ]
        }
    },
    "src/agents/run.py": {
        "file_name": "/src/agents/run.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "inspect",
            "os",
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.Any",
            "typing.Callable",
            "typing.Generic",
            "typing.cast",
            "typing.get_args",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.ResponseOutputItemDoneEvent",
            "openai.types.responses.response_prompt_param.ResponsePromptParam",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "typing_extensions.NotRequired",
            "typing_extensions.TypedDict",
            "typing_extensions.Unpack",
            "_run_impl.AgentToolUseTracker",
            "_run_impl.NextStepFinalOutput",
            "_run_impl.NextStepHandoff",
            "_run_impl.NextStepRunAgain",
            "_run_impl.QueueCompleteSentinel",
            "_run_impl.RunImpl",
            "_run_impl.SingleStepResult",
            "_run_impl.TraceCtxManager",
            "_run_impl.get_model_tracing_impl",
            "agent.Agent",
            "agent_output.AgentOutputSchema",
            "agent_output.AgentOutputSchemaBase",
            "exceptions.AgentsException",
            "exceptions.InputGuardrailTripwireTriggered",
            "exceptions.MaxTurnsExceeded",
            "exceptions.ModelBehaviorError",
            "exceptions.OutputGuardrailTripwireTriggered",
            "exceptions.RunErrorDetails",
            "exceptions.UserError",
            "guardrail.InputGuardrail",
            "guardrail.InputGuardrailResult",
            "guardrail.OutputGuardrail",
            "guardrail.OutputGuardrailResult",
            "handoffs.Handoff",
            "handoffs.HandoffInputFilter",
            "handoffs.handoff",
            "items.HandoffCallItem",
            "items.ItemHelpers",
            "items.ModelResponse",
            "items.ReasoningItem",
            "items.RunItem",
            "items.ToolCallItem",
            "items.ToolCallItemTypes",
            "items.TResponseInputItem",
            "lifecycle.AgentHooksBase",
            "lifecycle.RunHooks",
            "lifecycle.RunHooksBase",
            "logger.logger",
            "memory.Session",
            "memory.SessionInputCallback",
            "model_settings.ModelSettings",
            "models.interface.Model",
            "models.interface.ModelProvider",
            "models.multi_provider.MultiProvider",
            "result.RunResult",
            "result.RunResultStreaming",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "stream_events.AgentUpdatedStreamEvent",
            "stream_events.RawResponsesStreamEvent",
            "stream_events.RunItemStreamEvent",
            "stream_events.StreamEvent",
            "tool.Tool",
            "tool_guardrails.ToolInputGuardrailResult",
            "tool_guardrails.ToolOutputGuardrailResult",
            "tracing.Span",
            "tracing.SpanError",
            "tracing.agent_span",
            "tracing.get_current_trace",
            "tracing.trace",
            "tracing.span_data.AgentSpanData",
            "usage.Usage",
            "util._coro",
            "util._error_tracing",
            "util._types.MaybeAwaitable",
            "dataclasses"
        ],
        "classes": [
            {
                "class_name": "ModelInputData",
                "methods": []
            },
            {
                "class_name": "CallModelData",
                "methods": []
            },
            {
                "class_name": "_ServerConversationTracker",
                "methods": [
                    "track_server_items",
                    "prepare_input"
                ]
            },
            {
                "class_name": "RunConfig",
                "methods": []
            },
            {
                "class_name": "RunOptions",
                "methods": []
            },
            {
                "class_name": "Runner",
                "methods": [
                    "run_sync",
                    "run_streamed"
                ]
            },
            {
                "class_name": "AgentRunner",
                "methods": [
                    "run_sync",
                    "run_streamed",
                    "_validate_run_hooks",
                    "_get_output_schema",
                    "_get_model"
                ]
            }
        ],
        "functions": {
            "set_default_agent_runner": [
                "AgentRunner"
            ],
            "get_default_agent_runner": [],
            "_default_trace_include_sensitive_data": [
                "getenv",
                "lower",
                "strip"
            ],
            "track_server_items": [
                "add",
                "id"
            ],
            "prepare_input": [
                "extend",
                "input_to_new_input_list",
                "id",
                "append",
                "to_input_item",
                "add"
            ],
            "run_sync": [
                "run_sync",
                "get",
                "run_until_complete",
                "get_event_loop",
                "run"
            ],
            "run_streamed": [
                "run_streamed",
                "get",
                "cast",
                "_validate_run_hooks",
                "RunConfig",
                "get_current_trace",
                "trace",
                "_get_output_schema",
                "RunContextWrapper",
                "RunResultStreaming",
                "_copy_str_or_list",
                "create_task",
                "_start_streaming"
            ],
            "_validate_run_hooks": [
                "type",
                "isinstance",
                "TypeError"
            ],
            "_get_output_schema": [
                "isinstance",
                "AgentOutputSchema"
            ],
            "_get_model": [
                "isinstance",
                "get_model"
            ],
            "_copy_str_or_list": [
                "isinstance",
                "copy"
            ]
        }
    },
    "src/agents/tool.py": {
        "file_name": "/src/agents/tool.py",
        "imports": [
            "__future__.annotations",
            "inspect",
            "json",
            "collections.abc.Awaitable",
            "dataclasses.dataclass",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.Literal",
            "typing.Union",
            "typing.overload",
            "openai.types.responses.file_search_tool_param.Filters",
            "openai.types.responses.file_search_tool_param.RankingOptions",
            "openai.types.responses.response_computer_tool_call.PendingSafetyCheck",
            "openai.types.responses.response_computer_tool_call.ResponseComputerToolCall",
            "openai.types.responses.response_output_item.LocalShellCall",
            "openai.types.responses.response_output_item.McpApprovalRequest",
            "openai.types.responses.tool_param.CodeInterpreter",
            "openai.types.responses.tool_param.ImageGeneration",
            "openai.types.responses.tool_param.Mcp",
            "openai.types.responses.web_search_tool.Filters",
            "openai.types.responses.web_search_tool_param.UserLocation",
            "pydantic.ValidationError",
            "typing_extensions.Concatenate",
            "typing_extensions.NotRequired",
            "typing_extensions.ParamSpec",
            "typing_extensions.TypedDict",
            "._debug",
            "computer.AsyncComputer",
            "computer.Computer",
            "exceptions.ModelBehaviorError",
            "function_schema.DocstringStyle",
            "function_schema.function_schema",
            "items.RunItem",
            "logger.logger",
            "run_context.RunContextWrapper",
            "strict_schema.ensure_strict_json_schema",
            "tool_context.ToolContext",
            "tool_guardrails.ToolInputGuardrail",
            "tool_guardrails.ToolOutputGuardrail",
            "tracing.SpanError",
            "util._error_tracing",
            "util._types.MaybeAwaitable",
            "agent.Agent",
            "agent.AgentBase"
        ],
        "classes": [
            {
                "class_name": "FunctionToolResult",
                "methods": []
            },
            {
                "class_name": "FunctionTool",
                "methods": [
                    "__post_init__"
                ]
            },
            {
                "class_name": "FileSearchTool",
                "methods": [
                    "name"
                ]
            },
            {
                "class_name": "WebSearchTool",
                "methods": [
                    "name"
                ]
            },
            {
                "class_name": "ComputerTool",
                "methods": [
                    "name"
                ]
            },
            {
                "class_name": "ComputerToolSafetyCheckData",
                "methods": []
            },
            {
                "class_name": "MCPToolApprovalRequest",
                "methods": []
            },
            {
                "class_name": "MCPToolApprovalFunctionResult",
                "methods": []
            },
            {
                "class_name": "HostedMCPTool",
                "methods": [
                    "name"
                ]
            },
            {
                "class_name": "CodeInterpreterTool",
                "methods": [
                    "name"
                ]
            },
            {
                "class_name": "ImageGenerationTool",
                "methods": [
                    "name"
                ]
            },
            {
                "class_name": "LocalShellCommandRequest",
                "methods": []
            },
            {
                "class_name": "LocalShellTool",
                "methods": [
                    "name"
                ]
            }
        ],
        "functions": {
            "__post_init__": [
                "ensure_strict_json_schema"
            ],
            "name": [],
            "default_tool_error_function": [
                "str"
            ],
            "function_tool": [
                "callable",
                "_create_function_tool"
            ],
            "_create_function_tool": [
                "function_schema",
                "loads",
                "debug",
                "ModelBehaviorError",
                "params_pydantic_model",
                "to_call_args",
                "iscoroutinefunction",
                "the_func",
                "_on_invoke_tool_impl",
                "failure_error_function",
                "isawaitable",
                "attach_error_to_current_span",
                "SpanError",
                "str",
                "FunctionTool"
            ],
            "decorator": [
                "_create_function_tool"
            ]
        }
    },
    "src/agents/run_context.py": {
        "file_name": "/src/agents/run_context.py",
        "imports": [
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.Any",
            "typing.Generic",
            "typing_extensions.TypeVar",
            "usage.Usage"
        ],
        "classes": [
            {
                "class_name": "RunContextWrapper",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/items.py": {
        "file_name": "/src/agents/items.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "dataclasses.dataclass",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Generic",
            "typing.Literal",
            "typing.TypeVar",
            "typing.Union",
            "pydantic",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseComputerToolCall",
            "openai.types.responses.ResponseFileSearchToolCall",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseFunctionWebSearch",
            "openai.types.responses.ResponseInputItemParam",
            "openai.types.responses.ResponseOutputItem",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.ResponseStreamEvent",
            "openai.types.responses.response_code_interpreter_tool_call.ResponseCodeInterpreterToolCall",
            "openai.types.responses.response_input_item_param.ComputerCallOutput",
            "openai.types.responses.response_input_item_param.FunctionCallOutput",
            "openai.types.responses.response_input_item_param.LocalShellCallOutput",
            "openai.types.responses.response_input_item_param.McpApprovalResponse",
            "openai.types.responses.response_output_item.ImageGenerationCall",
            "openai.types.responses.response_output_item.LocalShellCall",
            "openai.types.responses.response_output_item.McpApprovalRequest",
            "openai.types.responses.response_output_item.McpCall",
            "openai.types.responses.response_output_item.McpListTools",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "pydantic.BaseModel",
            "typing_extensions.TypeAlias",
            "exceptions.AgentsException",
            "exceptions.ModelBehaviorError",
            "usage.Usage",
            "agent.Agent"
        ],
        "classes": [
            {
                "class_name": "RunItemBase",
                "methods": [
                    "to_input_item"
                ]
            },
            {
                "class_name": "MessageOutputItem",
                "methods": []
            },
            {
                "class_name": "HandoffCallItem",
                "methods": []
            },
            {
                "class_name": "HandoffOutputItem",
                "methods": []
            },
            {
                "class_name": "ToolCallItem",
                "methods": []
            },
            {
                "class_name": "ToolCallOutputItem",
                "methods": []
            },
            {
                "class_name": "ReasoningItem",
                "methods": []
            },
            {
                "class_name": "MCPListToolsItem",
                "methods": []
            },
            {
                "class_name": "MCPApprovalRequestItem",
                "methods": []
            },
            {
                "class_name": "MCPApprovalResponseItem",
                "methods": []
            },
            {
                "class_name": "ModelResponse",
                "methods": [
                    "to_input_items"
                ]
            },
            {
                "class_name": "ItemHelpers",
                "methods": [
                    "extract_last_content",
                    "extract_last_text",
                    "input_to_new_input_list",
                    "text_message_outputs",
                    "text_message_output",
                    "tool_call_output_item"
                ]
            }
        ],
        "functions": {
            "to_input_item": [
                "isinstance",
                "model_dump",
                "AgentsException",
                "type"
            ],
            "to_input_items": [
                "model_dump"
            ],
            "extract_last_content": [
                "isinstance",
                "ModelBehaviorError",
                "type"
            ],
            "extract_last_text": [
                "isinstance"
            ],
            "input_to_new_input_list": [
                "isinstance",
                "copy"
            ],
            "text_message_outputs": [
                "isinstance",
                "text_message_output"
            ],
            "text_message_output": [
                "isinstance"
            ],
            "tool_call_output_item": []
        }
    },
    "src/agents/stream_events.py": {
        "file_name": "/src/agents/stream_events.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "typing_extensions.TypeAlias",
            "agent.Agent",
            "items.RunItem",
            "items.TResponseStreamEvent"
        ],
        "classes": [
            {
                "class_name": "RawResponsesStreamEvent",
                "methods": []
            },
            {
                "class_name": "RunItemStreamEvent",
                "methods": []
            },
            {
                "class_name": "AgentUpdatedStreamEvent",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/agent_output.py": {
        "file_name": "/src/agents/agent_output.py",
        "imports": [
            "abc",
            "dataclasses.dataclass",
            "typing.Any",
            "pydantic.BaseModel",
            "pydantic.TypeAdapter",
            "typing_extensions.TypedDict",
            "typing_extensions.get_args",
            "typing_extensions.get_origin",
            "exceptions.ModelBehaviorError",
            "exceptions.UserError",
            "strict_schema.ensure_strict_json_schema",
            "tracing.SpanError",
            "util._error_tracing",
            "util._json"
        ],
        "classes": [
            {
                "class_name": "AgentOutputSchemaBase",
                "methods": [
                    "is_plain_text",
                    "name",
                    "json_schema",
                    "is_strict_json_schema",
                    "validate_json"
                ]
            },
            {
                "class_name": "AgentOutputSchema",
                "methods": [
                    "__init__",
                    "is_plain_text",
                    "is_strict_json_schema",
                    "json_schema",
                    "validate_json",
                    "name"
                ]
            }
        ],
        "functions": {
            "is_plain_text": [],
            "name": [
                "_type_to_str"
            ],
            "json_schema": [
                "is_plain_text",
                "UserError"
            ],
            "is_strict_json_schema": [],
            "validate_json": [
                "validate_json",
                "isinstance",
                "attach_error_to_current_span",
                "SpanError",
                "type",
                "ModelBehaviorError"
            ],
            "__init__": [
                "TypeAdapter",
                "json_schema",
                "_is_subclass_of_base_model_or_dict",
                "TypedDict",
                "ensure_strict_json_schema",
                "UserError"
            ],
            "_is_subclass_of_base_model_or_dict": [
                "isinstance",
                "get_origin",
                "issubclass"
            ],
            "_type_to_str": [
                "get_origin",
                "get_args",
                "join",
                "_type_to_str",
                "str"
            ]
        }
    },
    "src/agents/_debug.py": {
        "file_name": "/src/agents/_debug.py",
        "imports": [
            "os"
        ],
        "classes": [],
        "functions": {
            "_debug_flag_enabled": [
                "getenv",
                "lower"
            ],
            "_load_dont_log_model_data": [
                "_debug_flag_enabled"
            ],
            "_load_dont_log_tool_data": [
                "_debug_flag_enabled"
            ]
        }
    },
    "src/agents/agent.py": {
        "file_name": "/src/agents/agent.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "dataclasses",
            "inspect",
            "collections.abc.Awaitable",
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.Generic",
            "typing.Literal",
            "typing.cast",
            "openai.types.responses.response_prompt_param.ResponsePromptParam",
            "typing_extensions.NotRequired",
            "typing_extensions.TypeAlias",
            "typing_extensions.TypedDict",
            "agent_output.AgentOutputSchemaBase",
            "guardrail.InputGuardrail",
            "guardrail.OutputGuardrail",
            "handoffs.Handoff",
            "items.ItemHelpers",
            "logger.logger",
            "mcp.MCPUtil",
            "model_settings.ModelSettings",
            "models.default_models.get_default_model_settings",
            "models.default_models.gpt_5_reasoning_settings_required",
            "models.default_models.is_gpt_5_default",
            "models.interface.Model",
            "prompts.DynamicPromptFunction",
            "prompts.Prompt",
            "prompts.PromptUtil",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "tool.FunctionTool",
            "tool.FunctionToolResult",
            "tool.Tool",
            "tool.function_tool",
            "util._transforms",
            "util._types.MaybeAwaitable",
            "lifecycle.AgentHooks",
            "lifecycle.RunHooks",
            "mcp.MCPServer",
            "memory.session.Session",
            "result.RunResult",
            "run.RunConfig",
            "typing.get_origin",
            "models.interface.Model",
            "agent_output.AgentOutputSchemaBase",
            "lifecycle.AgentHooksBase",
            "run.DEFAULT_MAX_TURNS",
            "run.Runner"
        ],
        "classes": [
            {
                "class_name": "ToolsToFinalOutputResult",
                "methods": []
            },
            {
                "class_name": "StopAtTools",
                "methods": []
            },
            {
                "class_name": "MCPConfig",
                "methods": []
            },
            {
                "class_name": "AgentBase",
                "methods": []
            },
            {
                "class_name": "Agent",
                "methods": [
                    "__post_init__",
                    "clone",
                    "as_tool"
                ]
            }
        ],
        "functions": {
            "__post_init__": [
                "isinstance",
                "TypeError",
                "type",
                "callable",
                "hasattr",
                "is_gpt_5_default",
                "gpt_5_reasoning_settings_required",
                "get_default_model_settings",
                "ModelSettings",
                "get_origin"
            ],
            "clone": [
                "replace"
            ],
            "as_tool": [
                "run",
                "custom_output_extractor",
                "text_message_outputs",
                "function_tool",
                "transform_string_function_style"
            ]
        }
    },
    "src/agents/logger.py": {
        "file_name": "/src/agents/logger.py",
        "imports": [
            "logging"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/computer.py": {
        "file_name": "/src/agents/computer.py",
        "imports": [
            "abc",
            "typing.Literal"
        ],
        "classes": [
            {
                "class_name": "Computer",
                "methods": [
                    "environment",
                    "dimensions",
                    "screenshot",
                    "click",
                    "double_click",
                    "scroll",
                    "type",
                    "wait",
                    "move",
                    "keypress",
                    "drag"
                ]
            },
            {
                "class_name": "AsyncComputer",
                "methods": [
                    "environment",
                    "dimensions"
                ]
            }
        ],
        "functions": {
            "environment": [],
            "dimensions": [],
            "screenshot": [],
            "click": [],
            "double_click": [],
            "scroll": [],
            "type": [],
            "wait": [],
            "move": [],
            "keypress": [],
            "drag": []
        }
    },
    "src/agents/usage.py": {
        "file_name": "/src/agents/usage.py",
        "imports": [
            "dataclasses.field",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "pydantic.dataclasses.dataclass"
        ],
        "classes": [
            {
                "class_name": "Usage",
                "methods": [
                    "add"
                ]
            }
        ],
        "functions": {
            "add": [
                "InputTokensDetails",
                "OutputTokensDetails"
            ]
        }
    },
    "src/agents/_config.py": {
        "file_name": "/src/agents/_config.py",
        "imports": [
            "openai.AsyncOpenAI",
            "typing_extensions.Literal",
            "models._openai_shared",
            "tracing.set_tracing_export_api_key"
        ],
        "classes": [],
        "functions": {
            "set_default_openai_key": [
                "set_default_openai_key",
                "set_tracing_export_api_key"
            ],
            "set_default_openai_client": [
                "set_default_openai_client",
                "set_tracing_export_api_key"
            ],
            "set_default_openai_api": [
                "set_use_responses_by_default"
            ]
        }
    },
    "src/agents/lifecycle.py": {
        "file_name": "/src/agents/lifecycle.py",
        "imports": [
            "typing.Any",
            "typing.Generic",
            "typing.Optional",
            "typing_extensions.TypeVar",
            "agent.Agent",
            "agent.AgentBase",
            "items.ModelResponse",
            "items.TResponseInputItem",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "tool.Tool"
        ],
        "classes": [
            {
                "class_name": "RunHooksBase",
                "methods": []
            },
            {
                "class_name": "AgentHooksBase",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/realtime/openai_realtime.py": {
        "file_name": "/src/agents/realtime/openai_realtime.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "base64",
            "inspect",
            "json",
            "os",
            "collections.abc.Mapping",
            "datetime.datetime",
            "typing.Annotated",
            "typing.Any",
            "typing.Callable",
            "typing.Literal",
            "typing.Union",
            "typing.cast",
            "pydantic",
            "websockets",
            "openai.types.realtime.realtime_audio_config",
            "openai.types.realtime.conversation_item.ConversationItem",
            "openai.types.realtime.conversation_item.ConversationItem",
            "openai.types.realtime.conversation_item_create_event.ConversationItemCreateEvent",
            "openai.types.realtime.conversation_item_retrieve_event.ConversationItemRetrieveEvent",
            "openai.types.realtime.conversation_item_truncate_event.ConversationItemTruncateEvent",
            "openai.types.realtime.input_audio_buffer_append_event.InputAudioBufferAppendEvent",
            "openai.types.realtime.input_audio_buffer_commit_event.InputAudioBufferCommitEvent",
            "openai.types.realtime.realtime_audio_formats.AudioPCM",
            "openai.types.realtime.realtime_audio_formats.AudioPCMA",
            "openai.types.realtime.realtime_audio_formats.AudioPCMU",
            "openai.types.realtime.realtime_client_event.RealtimeClientEvent",
            "openai.types.realtime.realtime_conversation_item_assistant_message.RealtimeConversationItemAssistantMessage",
            "openai.types.realtime.realtime_conversation_item_function_call_output.RealtimeConversationItemFunctionCallOutput",
            "openai.types.realtime.realtime_conversation_item_system_message.RealtimeConversationItemSystemMessage",
            "openai.types.realtime.realtime_conversation_item_user_message.Content",
            "openai.types.realtime.realtime_conversation_item_user_message.RealtimeConversationItemUserMessage",
            "openai.types.realtime.realtime_function_tool.RealtimeFunctionTool",
            "openai.types.realtime.realtime_server_event.RealtimeServerEvent",
            "openai.types.realtime.realtime_session_create_request.RealtimeSessionCreateRequest",
            "openai.types.realtime.realtime_tracing_config.TracingConfiguration",
            "openai.types.realtime.realtime_transcription_session_create_request.RealtimeTranscriptionSessionCreateRequest",
            "openai.types.realtime.response_audio_delta_event.ResponseAudioDeltaEvent",
            "openai.types.realtime.response_cancel_event.ResponseCancelEvent",
            "openai.types.realtime.response_create_event.ResponseCreateEvent",
            "openai.types.realtime.session_update_event.SessionUpdateEvent",
            "openai.types.responses.response_prompt.ResponsePrompt",
            "pydantic.Field",
            "pydantic.TypeAdapter",
            "typing_extensions.assert_never",
            "websockets.asyncio.client.ClientConnection",
            "agents.handoffs.Handoff",
            "agents.prompts.Prompt",
            "agents.realtime._default_tracker.ModelAudioTracker",
            "agents.realtime.audio_formats.to_realtime_audio_format",
            "agents.tool.FunctionTool",
            "agents.tool.Tool",
            "agents.util._types.MaybeAwaitable",
            "exceptions.UserError",
            "logger.logger",
            "version.__version__",
            "config.RealtimeModelTracingConfig",
            "config.RealtimeSessionModelSettings",
            "items.RealtimeMessageItem",
            "items.RealtimeToolCallItem",
            "model.RealtimeModel",
            "model.RealtimeModelConfig",
            "model.RealtimeModelListener",
            "model.RealtimePlaybackState",
            "model.RealtimePlaybackTracker",
            "model_events.RealtimeModelAudioDoneEvent",
            "model_events.RealtimeModelAudioEvent",
            "model_events.RealtimeModelAudioInterruptedEvent",
            "model_events.RealtimeModelErrorEvent",
            "model_events.RealtimeModelEvent",
            "model_events.RealtimeModelExceptionEvent",
            "model_events.RealtimeModelInputAudioTimeoutTriggeredEvent",
            "model_events.RealtimeModelInputAudioTranscriptionCompletedEvent",
            "model_events.RealtimeModelItemDeletedEvent",
            "model_events.RealtimeModelItemUpdatedEvent",
            "model_events.RealtimeModelRawServerEvent",
            "model_events.RealtimeModelToolCallEvent",
            "model_events.RealtimeModelTranscriptDeltaEvent",
            "model_events.RealtimeModelTurnEndedEvent",
            "model_events.RealtimeModelTurnStartedEvent",
            "model_inputs.RealtimeModelSendAudio",
            "model_inputs.RealtimeModelSendEvent",
            "model_inputs.RealtimeModelSendInterrupt",
            "model_inputs.RealtimeModelSendRawMessage",
            "model_inputs.RealtimeModelSendSessionUpdate",
            "model_inputs.RealtimeModelSendToolOutput",
            "model_inputs.RealtimeModelSendUserInput"
        ],
        "classes": [
            {
                "class_name": "OpenAIRealtimeWebSocketModel",
                "methods": [
                    "__init__",
                    "add_listener",
                    "remove_listener",
                    "_get_playback_state",
                    "_update_created_session",
                    "_normalize_session_payload",
                    "_is_transcription_session",
                    "_extract_audio_format",
                    "_normalize_audio_format",
                    "_read_format_type",
                    "_get_session_config",
                    "_tools_to_session_tools"
                ]
            },
            {
                "class_name": "_ConversionHelper",
                "methods": [
                    "conversation_item_to_realtime_message_item",
                    "try_convert_raw_message",
                    "convert_tracing_config",
                    "convert_user_input_to_conversation_item",
                    "convert_user_input_to_item_create",
                    "convert_audio_to_input_audio_buffer_append",
                    "convert_tool_output",
                    "convert_interrupt"
                ]
            }
        ],
        "functions": {
            "get_server_event_type_adapter": [
                "TypeAdapter"
            ],
            "__init__": [
                "ModelAudioTracker",
                "get_server_event_type_adapter"
            ],
            "add_listener": [
                "append"
            ],
            "remove_listener": [
                "remove"
            ],
            "_get_playback_state": [
                "get_state",
                "get_last_audio_item",
                "total_seconds",
                "now"
            ],
            "_update_created_session": [
                "_normalize_session_payload",
                "_extract_audio_format",
                "set_audio_format"
            ],
            "_normalize_session_payload": [
                "isinstance",
                "cast",
                "model_dump",
                "_is_transcription_session",
                "model_validate"
            ],
            "_is_transcription_session": [
                "model_validate"
            ],
            "_extract_audio_format": [
                "_normalize_audio_format"
            ],
            "_normalize_audio_format": [
                "isinstance",
                "_read_format_type",
                "str"
            ],
            "_read_format_type": [
                "isinstance",
                "get",
                "model_dump"
            ],
            "_get_session_config": [
                "get",
                "any",
                "OpenAIRealtimeAudioInput",
                "to_realtime_audio_format",
                "cast",
                "OpenAIRealtimeAudioOutput",
                "OpenAIRealtimeAudioConfig",
                "ResponsePrompt",
                "OpenAISessionCreateRequest",
                "_tools_to_session_tools"
            ],
            "_tools_to_session_tools": [
                "isinstance",
                "UserError",
                "append",
                "OpenAISessionFunction"
            ],
            "conversation_item_to_realtime_message_item": [
                "isinstance",
                "ValueError",
                "model_dump",
                "append",
                "validate_python",
                "TypeAdapter"
            ],
            "try_convert_raw_message": [
                "update",
                "get",
                "validate_python",
                "TypeAdapter"
            ],
            "convert_tracing_config": [
                "OpenAITracingConfiguration",
                "get"
            ],
            "convert_user_input_to_conversation_item": [
                "isinstance",
                "get",
                "append",
                "Content",
                "cast",
                "RealtimeConversationItemUserMessage"
            ],
            "convert_user_input_to_item_create": [
                "OpenAIConversationItemCreateEvent",
                "convert_user_input_to_conversation_item"
            ],
            "convert_audio_to_input_audio_buffer_append": [
                "decode",
                "b64encode",
                "OpenAIInputAudioBufferAppendEvent"
            ],
            "convert_tool_output": [
                "OpenAIConversationItemCreateEvent",
                "RealtimeConversationItemFunctionCallOutput"
            ],
            "convert_interrupt": [
                "OpenAIConversationItemTruncateEvent"
            ]
        }
    },
    "src/agents/realtime/handoffs.py": {
        "file_name": "/src/agents/realtime/handoffs.py",
        "imports": [
            "__future__.annotations",
            "inspect",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.cast",
            "typing.overload",
            "pydantic.TypeAdapter",
            "typing_extensions.TypeVar",
            "exceptions.ModelBehaviorError",
            "exceptions.UserError",
            "handoffs.Handoff",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "strict_schema.ensure_strict_json_schema",
            "tracing.spans.SpanError",
            "util._error_tracing",
            "util._json",
            "util._types.MaybeAwaitable",
            ".RealtimeAgent",
            "agent.AgentBase"
        ],
        "classes": [],
        "functions": {
            "realtime_handoff": [
                "callable",
                "signature",
                "len",
                "UserError",
                "TypeAdapter",
                "json_schema",
                "attach_error_to_current_span",
                "SpanError",
                "ModelBehaviorError",
                "validate_json",
                "cast",
                "iscoroutinefunction",
                "input_func",
                "no_input_func",
                "default_tool_name",
                "default_tool_description",
                "ensure_strict_json_schema",
                "isinstance",
                "is_enabled",
                "isawaitable",
                "Handoff"
            ]
        }
    },
    "src/agents/realtime/model_inputs.py": {
        "file_name": "/src/agents/realtime/model_inputs.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "typing_extensions.NotRequired",
            "typing_extensions.TypeAlias",
            "typing_extensions.TypedDict",
            "config.RealtimeSessionModelSettings",
            "model_events.RealtimeModelToolCallEvent"
        ],
        "classes": [
            {
                "class_name": "RealtimeModelRawClientMessage",
                "methods": []
            },
            {
                "class_name": "RealtimeModelInputTextContent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelInputImageContent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelUserInputMessage",
                "methods": []
            },
            {
                "class_name": "RealtimeModelSendRawMessage",
                "methods": []
            },
            {
                "class_name": "RealtimeModelSendUserInput",
                "methods": []
            },
            {
                "class_name": "RealtimeModelSendAudio",
                "methods": []
            },
            {
                "class_name": "RealtimeModelSendToolOutput",
                "methods": []
            },
            {
                "class_name": "RealtimeModelSendInterrupt",
                "methods": []
            },
            {
                "class_name": "RealtimeModelSendSessionUpdate",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/realtime/model_events.py": {
        "file_name": "/src/agents/realtime/model_events.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "typing_extensions.TypeAlias",
            "items.RealtimeItem"
        ],
        "classes": [
            {
                "class_name": "RealtimeModelErrorEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelToolCallEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelAudioEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelAudioInterruptedEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelAudioDoneEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelInputAudioTranscriptionCompletedEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelInputAudioTimeoutTriggeredEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelTranscriptDeltaEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelItemUpdatedEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelItemDeletedEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelConnectionStatusEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelTurnStartedEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelTurnEndedEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelOtherEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelExceptionEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeModelRawServerEvent",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/realtime/__init__.py": {
        "file_name": "/src/agents/realtime/__init__.py",
        "imports": [
            "agent.RealtimeAgent",
            "agent.RealtimeAgentHooks",
            "agent.RealtimeRunHooks",
            "config.RealtimeAudioFormat",
            "config.RealtimeClientMessage",
            "config.RealtimeGuardrailsSettings",
            "config.RealtimeInputAudioNoiseReductionConfig",
            "config.RealtimeInputAudioTranscriptionConfig",
            "config.RealtimeModelName",
            "config.RealtimeModelTracingConfig",
            "config.RealtimeRunConfig",
            "config.RealtimeSessionModelSettings",
            "config.RealtimeTurnDetectionConfig",
            "config.RealtimeUserInput",
            "config.RealtimeUserInputMessage",
            "config.RealtimeUserInputText",
            "events.RealtimeAgentEndEvent",
            "events.RealtimeAgentStartEvent",
            "events.RealtimeAudio",
            "events.RealtimeAudioEnd",
            "events.RealtimeAudioInterrupted",
            "events.RealtimeError",
            "events.RealtimeEventInfo",
            "events.RealtimeGuardrailTripped",
            "events.RealtimeHandoffEvent",
            "events.RealtimeHistoryAdded",
            "events.RealtimeHistoryUpdated",
            "events.RealtimeRawModelEvent",
            "events.RealtimeSessionEvent",
            "events.RealtimeToolEnd",
            "events.RealtimeToolStart",
            "handoffs.realtime_handoff",
            "items.AssistantMessageItem",
            "items.AssistantText",
            "items.InputAudio",
            "items.InputText",
            "items.RealtimeItem",
            "items.RealtimeMessageItem",
            "items.RealtimeResponse",
            "items.RealtimeToolCallItem",
            "items.SystemMessageItem",
            "items.UserMessageItem",
            "model.RealtimeModel",
            "model.RealtimeModelConfig",
            "model.RealtimeModelListener",
            "model.RealtimePlaybackState",
            "model.RealtimePlaybackTracker",
            "model_events.RealtimeConnectionStatus",
            "model_events.RealtimeModelAudioDoneEvent",
            "model_events.RealtimeModelAudioEvent",
            "model_events.RealtimeModelAudioInterruptedEvent",
            "model_events.RealtimeModelConnectionStatusEvent",
            "model_events.RealtimeModelErrorEvent",
            "model_events.RealtimeModelEvent",
            "model_events.RealtimeModelExceptionEvent",
            "model_events.RealtimeModelInputAudioTranscriptionCompletedEvent",
            "model_events.RealtimeModelItemDeletedEvent",
            "model_events.RealtimeModelItemUpdatedEvent",
            "model_events.RealtimeModelOtherEvent",
            "model_events.RealtimeModelToolCallEvent",
            "model_events.RealtimeModelTranscriptDeltaEvent",
            "model_events.RealtimeModelTurnEndedEvent",
            "model_events.RealtimeModelTurnStartedEvent",
            "model_inputs.RealtimeModelInputTextContent",
            "model_inputs.RealtimeModelRawClientMessage",
            "model_inputs.RealtimeModelSendAudio",
            "model_inputs.RealtimeModelSendEvent",
            "model_inputs.RealtimeModelSendInterrupt",
            "model_inputs.RealtimeModelSendRawMessage",
            "model_inputs.RealtimeModelSendSessionUpdate",
            "model_inputs.RealtimeModelSendToolOutput",
            "model_inputs.RealtimeModelSendUserInput",
            "model_inputs.RealtimeModelUserInput",
            "model_inputs.RealtimeModelUserInputMessage",
            "openai_realtime.DEFAULT_MODEL_SETTINGS",
            "openai_realtime.OpenAIRealtimeWebSocketModel",
            "openai_realtime.get_api_key",
            "runner.RealtimeRunner",
            "session.RealtimeSession"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/realtime/_util.py": {
        "file_name": "/src/agents/realtime/_util.py",
        "imports": [
            "__future__.annotations",
            "config.RealtimeAudioFormat"
        ],
        "classes": [],
        "functions": {
            "calculate_audio_length_ms": [
                "isinstance",
                "startswith",
                "len"
            ]
        }
    },
    "src/agents/realtime/_default_tracker.py": {
        "file_name": "/src/agents/realtime/_default_tracker.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "datetime.datetime",
            "_util.calculate_audio_length_ms",
            "config.RealtimeAudioFormat"
        ],
        "classes": [
            {
                "class_name": "ModelAudioState",
                "methods": []
            },
            {
                "class_name": "ModelAudioTracker",
                "methods": [
                    "__init__",
                    "set_audio_format",
                    "on_audio_delta",
                    "on_interrupted",
                    "get_state",
                    "get_last_audio_item"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "set_audio_format": [],
            "on_audio_delta": [
                "calculate_audio_length_ms",
                "ModelAudioState",
                "now"
            ],
            "on_interrupted": [],
            "get_state": [
                "get"
            ],
            "get_last_audio_item": []
        }
    },
    "src/agents/realtime/runner.py": {
        "file_name": "/src/agents/realtime/runner.py",
        "imports": [
            "__future__.annotations",
            "run_context.TContext",
            "agent.RealtimeAgent",
            "config.RealtimeRunConfig",
            "model.RealtimeModel",
            "model.RealtimeModelConfig",
            "openai_realtime.OpenAIRealtimeWebSocketModel",
            "session.RealtimeSession"
        ],
        "classes": [
            {
                "class_name": "RealtimeRunner",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "OpenAIRealtimeWebSocketModel"
            ]
        }
    },
    "src/agents/realtime/events.py": {
        "file_name": "/src/agents/realtime/events.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "typing_extensions.TypeAlias",
            "guardrail.OutputGuardrailResult",
            "run_context.RunContextWrapper",
            "tool.Tool",
            "agent.RealtimeAgent",
            "items.RealtimeItem",
            "model_events.RealtimeModelAudioEvent",
            "model_events.RealtimeModelEvent"
        ],
        "classes": [
            {
                "class_name": "RealtimeEventInfo",
                "methods": []
            },
            {
                "class_name": "RealtimeAgentStartEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeAgentEndEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeHandoffEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeToolStart",
                "methods": []
            },
            {
                "class_name": "RealtimeToolEnd",
                "methods": []
            },
            {
                "class_name": "RealtimeRawModelEvent",
                "methods": []
            },
            {
                "class_name": "RealtimeAudioEnd",
                "methods": []
            },
            {
                "class_name": "RealtimeAudio",
                "methods": []
            },
            {
                "class_name": "RealtimeAudioInterrupted",
                "methods": []
            },
            {
                "class_name": "RealtimeError",
                "methods": []
            },
            {
                "class_name": "RealtimeHistoryUpdated",
                "methods": []
            },
            {
                "class_name": "RealtimeHistoryAdded",
                "methods": []
            },
            {
                "class_name": "RealtimeGuardrailTripped",
                "methods": []
            },
            {
                "class_name": "RealtimeInputAudioTimeoutTriggered",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/realtime/config.py": {
        "file_name": "/src/agents/realtime/config.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "openai.types.realtime.realtime_audio_formats.RealtimeAudioFormats",
            "typing_extensions.NotRequired",
            "typing_extensions.TypeAlias",
            "typing_extensions.TypedDict",
            "agents.prompts.Prompt",
            "guardrail.OutputGuardrail",
            "handoffs.Handoff",
            "model_settings.ToolChoice",
            "tool.Tool"
        ],
        "classes": [
            {
                "class_name": "RealtimeClientMessage",
                "methods": []
            },
            {
                "class_name": "RealtimeInputAudioTranscriptionConfig",
                "methods": []
            },
            {
                "class_name": "RealtimeInputAudioNoiseReductionConfig",
                "methods": []
            },
            {
                "class_name": "RealtimeTurnDetectionConfig",
                "methods": []
            },
            {
                "class_name": "RealtimeSessionModelSettings",
                "methods": []
            },
            {
                "class_name": "RealtimeGuardrailsSettings",
                "methods": []
            },
            {
                "class_name": "RealtimeModelTracingConfig",
                "methods": []
            },
            {
                "class_name": "RealtimeRunConfig",
                "methods": []
            },
            {
                "class_name": "RealtimeUserInputText",
                "methods": []
            },
            {
                "class_name": "RealtimeUserInputImage",
                "methods": []
            },
            {
                "class_name": "RealtimeUserInputMessage",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/realtime/audio_formats.py": {
        "file_name": "/src/agents/realtime/audio_formats.py",
        "imports": [
            "__future__.annotations",
            "openai.types.realtime.realtime_audio_formats.AudioPCM",
            "openai.types.realtime.realtime_audio_formats.AudioPCMA",
            "openai.types.realtime.realtime_audio_formats.AudioPCMU",
            "openai.types.realtime.realtime_audio_formats.RealtimeAudioFormats",
            "logger.logger"
        ],
        "classes": [],
        "functions": {
            "to_realtime_audio_format": [
                "isinstance",
                "AudioPCM",
                "AudioPCMU",
                "AudioPCMA",
                "debug"
            ]
        }
    },
    "src/agents/realtime/items.py": {
        "file_name": "/src/agents/realtime/items.py",
        "imports": [
            "__future__.annotations",
            "typing.Annotated",
            "typing.Literal",
            "typing.Union",
            "pydantic.BaseModel",
            "pydantic.ConfigDict",
            "pydantic.Field"
        ],
        "classes": [
            {
                "class_name": "InputText",
                "methods": []
            },
            {
                "class_name": "InputAudio",
                "methods": []
            },
            {
                "class_name": "InputImage",
                "methods": []
            },
            {
                "class_name": "AssistantText",
                "methods": []
            },
            {
                "class_name": "AssistantAudio",
                "methods": []
            },
            {
                "class_name": "SystemMessageItem",
                "methods": []
            },
            {
                "class_name": "UserMessageItem",
                "methods": []
            },
            {
                "class_name": "AssistantMessageItem",
                "methods": []
            },
            {
                "class_name": "RealtimeToolCallItem",
                "methods": []
            },
            {
                "class_name": "RealtimeResponse",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/realtime/agent.py": {
        "file_name": "/src/agents/realtime/agent.py",
        "imports": [
            "__future__.annotations",
            "dataclasses",
            "inspect",
            "collections.abc.Awaitable",
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.Any",
            "typing.Callable",
            "typing.Generic",
            "typing.cast",
            "agents.prompts.Prompt",
            "agent.AgentBase",
            "guardrail.OutputGuardrail",
            "handoffs.Handoff",
            "lifecycle.AgentHooksBase",
            "lifecycle.RunHooksBase",
            "logger.logger",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "util._types.MaybeAwaitable"
        ],
        "classes": [
            {
                "class_name": "RealtimeAgent",
                "methods": [
                    "clone"
                ]
            }
        ],
        "functions": {
            "clone": [
                "replace"
            ]
        }
    },
    "src/agents/realtime/model.py": {
        "file_name": "/src/agents/realtime/model.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "typing.Callable",
            "typing_extensions.NotRequired",
            "typing_extensions.TypedDict",
            "util._types.MaybeAwaitable",
            "_util.calculate_audio_length_ms",
            "config.RealtimeAudioFormat",
            "config.RealtimeSessionModelSettings",
            "model_events.RealtimeModelEvent",
            "model_inputs.RealtimeModelSendEvent"
        ],
        "classes": [
            {
                "class_name": "RealtimePlaybackState",
                "methods": []
            },
            {
                "class_name": "RealtimePlaybackTracker",
                "methods": [
                    "__init__",
                    "on_play_bytes",
                    "on_play_ms",
                    "on_interrupted",
                    "set_audio_format",
                    "get_state"
                ]
            },
            {
                "class_name": "RealtimeModelListener",
                "methods": []
            },
            {
                "class_name": "RealtimeModelConfig",
                "methods": []
            },
            {
                "class_name": "RealtimeModel",
                "methods": [
                    "add_listener",
                    "remove_listener"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "on_play_bytes": [
                "calculate_audio_length_ms",
                "on_play_ms"
            ],
            "on_play_ms": [],
            "on_interrupted": [],
            "set_audio_format": [],
            "get_state": [],
            "add_listener": [],
            "remove_listener": []
        }
    },
    "src/agents/realtime/session.py": {
        "file_name": "/src/agents/realtime/session.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "inspect",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "typing.cast",
            "typing_extensions.assert_never",
            "agent.Agent",
            "exceptions.ModelBehaviorError",
            "exceptions.UserError",
            "handoffs.Handoff",
            "logger.logger",
            "run_context.RunContextWrapper",
            "run_context.TContext",
            "tool.FunctionTool",
            "tool_context.ToolContext",
            "agent.RealtimeAgent",
            "config.RealtimeRunConfig",
            "config.RealtimeSessionModelSettings",
            "config.RealtimeUserInput",
            "events.RealtimeAgentEndEvent",
            "events.RealtimeAgentStartEvent",
            "events.RealtimeAudio",
            "events.RealtimeAudioEnd",
            "events.RealtimeAudioInterrupted",
            "events.RealtimeError",
            "events.RealtimeEventInfo",
            "events.RealtimeGuardrailTripped",
            "events.RealtimeHandoffEvent",
            "events.RealtimeHistoryAdded",
            "events.RealtimeHistoryUpdated",
            "events.RealtimeInputAudioTimeoutTriggered",
            "events.RealtimeRawModelEvent",
            "events.RealtimeSessionEvent",
            "events.RealtimeToolEnd",
            "events.RealtimeToolStart",
            "handoffs.realtime_handoff",
            "items.AssistantAudio",
            "items.AssistantMessageItem",
            "items.AssistantText",
            "items.InputAudio",
            "items.InputImage",
            "items.InputText",
            "items.RealtimeItem",
            "items.UserMessageItem",
            "model.RealtimeModel",
            "model.RealtimeModelConfig",
            "model.RealtimeModelListener",
            "model_events.RealtimeModelEvent",
            "model_events.RealtimeModelInputAudioTranscriptionCompletedEvent",
            "model_events.RealtimeModelToolCallEvent",
            "model_inputs.RealtimeModelSendAudio",
            "model_inputs.RealtimeModelSendInterrupt",
            "model_inputs.RealtimeModelSendSessionUpdate",
            "model_inputs.RealtimeModelSendToolOutput",
            "model_inputs.RealtimeModelSendUserInput"
        ],
        "classes": [
            {
                "class_name": "RealtimeSession",
                "methods": [
                    "__init__",
                    "model",
                    "_get_new_history",
                    "_enqueue_guardrail_task",
                    "_on_guardrail_task_done",
                    "_cleanup_guardrail_tasks"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "RunContextWrapper",
                "RealtimeEventInfo",
                "get",
                "Queue",
                "set"
            ],
            "model": [],
            "_get_new_history": [
                "isinstance",
                "model_copy",
                "append",
                "UserMessageItem",
                "InputText",
                "next",
                "enumerate",
                "copy",
                "len",
                "list",
                "set",
                "_image_url_str",
                "add",
                "getattr",
                "insert"
            ],
            "_image_url_str": [
                "isinstance"
            ],
            "_enqueue_guardrail_task": [
                "create_task",
                "_run_output_guardrails",
                "add",
                "add_done_callback"
            ],
            "_on_guardrail_task_done": [
                "discard",
                "cancelled",
                "exception",
                "create_task",
                "_put_event",
                "RealtimeError",
                "str"
            ],
            "_cleanup_guardrail_tasks": [
                "done",
                "cancel",
                "clear"
            ]
        }
    },
    "src/agents/tracing/traces.py": {
        "file_name": "/src/agents/tracing/traces.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "contextvars",
            "typing.Any",
            "logger.logger",
            ".util",
            "processor_interface.TracingProcessor",
            "scope.Scope"
        ],
        "classes": [
            {
                "class_name": "Trace",
                "methods": [
                    "__enter__",
                    "__exit__",
                    "start",
                    "finish",
                    "trace_id",
                    "name",
                    "export"
                ]
            },
            {
                "class_name": "NoOpTrace",
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "start",
                    "finish",
                    "trace_id",
                    "name",
                    "export"
                ]
            },
            {
                "class_name": "TraceImpl",
                "methods": [
                    "__init__",
                    "trace_id",
                    "name",
                    "start",
                    "finish",
                    "__enter__",
                    "__exit__",
                    "export"
                ]
            }
        ],
        "functions": {
            "__enter__": [
                "error",
                "start"
            ],
            "__exit__": [
                "finish"
            ],
            "start": [
                "set_current_trace",
                "on_trace_start"
            ],
            "finish": [
                "reset_current_trace",
                "on_trace_end"
            ],
            "trace_id": [],
            "name": [],
            "export": [],
            "__init__": [
                "gen_trace_id"
            ]
        }
    },
    "src/agents/tracing/setup.py": {
        "file_name": "/src/agents/tracing/setup.py",
        "imports": [
            "__future__.annotations",
            "typing.TYPE_CHECKING",
            "provider.TraceProvider"
        ],
        "classes": [],
        "functions": {
            "set_trace_provider": [],
            "get_trace_provider": [
                "RuntimeError"
            ]
        }
    },
    "src/agents/tracing/provider.py": {
        "file_name": "/src/agents/tracing/provider.py",
        "imports": [
            "__future__.annotations",
            "os",
            "threading",
            "uuid",
            "abc.ABC",
            "abc.abstractmethod",
            "datetime.datetime",
            "datetime.timezone",
            "typing.Any",
            "logger.logger",
            "processor_interface.TracingProcessor",
            "scope.Scope",
            "spans.NoOpSpan",
            "spans.Span",
            "spans.SpanImpl",
            "spans.TSpanData",
            "traces.NoOpTrace",
            "traces.Trace",
            "traces.TraceImpl"
        ],
        "classes": [
            {
                "class_name": "SynchronousMultiTracingProcessor",
                "methods": [
                    "__init__",
                    "add_tracing_processor",
                    "set_processors",
                    "on_trace_start",
                    "on_trace_end",
                    "on_span_start",
                    "on_span_end",
                    "shutdown",
                    "force_flush"
                ]
            },
            {
                "class_name": "TraceProvider",
                "methods": [
                    "register_processor",
                    "set_processors",
                    "get_current_trace",
                    "get_current_span",
                    "set_disabled",
                    "time_iso",
                    "gen_trace_id",
                    "gen_span_id",
                    "gen_group_id",
                    "create_trace",
                    "create_span",
                    "shutdown"
                ]
            },
            {
                "class_name": "DefaultTraceProvider",
                "methods": [
                    "__init__",
                    "register_processor",
                    "set_processors",
                    "get_current_trace",
                    "get_current_span",
                    "set_disabled",
                    "time_iso",
                    "gen_trace_id",
                    "gen_span_id",
                    "gen_group_id",
                    "create_trace",
                    "create_span",
                    "shutdown"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Lock",
                "SynchronousMultiTracingProcessor",
                "lower",
                "get"
            ],
            "add_tracing_processor": [],
            "set_processors": [
                "tuple",
                "set_processors"
            ],
            "on_trace_start": [
                "on_trace_start",
                "error"
            ],
            "on_trace_end": [
                "on_trace_end",
                "error"
            ],
            "on_span_start": [
                "on_span_start",
                "error"
            ],
            "on_span_end": [
                "on_span_end",
                "error"
            ],
            "shutdown": [
                "debug",
                "shutdown",
                "error"
            ],
            "force_flush": [
                "force_flush",
                "error"
            ],
            "register_processor": [
                "add_tracing_processor"
            ],
            "get_current_trace": [
                "get_current_trace"
            ],
            "get_current_span": [
                "get_current_span"
            ],
            "set_disabled": [],
            "time_iso": [
                "isoformat",
                "now"
            ],
            "gen_trace_id": [
                "uuid4"
            ],
            "gen_span_id": [
                "uuid4"
            ],
            "gen_group_id": [
                "uuid4"
            ],
            "create_trace": [
                "debug",
                "NoOpTrace",
                "gen_trace_id",
                "TraceImpl"
            ],
            "create_span": [
                "debug",
                "NoOpSpan",
                "get_current_span",
                "get_current_trace",
                "error",
                "isinstance",
                "SpanImpl",
                "gen_span_id"
            ]
        }
    },
    "src/agents/tracing/processor_interface.py": {
        "file_name": "/src/agents/tracing/processor_interface.py",
        "imports": [
            "abc",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "spans.Span",
            "traces.Trace"
        ],
        "classes": [
            {
                "class_name": "TracingProcessor",
                "methods": [
                    "on_trace_start",
                    "on_trace_end",
                    "on_span_start",
                    "on_span_end",
                    "shutdown",
                    "force_flush"
                ]
            },
            {
                "class_name": "TracingExporter",
                "methods": [
                    "export"
                ]
            }
        ],
        "functions": {
            "on_trace_start": [],
            "on_trace_end": [],
            "on_span_start": [],
            "on_span_end": [],
            "shutdown": [],
            "force_flush": [],
            "export": []
        }
    },
    "src/agents/tracing/create.py": {
        "file_name": "/src/agents/tracing/create.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.Mapping",
            "collections.abc.Sequence",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "logger.logger",
            "setup.get_trace_provider",
            "span_data.AgentSpanData",
            "span_data.CustomSpanData",
            "span_data.FunctionSpanData",
            "span_data.GenerationSpanData",
            "span_data.GuardrailSpanData",
            "span_data.HandoffSpanData",
            "span_data.MCPListToolsSpanData",
            "span_data.ResponseSpanData",
            "span_data.SpeechGroupSpanData",
            "span_data.SpeechSpanData",
            "span_data.TranscriptionSpanData",
            "spans.Span",
            "traces.Trace",
            "openai.types.responses.Response"
        ],
        "classes": [],
        "functions": {
            "trace": [
                "get_current_trace",
                "get_trace_provider",
                "warning",
                "create_trace"
            ],
            "get_current_trace": [
                "get_current_trace",
                "get_trace_provider"
            ],
            "get_current_span": [
                "get_current_span",
                "get_trace_provider"
            ],
            "agent_span": [
                "create_span",
                "get_trace_provider",
                "AgentSpanData"
            ],
            "function_span": [
                "create_span",
                "get_trace_provider",
                "FunctionSpanData"
            ],
            "generation_span": [
                "create_span",
                "get_trace_provider",
                "GenerationSpanData"
            ],
            "response_span": [
                "create_span",
                "get_trace_provider",
                "ResponseSpanData"
            ],
            "handoff_span": [
                "create_span",
                "get_trace_provider",
                "HandoffSpanData"
            ],
            "custom_span": [
                "create_span",
                "get_trace_provider",
                "CustomSpanData"
            ],
            "guardrail_span": [
                "create_span",
                "get_trace_provider",
                "GuardrailSpanData"
            ],
            "transcription_span": [
                "create_span",
                "get_trace_provider",
                "TranscriptionSpanData"
            ],
            "speech_span": [
                "create_span",
                "get_trace_provider",
                "SpeechSpanData"
            ],
            "speech_group_span": [
                "create_span",
                "get_trace_provider",
                "SpeechGroupSpanData"
            ],
            "mcp_tools_span": [
                "create_span",
                "get_trace_provider",
                "MCPListToolsSpanData"
            ]
        }
    },
    "src/agents/tracing/__init__.py": {
        "file_name": "/src/agents/tracing/__init__.py",
        "imports": [
            "atexit",
            "create.agent_span",
            "create.custom_span",
            "create.function_span",
            "create.generation_span",
            "create.get_current_span",
            "create.get_current_trace",
            "create.guardrail_span",
            "create.handoff_span",
            "create.mcp_tools_span",
            "create.response_span",
            "create.speech_group_span",
            "create.speech_span",
            "create.trace",
            "create.transcription_span",
            "processor_interface.TracingProcessor",
            "processors.default_exporter",
            "processors.default_processor",
            "provider.DefaultTraceProvider",
            "provider.TraceProvider",
            "setup.get_trace_provider",
            "setup.set_trace_provider",
            "span_data.AgentSpanData",
            "span_data.CustomSpanData",
            "span_data.FunctionSpanData",
            "span_data.GenerationSpanData",
            "span_data.GuardrailSpanData",
            "span_data.HandoffSpanData",
            "span_data.MCPListToolsSpanData",
            "span_data.ResponseSpanData",
            "span_data.SpanData",
            "span_data.SpeechGroupSpanData",
            "span_data.SpeechSpanData",
            "span_data.TranscriptionSpanData",
            "spans.Span",
            "spans.SpanError",
            "traces.Trace",
            "util.gen_span_id",
            "util.gen_trace_id"
        ],
        "classes": [],
        "functions": {
            "add_trace_processor": [
                "register_processor",
                "get_trace_provider"
            ],
            "set_trace_processors": [
                "set_processors",
                "get_trace_provider"
            ],
            "set_tracing_disabled": [
                "set_disabled",
                "get_trace_provider"
            ],
            "set_tracing_export_api_key": [
                "set_api_key",
                "default_exporter"
            ]
        }
    },
    "src/agents/tracing/span_data.py": {
        "file_name": "/src/agents/tracing/span_data.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "collections.abc.Mapping",
            "collections.abc.Sequence",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseInputItemParam"
        ],
        "classes": [
            {
                "class_name": "SpanData",
                "methods": [
                    "export",
                    "type"
                ]
            },
            {
                "class_name": "AgentSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "FunctionSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "GenerationSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "ResponseSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "HandoffSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "CustomSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "GuardrailSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "TranscriptionSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "SpeechSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "SpeechGroupSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            },
            {
                "class_name": "MCPListToolsSpanData",
                "methods": [
                    "__init__",
                    "type",
                    "export"
                ]
            }
        ],
        "functions": {
            "export": [
                "str"
            ],
            "type": [],
            "__init__": []
        }
    },
    "src/agents/tracing/processors.py": {
        "file_name": "/src/agents/tracing/processors.py",
        "imports": [
            "__future__.annotations",
            "os",
            "queue",
            "random",
            "threading",
            "time",
            "functools.cached_property",
            "typing.Any",
            "httpx",
            "logger.logger",
            "processor_interface.TracingExporter",
            "processor_interface.TracingProcessor",
            "spans.Span",
            "traces.Trace"
        ],
        "classes": [
            {
                "class_name": "ConsoleSpanExporter",
                "methods": [
                    "export"
                ]
            },
            {
                "class_name": "BackendSpanExporter",
                "methods": [
                    "__init__",
                    "set_api_key",
                    "api_key",
                    "organization",
                    "project",
                    "export",
                    "close"
                ]
            },
            {
                "class_name": "BatchTraceProcessor",
                "methods": [
                    "__init__",
                    "_ensure_thread_started",
                    "on_trace_start",
                    "on_trace_end",
                    "on_span_start",
                    "on_span_end",
                    "shutdown",
                    "force_flush",
                    "_run",
                    "_export_batches"
                ]
            }
        ],
        "functions": {
            "export": [
                "isinstance",
                "print",
                "export",
                "warning",
                "post",
                "debug",
                "len",
                "error",
                "uniform",
                "sleep",
                "min"
            ],
            "__init__": [
                "Client",
                "Timeout",
                "Queue",
                "Event",
                "max",
                "int",
                "time",
                "Lock"
            ],
            "set_api_key": [],
            "api_key": [
                "get"
            ],
            "organization": [
                "get"
            ],
            "project": [
                "get"
            ],
            "close": [
                "close"
            ],
            "_ensure_thread_started": [
                "is_alive",
                "Thread",
                "start"
            ],
            "on_trace_start": [
                "_ensure_thread_started",
                "put_nowait",
                "warning"
            ],
            "on_trace_end": [],
            "on_span_start": [],
            "on_span_end": [
                "_ensure_thread_started",
                "put_nowait",
                "warning"
            ],
            "shutdown": [
                "set",
                "is_alive",
                "join",
                "_export_batches"
            ],
            "force_flush": [
                "_export_batches"
            ],
            "_run": [
                "is_set",
                "time",
                "qsize",
                "_export_batches",
                "sleep"
            ],
            "_export_batches": [
                "empty",
                "len",
                "append",
                "get_nowait",
                "export"
            ],
            "default_exporter": [],
            "default_processor": []
        }
    },
    "src/agents/tracing/spans.py": {
        "file_name": "/src/agents/tracing/spans.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "contextvars",
            "typing.Any",
            "typing.Generic",
            "typing.TypeVar",
            "typing_extensions.TypedDict",
            "logger.logger",
            ".util",
            "processor_interface.TracingProcessor",
            "scope.Scope",
            "span_data.SpanData"
        ],
        "classes": [
            {
                "class_name": "SpanError",
                "methods": []
            },
            {
                "class_name": "Span",
                "methods": [
                    "trace_id",
                    "span_id",
                    "span_data",
                    "start",
                    "finish",
                    "__enter__",
                    "__exit__",
                    "parent_id",
                    "set_error",
                    "error",
                    "export",
                    "started_at",
                    "ended_at"
                ]
            },
            {
                "class_name": "NoOpSpan",
                "methods": [
                    "__init__",
                    "trace_id",
                    "span_id",
                    "span_data",
                    "parent_id",
                    "start",
                    "finish",
                    "__enter__",
                    "__exit__",
                    "set_error",
                    "error",
                    "export",
                    "started_at",
                    "ended_at"
                ]
            },
            {
                "class_name": "SpanImpl",
                "methods": [
                    "__init__",
                    "trace_id",
                    "span_id",
                    "span_data",
                    "parent_id",
                    "start",
                    "finish",
                    "__enter__",
                    "__exit__",
                    "set_error",
                    "error",
                    "started_at",
                    "ended_at",
                    "export"
                ]
            }
        ],
        "functions": {
            "trace_id": [],
            "span_id": [],
            "span_data": [],
            "start": [
                "set_current_span",
                "warning",
                "time_iso",
                "on_span_start"
            ],
            "finish": [
                "reset_current_span",
                "warning",
                "time_iso",
                "on_span_end"
            ],
            "__enter__": [
                "start"
            ],
            "__exit__": [
                "debug",
                "finish"
            ],
            "parent_id": [],
            "set_error": [],
            "error": [],
            "export": [
                "export"
            ],
            "started_at": [],
            "ended_at": [],
            "__init__": [
                "gen_span_id"
            ]
        }
    },
    "src/agents/tracing/scope.py": {
        "file_name": "/src/agents/tracing/scope.py",
        "imports": [
            "contextvars",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "logger.logger",
            "spans.Span",
            "traces.Trace"
        ],
        "classes": [
            {
                "class_name": "Scope",
                "methods": [
                    "get_current_span",
                    "set_current_span",
                    "reset_current_span",
                    "get_current_trace",
                    "set_current_trace",
                    "reset_current_trace"
                ]
            }
        ],
        "functions": {
            "get_current_span": [
                "get"
            ],
            "set_current_span": [
                "set"
            ],
            "reset_current_span": [
                "reset"
            ],
            "get_current_trace": [
                "get"
            ],
            "set_current_trace": [
                "debug",
                "set"
            ],
            "reset_current_trace": [
                "debug",
                "reset"
            ]
        }
    },
    "src/agents/tracing/logger.py": {
        "file_name": "/src/agents/tracing/logger.py",
        "imports": [
            "logging"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/tracing/util.py": {
        "file_name": "/src/agents/tracing/util.py",
        "imports": [
            "setup.get_trace_provider"
        ],
        "classes": [],
        "functions": {
            "time_iso": [
                "time_iso",
                "get_trace_provider"
            ],
            "gen_trace_id": [
                "gen_trace_id",
                "get_trace_provider"
            ],
            "gen_span_id": [
                "gen_span_id",
                "get_trace_provider"
            ],
            "gen_group_id": [
                "gen_group_id",
                "get_trace_provider"
            ]
        }
    },
    "src/agents/mcp/__init__.py": {
        "file_name": "/src/agents/mcp/__init__.py",
        "imports": [
            "server.MCPServer",
            "server.MCPServerSse",
            "server.MCPServerSseParams",
            "server.MCPServerStdio",
            "server.MCPServerStdioParams",
            "server.MCPServerStreamableHttp",
            "server.MCPServerStreamableHttpParams",
            "util.MCPUtil",
            "util.ToolFilter",
            "util.ToolFilterCallable",
            "util.ToolFilterContext",
            "util.ToolFilterStatic",
            "util.create_static_tool_filter"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/mcp/server.py": {
        "file_name": "/src/agents/mcp/server.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "asyncio",
            "inspect",
            "collections.abc.Awaitable",
            "contextlib.AbstractAsyncContextManager",
            "contextlib.AsyncExitStack",
            "datetime.timedelta",
            "pathlib.Path",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.Literal",
            "typing.TypeVar",
            "anyio.streams.memory.MemoryObjectReceiveStream",
            "anyio.streams.memory.MemoryObjectSendStream",
            "mcp.ClientSession",
            "mcp.StdioServerParameters",
            "mcp.Tool",
            "mcp.stdio_client",
            "mcp.client.session.MessageHandlerFnT",
            "mcp.client.sse.sse_client",
            "mcp.client.streamable_http.GetSessionIdCallback",
            "mcp.client.streamable_http.streamablehttp_client",
            "mcp.shared.message.SessionMessage",
            "mcp.types.CallToolResult",
            "mcp.types.GetPromptResult",
            "mcp.types.InitializeResult",
            "mcp.types.ListPromptsResult",
            "typing_extensions.NotRequired",
            "typing_extensions.TypedDict",
            "exceptions.UserError",
            "logger.logger",
            "run_context.RunContextWrapper",
            "util.HttpClientFactory",
            "util.ToolFilter",
            "util.ToolFilterContext",
            "util.ToolFilterStatic",
            "agent.AgentBase"
        ],
        "classes": [
            {
                "class_name": "MCPServer",
                "methods": [
                    "__init__",
                    "name"
                ]
            },
            {
                "class_name": "_MCPServerWithClientSession",
                "methods": [
                    "__init__",
                    "_apply_static_tool_filter",
                    "create_streams",
                    "invalidate_tools_cache"
                ]
            },
            {
                "class_name": "MCPServerStdioParams",
                "methods": []
            },
            {
                "class_name": "MCPServerStdio",
                "methods": [
                    "__init__",
                    "create_streams",
                    "name"
                ]
            },
            {
                "class_name": "MCPServerSseParams",
                "methods": []
            },
            {
                "class_name": "MCPServerSse",
                "methods": [
                    "__init__",
                    "create_streams",
                    "name"
                ]
            },
            {
                "class_name": "MCPServerStreamableHttpParams",
                "methods": []
            },
            {
                "class_name": "MCPServerStreamableHttp",
                "methods": [
                    "__init__",
                    "create_streams",
                    "name"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "AsyncExitStack",
                "Lock",
                "StdioServerParameters",
                "get"
            ],
            "name": [],
            "_apply_static_tool_filter": [],
            "create_streams": [
                "stdio_client",
                "sse_client",
                "get",
                "streamablehttp_client"
            ],
            "invalidate_tools_cache": []
        }
    },
    "src/agents/mcp/util.py": {
        "file_name": "/src/agents/mcp/util.py",
        "imports": [
            "functools",
            "json",
            "dataclasses.dataclass",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Callable",
            "typing.Optional",
            "typing.Protocol",
            "typing.Union",
            "httpx",
            "typing_extensions.NotRequired",
            "typing_extensions.TypedDict",
            "._debug",
            "exceptions.AgentsException",
            "exceptions.ModelBehaviorError",
            "exceptions.UserError",
            "logger.logger",
            "run_context.RunContextWrapper",
            "strict_schema.ensure_strict_json_schema",
            "tool.FunctionTool",
            "tool.Tool",
            "tracing.FunctionSpanData",
            "tracing.get_current_span",
            "tracing.mcp_tools_span",
            "util._types.MaybeAwaitable",
            "mcp.types.Tool",
            "agent.AgentBase",
            "server.MCPServer"
        ],
        "classes": [
            {
                "class_name": "HttpClientFactory",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "ToolFilterContext",
                "methods": []
            },
            {
                "class_name": "ToolFilterStatic",
                "methods": []
            },
            {
                "class_name": "MCPUtil",
                "methods": [
                    "to_function_tool"
                ]
            }
        ],
        "functions": {
            "__call__": [],
            "create_static_tool_filter": [],
            "to_function_tool": [
                "partial",
                "ensure_strict_json_schema",
                "info",
                "FunctionTool"
            ]
        }
    },
    "src/agents/util/_json.py": {
        "file_name": "/src/agents/util/_json.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.Iterable",
            "typing.Any",
            "typing.Literal",
            "pydantic.TypeAdapter",
            "pydantic.ValidationError",
            "typing_extensions.TypeVar",
            "exceptions.ModelBehaviorError",
            "tracing.SpanError",
            "_error_tracing.attach_error_to_current_span"
        ],
        "classes": [],
        "functions": {
            "validate_json": [
                "validate_json",
                "attach_error_to_current_span",
                "SpanError",
                "ModelBehaviorError"
            ],
            "_to_dump_compatible": [
                "_to_dump_compatible_internal"
            ],
            "_to_dump_compatible_internal": [
                "isinstance",
                "_to_dump_compatible_internal",
                "items"
            ]
        }
    },
    "src/agents/util/_types.py": {
        "file_name": "/src/agents/util/_types.py",
        "imports": [
            "collections.abc.Awaitable",
            "typing.Union",
            "typing_extensions.TypeVar"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/util/_pretty_print.py": {
        "file_name": "/src/agents/util/_pretty_print.py",
        "imports": [
            "typing.TYPE_CHECKING",
            "pydantic.BaseModel",
            "exceptions.RunErrorDetails",
            "result.RunResult",
            "result.RunResultBase",
            "result.RunResultStreaming"
        ],
        "classes": [],
        "functions": {
            "_indent": [
                "join",
                "splitlines"
            ],
            "_final_output_str": [
                "isinstance",
                "model_dump_json",
                "str"
            ],
            "pretty_print_result": [
                "type",
                "_indent",
                "_final_output_str",
                "len"
            ],
            "pretty_print_run_error_details": [
                "len"
            ],
            "pretty_print_run_result_streaming": [
                "type",
                "_indent",
                "_final_output_str",
                "len"
            ]
        }
    },
    "src/agents/util/__init__.py": {
        "file_name": "/src/agents/util/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "src/agents/util/_error_tracing.py": {
        "file_name": "/src/agents/util/_error_tracing.py",
        "imports": [
            "typing.Any",
            "logger.logger",
            "tracing.Span",
            "tracing.SpanError",
            "tracing.get_current_span"
        ],
        "classes": [],
        "functions": {
            "attach_error_to_span": [
                "set_error"
            ],
            "attach_error_to_current_span": [
                "get_current_span",
                "attach_error_to_span",
                "warning"
            ]
        }
    },
    "src/agents/util/_coro.py": {
        "file_name": "/src/agents/util/_coro.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "src/agents/util/_transforms.py": {
        "file_name": "/src/agents/util/_transforms.py",
        "imports": [
            "re",
            "logger.logger"
        ],
        "classes": [],
        "functions": {
            "transform_string_function_style": [
                "replace",
                "sub",
                "lower",
                "warning"
            ]
        }
    },
    "src/agents/voice/pipeline_config.py": {
        "file_name": "/src/agents/voice/pipeline_config.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "dataclasses.field",
            "typing.Any",
            "tracing.util.gen_group_id",
            "model.STTModelSettings",
            "model.TTSModelSettings",
            "model.VoiceModelProvider",
            "models.openai_model_provider.OpenAIVoiceModelProvider"
        ],
        "classes": [
            {
                "class_name": "VoicePipelineConfig",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/voice/utils.py": {
        "file_name": "/src/agents/voice/utils.py",
        "imports": [
            "re",
            "typing.Callable"
        ],
        "classes": [],
        "functions": {
            "get_sentence_based_splitter": [],
            "sentence_based_text_splitter": [
                "split",
                "strip",
                "len",
                "join"
            ]
        }
    },
    "src/agents/voice/workflow.py": {
        "file_name": "/src/agents/voice/workflow.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "agent.Agent",
            "items.TResponseInputItem",
            "result.RunResultStreaming",
            "run.Runner"
        ],
        "classes": [
            {
                "class_name": "VoiceWorkflowBase",
                "methods": [
                    "run"
                ]
            },
            {
                "class_name": "VoiceWorkflowHelper",
                "methods": []
            },
            {
                "class_name": "SingleAgentWorkflowCallbacks",
                "methods": [
                    "on_run"
                ]
            },
            {
                "class_name": "SingleAgentVoiceWorkflow",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "run": [],
            "on_run": [],
            "__init__": []
        }
    },
    "src/agents/voice/__init__.py": {
        "file_name": "/src/agents/voice/__init__.py",
        "imports": [
            "events.VoiceStreamEvent",
            "events.VoiceStreamEventAudio",
            "events.VoiceStreamEventLifecycle",
            "exceptions.STTWebsocketConnectionError",
            "input.AudioInput",
            "input.StreamedAudioInput",
            "model.StreamedTranscriptionSession",
            "model.STTModel",
            "model.STTModelSettings",
            "model.TTSModel",
            "model.TTSModelSettings",
            "model.TTSVoice",
            "model.VoiceModelProvider",
            "models.openai_model_provider.OpenAIVoiceModelProvider",
            "models.openai_stt.OpenAISTTModel",
            "models.openai_stt.OpenAISTTTranscriptionSession",
            "models.openai_tts.OpenAITTSModel",
            "pipeline.VoicePipeline",
            "pipeline_config.VoicePipelineConfig",
            "result.StreamedAudioResult",
            "utils.get_sentence_based_splitter",
            "workflow.SingleAgentVoiceWorkflow",
            "workflow.SingleAgentWorkflowCallbacks",
            "workflow.VoiceWorkflowBase",
            "workflow.VoiceWorkflowHelper"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/voice/result.py": {
        "file_name": "/src/agents/voice/result.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "base64",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "exceptions.UserError",
            "logger.logger",
            "tracing.Span",
            "tracing.SpeechGroupSpanData",
            "tracing.speech_group_span",
            "tracing.speech_span",
            "tracing.util.time_iso",
            "events.VoiceStreamEvent",
            "events.VoiceStreamEventAudio",
            "events.VoiceStreamEventError",
            "events.VoiceStreamEventLifecycle",
            "imports.np",
            "imports.npt",
            "model.TTSModel",
            "model.TTSModelSettings",
            "pipeline_config.VoicePipelineConfig"
        ],
        "classes": [
            {
                "class_name": "StreamedAudioResult",
                "methods": [
                    "__init__",
                    "_set_task",
                    "_transform_audio_buffer",
                    "_finish_turn",
                    "_cleanup_tasks",
                    "_check_errors"
                ]
            }
        ],
        "functions": {
            "_audio_to_base64": [
                "join",
                "decode",
                "b64encode"
            ],
            "__init__": [
                "Queue"
            ],
            "_set_task": [],
            "_transform_audio_buffer": [
                "frombuffer",
                "join",
                "reshape",
                "astype",
                "UserError"
            ],
            "_finish_turn": [
                "finish"
            ],
            "_cleanup_tasks": [
                "_finish_turn",
                "done",
                "cancel"
            ],
            "_check_errors": [
                "done",
                "exception"
            ]
        }
    },
    "src/agents/voice/pipeline.py": {
        "file_name": "/src/agents/voice/pipeline.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "_run_impl.TraceCtxManager",
            "exceptions.UserError",
            "logger.logger",
            "input.AudioInput",
            "input.StreamedAudioInput",
            "model.STTModel",
            "model.TTSModel",
            "pipeline_config.VoicePipelineConfig",
            "result.StreamedAudioResult",
            "workflow.VoiceWorkflowBase"
        ],
        "classes": [
            {
                "class_name": "VoicePipeline",
                "methods": [
                    "__init__",
                    "_get_tts_model",
                    "_get_stt_model"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "isinstance",
                "VoicePipelineConfig"
            ],
            "_get_tts_model": [
                "get_tts_model"
            ],
            "_get_stt_model": [
                "get_stt_model"
            ]
        }
    },
    "src/agents/voice/exceptions.py": {
        "file_name": "/src/agents/voice/exceptions.py",
        "imports": [
            "exceptions.AgentsException"
        ],
        "classes": [
            {
                "class_name": "STTWebsocketConnectionError",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": []
        }
    },
    "src/agents/voice/input.py": {
        "file_name": "/src/agents/voice/input.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "base64",
            "io",
            "wave",
            "dataclasses.dataclass",
            "exceptions.UserError",
            "imports.np",
            "imports.npt"
        ],
        "classes": [
            {
                "class_name": "AudioInput",
                "methods": [
                    "to_audio_file",
                    "to_base64"
                ]
            },
            {
                "class_name": "StreamedAudioInput",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "_buffer_to_audio_file": [
                "clip",
                "astype",
                "UserError",
                "BytesIO",
                "open",
                "setnchannels",
                "setsampwidth",
                "setframerate",
                "writeframes",
                "tobytes",
                "seek"
            ],
            "to_audio_file": [
                "_buffer_to_audio_file"
            ],
            "to_base64": [
                "clip",
                "astype",
                "UserError",
                "decode",
                "b64encode",
                "tobytes"
            ],
            "__init__": [
                "Queue"
            ]
        }
    },
    "src/agents/voice/events.py": {
        "file_name": "/src/agents/voice/events.py",
        "imports": [
            "__future__.annotations",
            "dataclasses.dataclass",
            "typing.Literal",
            "typing.Union",
            "typing_extensions.TypeAlias",
            "imports.np",
            "imports.npt"
        ],
        "classes": [
            {
                "class_name": "VoiceStreamEventAudio",
                "methods": []
            },
            {
                "class_name": "VoiceStreamEventLifecycle",
                "methods": []
            },
            {
                "class_name": "VoiceStreamEventError",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/voice/imports.py": {
        "file_name": "/src/agents/voice/imports.py",
        "imports": [
            "numpy",
            "numpy.typing",
            "websockets"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/voice/model.py": {
        "file_name": "/src/agents/voice/model.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "collections.abc.AsyncIterator",
            "dataclasses.dataclass",
            "typing.Any",
            "typing.Callable",
            "typing.Literal",
            "imports.np",
            "imports.npt",
            "input.AudioInput",
            "input.StreamedAudioInput",
            "utils.get_sentence_based_splitter"
        ],
        "classes": [
            {
                "class_name": "TTSModelSettings",
                "methods": []
            },
            {
                "class_name": "TTSModel",
                "methods": [
                    "model_name",
                    "run"
                ]
            },
            {
                "class_name": "StreamedTranscriptionSession",
                "methods": [
                    "transcribe_turns"
                ]
            },
            {
                "class_name": "STTModelSettings",
                "methods": []
            },
            {
                "class_name": "STTModel",
                "methods": [
                    "model_name"
                ]
            },
            {
                "class_name": "VoiceModelProvider",
                "methods": [
                    "get_stt_model",
                    "get_tts_model"
                ]
            }
        ],
        "functions": {
            "model_name": [],
            "run": [],
            "transcribe_turns": [],
            "get_stt_model": [],
            "get_tts_model": []
        }
    },
    "src/agents/voice/models/openai_model_provider.py": {
        "file_name": "/src/agents/voice/models/openai_model_provider.py",
        "imports": [
            "__future__.annotations",
            "httpx",
            "openai.AsyncOpenAI",
            "openai.DefaultAsyncHttpxClient",
            "models._openai_shared",
            "model.STTModel",
            "model.TTSModel",
            "model.VoiceModelProvider",
            "openai_stt.OpenAISTTModel",
            "openai_tts.OpenAITTSModel"
        ],
        "classes": [
            {
                "class_name": "OpenAIVoiceModelProvider",
                "methods": [
                    "__init__",
                    "_get_client",
                    "get_stt_model",
                    "get_tts_model"
                ]
            }
        ],
        "functions": {
            "shared_http_client": [
                "DefaultAsyncHttpxClient"
            ],
            "__init__": [],
            "_get_client": [
                "get_default_openai_client",
                "AsyncOpenAI",
                "get_default_openai_key",
                "shared_http_client"
            ],
            "get_stt_model": [
                "OpenAISTTModel",
                "_get_client"
            ],
            "get_tts_model": [
                "OpenAITTSModel",
                "_get_client"
            ]
        }
    },
    "src/agents/voice/models/openai_stt.py": {
        "file_name": "/src/agents/voice/models/openai_stt.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "base64",
            "json",
            "time",
            "collections.abc.AsyncIterator",
            "dataclasses.dataclass",
            "typing.Any",
            "typing.cast",
            "openai.AsyncOpenAI",
            "._debug",
            "exceptions.AgentsException",
            "logger.logger",
            "tracing.Span",
            "tracing.SpanError",
            "tracing.TranscriptionSpanData",
            "tracing.transcription_span",
            "exceptions.STTWebsocketConnectionError",
            "imports.np",
            "imports.npt",
            "imports.websockets",
            "input.AudioInput",
            "input.StreamedAudioInput",
            "model.StreamedTranscriptionSession",
            "model.STTModel",
            "model.STTModelSettings"
        ],
        "classes": [
            {
                "class_name": "ErrorSentinel",
                "methods": []
            },
            {
                "class_name": "SessionCompleteSentinel",
                "methods": []
            },
            {
                "class_name": "WebsocketDoneSentinel",
                "methods": []
            },
            {
                "class_name": "OpenAISTTTranscriptionSession",
                "methods": [
                    "__init__",
                    "_start_turn",
                    "_end_turn",
                    "_check_errors",
                    "_cleanup_tasks"
                ]
            },
            {
                "class_name": "OpenAISTTModel",
                "methods": [
                    "__init__",
                    "model_name",
                    "_non_null_or_not_given"
                ]
            }
        ],
        "functions": {
            "_audio_to_base64": [
                "concatenate",
                "clip",
                "astype",
                "tobytes",
                "decode",
                "b64encode"
            ],
            "__init__": [
                "Queue"
            ],
            "_start_turn": [
                "transcription_span",
                "start"
            ],
            "_end_turn": [
                "len",
                "_audio_to_base64",
                "finish"
            ],
            "_check_errors": [
                "done",
                "exception",
                "isinstance"
            ],
            "_cleanup_tasks": [
                "done",
                "cancel"
            ],
            "model_name": [],
            "_non_null_or_not_given": []
        }
    },
    "src/agents/voice/models/__init__.py": {
        "file_name": "/src/agents/voice/models/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "src/agents/voice/models/openai_tts.py": {
        "file_name": "/src/agents/voice/models/openai_tts.py",
        "imports": [
            "collections.abc.AsyncIterator",
            "typing.Literal",
            "openai.AsyncOpenAI",
            "model.TTSModel",
            "model.TTSModelSettings"
        ],
        "classes": [
            {
                "class_name": "OpenAITTSModel",
                "methods": [
                    "__init__",
                    "model_name"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "model_name": []
        }
    },
    "src/agents/extensions/visualization.py": {
        "file_name": "/src/agents/extensions/visualization.py",
        "imports": [
            "__future__.annotations",
            "graphviz",
            "agents.Agent",
            "agents.handoffs.Handoff",
            "agents.tool.Tool"
        ],
        "classes": [],
        "functions": {
            "get_main_graph": [
                "append",
                "get_all_nodes",
                "get_all_edges",
                "join"
            ],
            "get_all_nodes": [
                "set",
                "add",
                "append",
                "isinstance",
                "get_all_nodes",
                "join"
            ],
            "get_all_edges": [
                "set",
                "add",
                "append",
                "isinstance",
                "get_all_edges",
                "join"
            ],
            "draw_graph": [
                "get_main_graph",
                "Source",
                "render"
            ]
        }
    },
    "src/agents/extensions/__init__.py": {
        "file_name": "/src/agents/extensions/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "src/agents/extensions/handoff_prompt.py": {
        "file_name": "/src/agents/extensions/handoff_prompt.py",
        "imports": [],
        "classes": [],
        "functions": {
            "prompt_with_handoff_instructions": []
        }
    },
    "src/agents/extensions/handoff_filters.py": {
        "file_name": "/src/agents/extensions/handoff_filters.py",
        "imports": [
            "__future__.annotations",
            "handoffs.HandoffInputData",
            "items.HandoffCallItem",
            "items.HandoffOutputItem",
            "items.ReasoningItem",
            "items.RunItem",
            "items.ToolCallItem",
            "items.ToolCallOutputItem",
            "items.TResponseInputItem"
        ],
        "classes": [],
        "functions": {
            "remove_all_tools": [
                "isinstance",
                "_remove_tool_types_from_input",
                "_remove_tools_from_items",
                "HandoffInputData"
            ],
            "_remove_tools_from_items": [
                "isinstance",
                "append",
                "tuple"
            ],
            "_remove_tool_types_from_input": [
                "get",
                "append",
                "tuple"
            ]
        }
    },
    "src/agents/extensions/memory/advanced_sqlite_session.py": {
        "file_name": "/src/agents/extensions/memory/advanced_sqlite_session.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "logging",
            "threading",
            "contextlib.closing",
            "pathlib.Path",
            "typing.Any",
            "typing.Union",
            "typing.cast",
            "agents.result.RunResult",
            "agents.usage.Usage",
            "items.TResponseInputItem",
            "memory.SQLiteSession",
            "time"
        ],
        "classes": [
            {
                "class_name": "AdvancedSQLiteSession",
                "methods": [
                    "__init__",
                    "_init_structure_tables",
                    "_get_next_turn_number",
                    "_get_next_branch_turn_number",
                    "_get_current_turn_number",
                    "_classify_message_type",
                    "_extract_tool_name",
                    "_is_user_message"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "_init_structure_tables",
                "getLogger"
            ],
            "_init_structure_tables": [
                "_get_connection",
                "execute",
                "commit"
            ],
            "_get_all_items_sync": [
                "_get_connection",
                "Lock",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "list",
                "reversed",
                "loads",
                "append"
            ],
            "_get_items_sync": [
                "_get_connection",
                "Lock",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "list",
                "reversed",
                "loads",
                "append"
            ],
            "_get_next_turn_number": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchone"
            ],
            "_get_next_branch_turn_number": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchone"
            ],
            "_get_current_turn_number": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchone"
            ],
            "_add_structure_sync": [
                "_get_connection",
                "Lock",
                "closing",
                "cursor",
                "execute",
                "len",
                "fetchall",
                "reverse",
                "fetchone",
                "enumerate",
                "zip",
                "_classify_message_type",
                "_extract_tool_name",
                "_is_user_message",
                "append",
                "executemany",
                "commit"
            ],
            "_cleanup_sync": [
                "_get_connection",
                "Lock",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "join",
                "len",
                "commit",
                "info"
            ],
            "_classify_message_type": [
                "isinstance",
                "get",
                "str"
            ],
            "_extract_tool_name": [
                "isinstance",
                "get",
                "str"
            ],
            "_is_user_message": [
                "isinstance",
                "get"
            ],
            "_validate_turn": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchone",
                "ValueError",
                "get",
                "loads",
                "len"
            ],
            "_validate_branch": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchone",
                "ValueError"
            ],
            "_delete_sync": [
                "_get_connection",
                "Lock",
                "closing",
                "cursor",
                "execute",
                "fetchone",
                "ValueError",
                "commit"
            ],
            "_list_branches_sync": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "append"
            ],
            "_copy_sync": [
                "_get_connection",
                "Lock",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "fetchone",
                "enumerate",
                "append",
                "executemany",
                "commit"
            ],
            "_get_turns_sync": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "get",
                "loads",
                "append",
                "len"
            ],
            "_search_sync": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "get",
                "loads",
                "append"
            ],
            "_get_conversation_sync": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchall",
                "append"
            ],
            "_get_tool_usage_sync": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchall"
            ],
            "_get_usage_sync": [
                "_get_connection",
                "Lock",
                "closing",
                "cursor",
                "execute",
                "fetchone"
            ],
            "_get_turn_usage_sync": [
                "_get_connection",
                "closing",
                "cursor",
                "execute",
                "fetchone",
                "loads",
                "fetchall",
                "append"
            ],
            "_update_sync": [
                "_get_connection",
                "Lock",
                "hasattr",
                "dumps",
                "warning",
                "closing",
                "cursor",
                "execute",
                "commit"
            ]
        }
    },
    "src/agents/extensions/memory/redis_session.py": {
        "file_name": "/src/agents/extensions/memory/redis_session.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "time",
            "typing.Any",
            "urllib.parse.urlparse",
            "redis.asyncio",
            "redis.asyncio.Redis",
            "items.TResponseInputItem",
            "memory.session.SessionABC"
        ],
        "classes": [
            {
                "class_name": "RedisSession",
                "methods": [
                    "__init__",
                    "from_url"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Lock"
            ],
            "from_url": [
                "urlparse",
                "setdefault",
                "from_url",
                "cls"
            ]
        }
    },
    "src/agents/extensions/memory/encrypt_session.py": {
        "file_name": "/src/agents/extensions/memory/encrypt_session.py",
        "imports": [
            "__future__.annotations",
            "base64",
            "json",
            "typing.Any",
            "typing.cast",
            "cryptography.fernet.Fernet",
            "cryptography.fernet.InvalidToken",
            "cryptography.hazmat.primitives.hashes",
            "cryptography.hazmat.primitives.kdf.hkdf.HKDF",
            "typing_extensions.Literal",
            "typing_extensions.TypedDict",
            "typing_extensions.TypeGuard",
            "items.TResponseInputItem",
            "memory.session.SessionABC"
        ],
        "classes": [
            {
                "class_name": "EncryptedEnvelope",
                "methods": []
            },
            {
                "class_name": "EncryptedSession",
                "methods": [
                    "__init__",
                    "__getattr__",
                    "_wrap",
                    "_unwrap"
                ]
            }
        ],
        "functions": {
            "_ensure_fernet_key_bytes": [
                "ValueError",
                "urlsafe_b64decode",
                "len",
                "encode"
            ],
            "_derive_session_fernet_key": [
                "HKDF",
                "SHA256",
                "encode",
                "derive",
                "Fernet",
                "urlsafe_b64encode"
            ],
            "_to_json_bytes": [
                "encode",
                "dumps"
            ],
            "_from_json_bytes": [
                "loads",
                "decode"
            ],
            "_is_encrypted_envelope": [
                "isinstance",
                "get"
            ],
            "__init__": [
                "_ensure_fernet_key_bytes",
                "_derive_session_fernet_key"
            ],
            "__getattr__": [
                "getattr"
            ],
            "_wrap": [
                "isinstance",
                "hasattr",
                "model_dump",
                "dict",
                "decode",
                "encrypt",
                "_to_json_bytes"
            ],
            "_unwrap": [
                "_is_encrypted_envelope",
                "cast",
                "encode",
                "decrypt",
                "_from_json_bytes"
            ]
        }
    },
    "src/agents/extensions/memory/__init__.py": {
        "file_name": "/src/agents/extensions/memory/__init__.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "encrypt_session.EncryptedSession",
            "redis_session.RedisSession",
            "sqlalchemy_session.SQLAlchemySession",
            "advanced_sqlite_session.AdvancedSQLiteSession"
        ],
        "classes": [],
        "functions": {
            "__getattr__": [
                "ImportError",
                "AttributeError"
            ]
        }
    },
    "src/agents/extensions/memory/sqlalchemy_session.py": {
        "file_name": "/src/agents/extensions/memory/sqlalchemy_session.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "typing.Any",
            "sqlalchemy.TIMESTAMP",
            "sqlalchemy.Column",
            "sqlalchemy.ForeignKey",
            "sqlalchemy.Index",
            "sqlalchemy.Integer",
            "sqlalchemy.MetaData",
            "sqlalchemy.String",
            "sqlalchemy.Table",
            "sqlalchemy.Text",
            "sqlalchemy.delete",
            "sqlalchemy.insert",
            "sqlalchemy.select",
            "sqlalchemy.text",
            "sqlalchemy.update",
            "sqlalchemy.ext.asyncio.AsyncEngine",
            "sqlalchemy.ext.asyncio.async_sessionmaker",
            "sqlalchemy.ext.asyncio.create_async_engine",
            "items.TResponseInputItem",
            "memory.session.SessionABC"
        ],
        "classes": [
            {
                "class_name": "SQLAlchemySession",
                "methods": [
                    "__init__",
                    "from_url"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Lock",
                "MetaData",
                "Table",
                "Column",
                "TIMESTAMP",
                "sql_text",
                "ForeignKey",
                "Index",
                "async_sessionmaker"
            ],
            "from_url": [
                "create_async_engine",
                "cls"
            ]
        }
    },
    "src/agents/extensions/models/litellm_provider.py": {
        "file_name": "/src/agents/extensions/models/litellm_provider.py",
        "imports": [
            "models.default_models.get_default_model",
            "models.interface.Model",
            "models.interface.ModelProvider",
            "litellm_model.LitellmModel"
        ],
        "classes": [
            {
                "class_name": "LitellmProvider",
                "methods": [
                    "get_model"
                ]
            }
        ],
        "functions": {
            "get_model": [
                "LitellmModel",
                "get_default_model"
            ]
        }
    },
    "src/agents/extensions/models/__init__.py": {
        "file_name": "/src/agents/extensions/models/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "src/agents/extensions/models/litellm_model.py": {
        "file_name": "/src/agents/extensions/models/litellm_model.py",
        "imports": [
            "__future__.annotations",
            "json",
            "time",
            "collections.abc.AsyncIterator",
            "copy.copy",
            "typing.Any",
            "typing.Literal",
            "typing.cast",
            "typing.overload",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "agents.exceptions.ModelBehaviorError",
            "litellm",
            "openai.AsyncStream",
            "openai.NotGiven",
            "openai.omit",
            "openai.types.chat.ChatCompletionChunk",
            "openai.types.chat.ChatCompletionMessageCustomToolCall",
            "openai.types.chat.ChatCompletionMessageFunctionToolCall",
            "openai.types.chat.ChatCompletionMessageParam",
            "openai.types.chat.chat_completion_message.Annotation",
            "openai.types.chat.chat_completion_message.AnnotationURLCitation",
            "openai.types.chat.chat_completion_message.ChatCompletionMessage",
            "openai.types.chat.chat_completion_message_function_tool_call.Function",
            "openai.types.responses.Response",
            "._debug",
            "agent_output.AgentOutputSchemaBase",
            "handoffs.Handoff",
            "items.ModelResponse",
            "items.TResponseInputItem",
            "items.TResponseStreamEvent",
            "logger.logger",
            "model_settings.ModelSettings",
            "models.chatcmpl_converter.Converter",
            "models.chatcmpl_helpers.HEADERS",
            "models.chatcmpl_helpers.HEADERS_OVERRIDE",
            "models.chatcmpl_stream_handler.ChatCmplStreamHandler",
            "models.fake_id.FAKE_RESPONSES_ID",
            "models.interface.Model",
            "models.interface.ModelTracing",
            "tool.Tool",
            "tracing.generation_span",
            "tracing.span_data.GenerationSpanData",
            "tracing.spans.Span",
            "usage.Usage",
            "util._json._to_dump_compatible"
        ],
        "classes": [
            {
                "class_name": "InternalChatCompletionMessage",
                "methods": []
            },
            {
                "class_name": "LitellmModel",
                "methods": [
                    "__init__",
                    "_fix_tool_message_ordering",
                    "_remove_not_given",
                    "_merge_headers"
                ]
            },
            {
                "class_name": "LitellmConverter",
                "methods": [
                    "convert_message_to_openai",
                    "convert_annotations_to_openai",
                    "convert_tool_call_to_openai"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "_fix_tool_message_ordering": [
                "enumerate",
                "isinstance",
                "append",
                "get",
                "cast",
                "copy",
                "set",
                "add"
            ],
            "_remove_not_given": [
                "isinstance"
            ],
            "_merge_headers": [
                "get"
            ],
            "convert_message_to_openai": [
                "ModelBehaviorError",
                "convert_tool_call_to_openai",
                "get",
                "hasattr",
                "isinstance",
                "append",
                "cast",
                "dict",
                "items",
                "model_dump",
                "str",
                "InternalChatCompletionMessage",
                "convert_annotations_to_openai"
            ],
            "convert_annotations_to_openai": [
                "get",
                "Annotation",
                "AnnotationURLCitation"
            ],
            "convert_tool_call_to_openai": [
                "ChatCompletionMessageFunctionToolCall",
                "Function"
            ]
        }
    },
    "src/agents/memory/__init__.py": {
        "file_name": "/src/agents/memory/__init__.py",
        "imports": [
            "openai_conversations_session.OpenAIConversationsSession",
            "session.Session",
            "session.SessionABC",
            "sqlite_session.SQLiteSession",
            "util.SessionInputCallback"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/memory/sqlite_session.py": {
        "file_name": "/src/agents/memory/sqlite_session.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "sqlite3",
            "threading",
            "pathlib.Path",
            "items.TResponseInputItem",
            "session.SessionABC"
        ],
        "classes": [
            {
                "class_name": "SQLiteSession",
                "methods": [
                    "__init__",
                    "_get_connection",
                    "_init_db_for_connection",
                    "close"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "local",
                "Lock",
                "str",
                "connect",
                "execute",
                "_init_db_for_connection",
                "close"
            ],
            "_get_connection": [
                "hasattr",
                "connect",
                "str",
                "execute",
                "isinstance",
                "type"
            ],
            "_init_db_for_connection": [
                "execute",
                "commit"
            ],
            "_get_items_sync": [
                "_get_connection",
                "Lock",
                "execute",
                "fetchall",
                "list",
                "reversed",
                "loads",
                "append"
            ],
            "_add_items_sync": [
                "_get_connection",
                "Lock",
                "execute",
                "dumps",
                "executemany",
                "commit"
            ],
            "_pop_item_sync": [
                "_get_connection",
                "Lock",
                "execute",
                "fetchone",
                "commit",
                "loads"
            ],
            "_clear_session_sync": [
                "_get_connection",
                "Lock",
                "execute",
                "commit"
            ],
            "close": [
                "hasattr",
                "close"
            ]
        }
    },
    "src/agents/memory/openai_conversations_session.py": {
        "file_name": "/src/agents/memory/openai_conversations_session.py",
        "imports": [
            "__future__.annotations",
            "openai.AsyncOpenAI",
            "agents.models._openai_shared.get_default_openai_client",
            "items.TResponseInputItem",
            "session.SessionABC"
        ],
        "classes": [
            {
                "class_name": "OpenAIConversationsSession",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "get_default_openai_client",
                "AsyncOpenAI"
            ]
        }
    },
    "src/agents/memory/util.py": {
        "file_name": "/src/agents/memory/util.py",
        "imports": [
            "__future__.annotations",
            "typing.Callable",
            "items.TResponseInputItem",
            "util._types.MaybeAwaitable"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/memory/session.py": {
        "file_name": "/src/agents/memory/session.py",
        "imports": [
            "__future__.annotations",
            "abc.ABC",
            "abc.abstractmethod",
            "typing.TYPE_CHECKING",
            "typing.Protocol",
            "typing.runtime_checkable",
            "items.TResponseInputItem"
        ],
        "classes": [
            {
                "class_name": "Session",
                "methods": []
            },
            {
                "class_name": "SessionABC",
                "methods": []
            }
        ],
        "functions": {}
    },
    "src/agents/models/fake_id.py": {
        "file_name": "/src/agents/models/fake_id.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "src/agents/models/default_models.py": {
        "file_name": "/src/agents/models/default_models.py",
        "imports": [
            "copy",
            "os",
            "typing.Optional",
            "openai.types.shared.reasoning.Reasoning",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {
            "gpt_5_reasoning_settings_required": [
                "startswith"
            ],
            "is_gpt_5_default": [
                "gpt_5_reasoning_settings_required",
                "get_default_model"
            ],
            "get_default_model": [
                "lower",
                "getenv"
            ],
            "get_default_model_settings": [
                "get_default_model",
                "gpt_5_reasoning_settings_required",
                "deepcopy",
                "ModelSettings"
            ]
        }
    },
    "src/agents/models/chatcmpl_helpers.py": {
        "file_name": "/src/agents/models/chatcmpl_helpers.py",
        "imports": [
            "__future__.annotations",
            "contextvars.ContextVar",
            "openai.AsyncOpenAI",
            "model_settings.ModelSettings",
            "version.__version__"
        ],
        "classes": [
            {
                "class_name": "ChatCmplHelpers",
                "methods": [
                    "is_openai",
                    "get_store_param",
                    "get_stream_options_param"
                ]
            }
        ],
        "functions": {
            "is_openai": [
                "startswith",
                "str"
            ],
            "get_store_param": [
                "is_openai"
            ],
            "get_stream_options_param": [
                "is_openai"
            ]
        }
    },
    "src/agents/models/chatcmpl_converter.py": {
        "file_name": "/src/agents/models/chatcmpl_converter.py",
        "imports": [
            "__future__.annotations",
            "json",
            "collections.abc.Iterable",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "typing.cast",
            "openai.Omit",
            "openai.omit",
            "openai.types.chat.ChatCompletionAssistantMessageParam",
            "openai.types.chat.ChatCompletionContentPartImageParam",
            "openai.types.chat.ChatCompletionContentPartParam",
            "openai.types.chat.ChatCompletionContentPartTextParam",
            "openai.types.chat.ChatCompletionDeveloperMessageParam",
            "openai.types.chat.ChatCompletionMessage",
            "openai.types.chat.ChatCompletionMessageFunctionToolCallParam",
            "openai.types.chat.ChatCompletionMessageParam",
            "openai.types.chat.ChatCompletionSystemMessageParam",
            "openai.types.chat.ChatCompletionToolChoiceOptionParam",
            "openai.types.chat.ChatCompletionToolMessageParam",
            "openai.types.chat.ChatCompletionUserMessageParam",
            "openai.types.chat.chat_completion_content_part_param.File",
            "openai.types.chat.chat_completion_content_part_param.FileFile",
            "openai.types.chat.chat_completion_tool_param.ChatCompletionToolParam",
            "openai.types.chat.completion_create_params.ResponseFormat",
            "openai.types.responses.EasyInputMessageParam",
            "openai.types.responses.ResponseFileSearchToolCallParam",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseFunctionToolCallParam",
            "openai.types.responses.ResponseInputContentParam",
            "openai.types.responses.ResponseInputFileParam",
            "openai.types.responses.ResponseInputImageParam",
            "openai.types.responses.ResponseInputTextParam",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputMessageParam",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.ResponseReasoningItem",
            "openai.types.responses.ResponseReasoningItemParam",
            "openai.types.responses.response_input_param.FunctionCallOutput",
            "openai.types.responses.response_input_param.ItemReference",
            "openai.types.responses.response_input_param.Message",
            "openai.types.responses.response_reasoning_item.Content",
            "openai.types.responses.response_reasoning_item.Summary",
            "agent_output.AgentOutputSchemaBase",
            "exceptions.AgentsException",
            "exceptions.UserError",
            "handoffs.Handoff",
            "items.TResponseInputItem",
            "items.TResponseOutputItem",
            "model_settings.MCPToolChoice",
            "tool.FunctionTool",
            "tool.Tool",
            "fake_id.FAKE_RESPONSES_ID"
        ],
        "classes": [
            {
                "class_name": "Converter",
                "methods": [
                    "convert_tool_choice",
                    "convert_response_format",
                    "message_to_output_items",
                    "maybe_easy_input_message",
                    "maybe_input_message",
                    "maybe_file_search_call",
                    "maybe_function_tool_call",
                    "maybe_function_tool_call_output",
                    "maybe_item_reference",
                    "maybe_response_output_message",
                    "maybe_reasoning_message",
                    "extract_text_content",
                    "extract_all_content",
                    "items_to_messages",
                    "tool_to_openai",
                    "convert_handoff_tool"
                ]
            }
        ],
        "functions": {
            "convert_tool_choice": [
                "isinstance",
                "UserError"
            ],
            "convert_response_format": [
                "is_plain_text",
                "is_strict_json_schema",
                "json_schema"
            ],
            "message_to_output_items": [
                "hasattr",
                "ResponseReasoningItem",
                "Summary",
                "isinstance",
                "get",
                "append",
                "Content",
                "join",
                "ResponseOutputMessage",
                "ResponseOutputText",
                "ResponseOutputRefusal",
                "AgentsException",
                "ResponseFunctionToolCall"
            ],
            "maybe_easy_input_message": [
                "isinstance",
                "keys",
                "get",
                "cast"
            ],
            "maybe_input_message": [
                "isinstance",
                "get",
                "cast"
            ],
            "maybe_file_search_call": [
                "isinstance",
                "get",
                "cast"
            ],
            "maybe_function_tool_call": [
                "isinstance",
                "get",
                "cast"
            ],
            "maybe_function_tool_call_output": [
                "isinstance",
                "get",
                "cast"
            ],
            "maybe_item_reference": [
                "isinstance",
                "get",
                "cast"
            ],
            "maybe_response_output_message": [
                "isinstance",
                "get",
                "cast"
            ],
            "maybe_reasoning_message": [
                "isinstance",
                "get",
                "cast"
            ],
            "extract_text_content": [
                "extract_all_content",
                "isinstance",
                "get",
                "append",
                "cast"
            ],
            "extract_all_content": [
                "isinstance",
                "get",
                "cast",
                "append",
                "ChatCompletionContentPartTextParam",
                "UserError",
                "ChatCompletionContentPartImageParam",
                "FileFile",
                "File"
            ],
            "items_to_messages": [
                "isinstance",
                "ChatCompletionUserMessageParam",
                "maybe_easy_input_message",
                "flush_assistant_message",
                "extract_all_content",
                "append",
                "extract_text_content",
                "UserError",
                "maybe_input_message",
                "maybe_response_output_message",
                "ChatCompletionAssistantMessageParam",
                "join",
                "maybe_file_search_call",
                "ensure_assistant_message",
                "list",
                "get",
                "ChatCompletionMessageFunctionToolCallParam",
                "dumps",
                "maybe_function_tool_call",
                "ChatCompletionContentPartTextParam",
                "maybe_function_tool_call_output",
                "cast",
                "maybe_item_reference",
                "maybe_reasoning_message",
                "split",
                "pop"
            ],
            "flush_assistant_message": [
                "get",
                "append"
            ],
            "ensure_assistant_message": [
                "ChatCompletionAssistantMessageParam"
            ],
            "tool_to_openai": [
                "isinstance",
                "UserError",
                "type"
            ],
            "convert_handoff_tool": []
        }
    },
    "src/agents/models/__init__.py": {
        "file_name": "/src/agents/models/__init__.py",
        "imports": [
            "default_models.get_default_model",
            "default_models.get_default_model_settings",
            "default_models.gpt_5_reasoning_settings_required",
            "default_models.is_gpt_5_default"
        ],
        "classes": [],
        "functions": {}
    },
    "src/agents/models/_openai_shared.py": {
        "file_name": "/src/agents/models/_openai_shared.py",
        "imports": [
            "__future__.annotations",
            "openai.AsyncOpenAI"
        ],
        "classes": [],
        "functions": {
            "set_default_openai_key": [],
            "get_default_openai_key": [],
            "set_default_openai_client": [],
            "get_default_openai_client": [],
            "set_use_responses_by_default": [],
            "get_use_responses_by_default": []
        }
    },
    "src/agents/models/openai_chatcompletions.py": {
        "file_name": "/src/agents/models/openai_chatcompletions.py",
        "imports": [
            "__future__.annotations",
            "json",
            "time",
            "collections.abc.AsyncIterator",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Literal",
            "typing.cast",
            "typing.overload",
            "openai.AsyncOpenAI",
            "openai.AsyncStream",
            "openai.Omit",
            "openai.omit",
            "openai.types.ChatModel",
            "openai.types.chat.ChatCompletion",
            "openai.types.chat.ChatCompletionChunk",
            "openai.types.chat.ChatCompletionMessage",
            "openai.types.chat.chat_completion.Choice",
            "openai.types.responses.Response",
            "openai.types.responses.response_prompt_param.ResponsePromptParam",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "._debug",
            "agent_output.AgentOutputSchemaBase",
            "handoffs.Handoff",
            "items.ModelResponse",
            "items.TResponseInputItem",
            "items.TResponseStreamEvent",
            "logger.logger",
            "tool.Tool",
            "tracing.generation_span",
            "tracing.span_data.GenerationSpanData",
            "tracing.spans.Span",
            "usage.Usage",
            "util._json._to_dump_compatible",
            "chatcmpl_converter.Converter",
            "chatcmpl_helpers.HEADERS",
            "chatcmpl_helpers.HEADERS_OVERRIDE",
            "chatcmpl_helpers.ChatCmplHelpers",
            "chatcmpl_stream_handler.ChatCmplStreamHandler",
            "fake_id.FAKE_RESPONSES_ID",
            "interface.Model",
            "interface.ModelTracing",
            "openai_responses.Converter",
            "model_settings.ModelSettings"
        ],
        "classes": [
            {
                "class_name": "OpenAIChatCompletionsModel",
                "methods": [
                    "__init__",
                    "_non_null_or_omit",
                    "_get_client",
                    "_merge_headers"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "_non_null_or_omit": [],
            "_get_client": [
                "AsyncOpenAI"
            ],
            "_merge_headers": [
                "get"
            ]
        }
    },
    "src/agents/models/openai_provider.py": {
        "file_name": "/src/agents/models/openai_provider.py",
        "imports": [
            "__future__.annotations",
            "httpx",
            "openai.AsyncOpenAI",
            "openai.DefaultAsyncHttpxClient",
            "._openai_shared",
            "default_models.get_default_model",
            "interface.Model",
            "interface.ModelProvider",
            "openai_chatcompletions.OpenAIChatCompletionsModel",
            "openai_responses.OpenAIResponsesModel"
        ],
        "classes": [
            {
                "class_name": "OpenAIProvider",
                "methods": [
                    "__init__",
                    "_get_client",
                    "get_model"
                ]
            }
        ],
        "functions": {
            "shared_http_client": [
                "DefaultAsyncHttpxClient"
            ],
            "__init__": [
                "get_use_responses_by_default"
            ],
            "_get_client": [
                "get_default_openai_client",
                "AsyncOpenAI",
                "get_default_openai_key",
                "shared_http_client"
            ],
            "get_model": [
                "get_default_model",
                "_get_client",
                "OpenAIResponsesModel",
                "OpenAIChatCompletionsModel"
            ]
        }
    },
    "src/agents/models/multi_provider.py": {
        "file_name": "/src/agents/models/multi_provider.py",
        "imports": [
            "__future__.annotations",
            "openai.AsyncOpenAI",
            "exceptions.UserError",
            "interface.Model",
            "interface.ModelProvider",
            "openai_provider.OpenAIProvider",
            "extensions.models.litellm_provider.LitellmProvider"
        ],
        "classes": [
            {
                "class_name": "MultiProviderMap",
                "methods": [
                    "__init__",
                    "has_prefix",
                    "get_mapping",
                    "set_mapping",
                    "get_provider",
                    "add_provider",
                    "remove_provider"
                ]
            },
            {
                "class_name": "MultiProvider",
                "methods": [
                    "__init__",
                    "_get_prefix_and_model_name",
                    "_create_fallback_provider",
                    "_get_fallback_provider",
                    "get_model"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "OpenAIProvider"
            ],
            "has_prefix": [],
            "get_mapping": [
                "copy"
            ],
            "set_mapping": [],
            "get_provider": [
                "get"
            ],
            "add_provider": [],
            "remove_provider": [],
            "_get_prefix_and_model_name": [
                "split"
            ],
            "_create_fallback_provider": [
                "LitellmProvider",
                "UserError"
            ],
            "_get_fallback_provider": [
                "_create_fallback_provider"
            ],
            "get_model": [
                "_get_prefix_and_model_name",
                "get_provider",
                "get_model",
                "_get_fallback_provider"
            ]
        }
    },
    "src/agents/models/interface.py": {
        "file_name": "/src/agents/models/interface.py",
        "imports": [
            "__future__.annotations",
            "abc",
            "enum",
            "collections.abc.AsyncIterator",
            "typing.TYPE_CHECKING",
            "openai.types.responses.response_prompt_param.ResponsePromptParam",
            "agent_output.AgentOutputSchemaBase",
            "handoffs.Handoff",
            "items.ModelResponse",
            "items.TResponseInputItem",
            "items.TResponseStreamEvent",
            "tool.Tool",
            "model_settings.ModelSettings"
        ],
        "classes": [
            {
                "class_name": "ModelTracing",
                "methods": [
                    "is_disabled",
                    "include_data"
                ]
            },
            {
                "class_name": "Model",
                "methods": [
                    "stream_response"
                ]
            },
            {
                "class_name": "ModelProvider",
                "methods": [
                    "get_model"
                ]
            }
        ],
        "functions": {
            "is_disabled": [],
            "include_data": [],
            "stream_response": [],
            "get_model": []
        }
    },
    "src/agents/models/openai_responses.py": {
        "file_name": "/src/agents/models/openai_responses.py",
        "imports": [
            "__future__.annotations",
            "json",
            "collections.abc.AsyncIterator",
            "contextvars.ContextVar",
            "dataclasses.dataclass",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "typing.Literal",
            "typing.Union",
            "typing.cast",
            "typing.overload",
            "openai.APIStatusError",
            "openai.AsyncOpenAI",
            "openai.AsyncStream",
            "openai.Omit",
            "openai.omit",
            "openai.types.ChatModel",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.ResponseIncludable",
            "openai.types.responses.ResponseStreamEvent",
            "openai.types.responses.ResponseTextConfigParam",
            "openai.types.responses.ToolParam",
            "openai.types.responses.response_create_params",
            "openai.types.responses.response_prompt_param.ResponsePromptParam",
            "._debug",
            "agent_output.AgentOutputSchemaBase",
            "exceptions.UserError",
            "handoffs.Handoff",
            "items.ItemHelpers",
            "items.ModelResponse",
            "items.TResponseInputItem",
            "logger.logger",
            "model_settings.MCPToolChoice",
            "tool.CodeInterpreterTool",
            "tool.ComputerTool",
            "tool.FileSearchTool",
            "tool.FunctionTool",
            "tool.HostedMCPTool",
            "tool.ImageGenerationTool",
            "tool.LocalShellTool",
            "tool.Tool",
            "tool.WebSearchTool",
            "tracing.SpanError",
            "tracing.response_span",
            "usage.Usage",
            "util._json._to_dump_compatible",
            "version.__version__",
            "interface.Model",
            "interface.ModelTracing",
            "model_settings.ModelSettings"
        ],
        "classes": [
            {
                "class_name": "OpenAIResponsesModel",
                "methods": [
                    "__init__",
                    "_non_null_or_omit",
                    "_get_client",
                    "_merge_headers"
                ]
            },
            {
                "class_name": "ConvertedTools",
                "methods": []
            },
            {
                "class_name": "Converter",
                "methods": [
                    "convert_tool_choice",
                    "get_response_format",
                    "convert_tools",
                    "_convert_tool",
                    "_convert_handoff_tool"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "_non_null_or_omit": [],
            "_get_client": [
                "AsyncOpenAI"
            ],
            "_merge_headers": [
                "get"
            ],
            "convert_tool_choice": [
                "isinstance"
            ],
            "get_response_format": [
                "is_plain_text",
                "json_schema",
                "is_strict_json_schema"
            ],
            "convert_tools": [
                "isinstance",
                "len",
                "UserError",
                "_convert_tool",
                "append",
                "_convert_handoff_tool",
                "ConvertedTools"
            ],
            "_convert_tool": [
                "isinstance",
                "model_dump",
                "UserError",
                "type"
            ],
            "_convert_handoff_tool": []
        }
    },
    "src/agents/models/chatcmpl_stream_handler.py": {
        "file_name": "/src/agents/models/chatcmpl_stream_handler.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.AsyncIterator",
            "dataclasses.dataclass",
            "dataclasses.field",
            "openai.AsyncStream",
            "openai.types.chat.ChatCompletionChunk",
            "openai.types.completion_usage.CompletionUsage",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.ResponseContentPartAddedEvent",
            "openai.types.responses.ResponseContentPartDoneEvent",
            "openai.types.responses.ResponseCreatedEvent",
            "openai.types.responses.ResponseFunctionCallArgumentsDeltaEvent",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseOutputItem",
            "openai.types.responses.ResponseOutputItemAddedEvent",
            "openai.types.responses.ResponseOutputItemDoneEvent",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.ResponseReasoningItem",
            "openai.types.responses.ResponseReasoningSummaryPartAddedEvent",
            "openai.types.responses.ResponseReasoningSummaryPartDoneEvent",
            "openai.types.responses.ResponseReasoningSummaryTextDeltaEvent",
            "openai.types.responses.ResponseRefusalDeltaEvent",
            "openai.types.responses.ResponseTextDeltaEvent",
            "openai.types.responses.ResponseUsage",
            "openai.types.responses.response_reasoning_item.Content",
            "openai.types.responses.response_reasoning_item.Summary",
            "openai.types.responses.response_reasoning_summary_part_added_event.Part",
            "openai.types.responses.response_reasoning_summary_part_done_event.Part",
            "openai.types.responses.response_reasoning_text_delta_event.ResponseReasoningTextDeltaEvent",
            "openai.types.responses.response_reasoning_text_done_event.ResponseReasoningTextDoneEvent",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "items.TResponseStreamEvent",
            "fake_id.FAKE_RESPONSES_ID"
        ],
        "classes": [
            {
                "class_name": "Part",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "StreamingState",
                "methods": []
            },
            {
                "class_name": "SequenceNumber",
                "methods": [
                    "__init__",
                    "get_and_increment"
                ]
            },
            {
                "class_name": "ChatCmplStreamHandler",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [],
            "get_and_increment": []
        }
    },
    "examples/__init__.py": {
        "file_name": "/examples/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/hosted_mcp/__init__.py": {
        "file_name": "/examples/hosted_mcp/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/hosted_mcp/approvals.py": {
        "file_name": "/examples/hosted_mcp/approvals.py",
        "imports": [
            "argparse",
            "asyncio",
            "agents.Agent",
            "agents.HostedMCPTool",
            "agents.MCPToolApprovalFunctionResult",
            "agents.MCPToolApprovalRequest",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {
            "approval_callback": [
                "input"
            ]
        }
    },
    "examples/hosted_mcp/connectors.py": {
        "file_name": "/examples/hosted_mcp/connectors.py",
        "imports": [
            "argparse",
            "asyncio",
            "json",
            "os",
            "datetime.datetime",
            "agents.Agent",
            "agents.HostedMCPTool",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/hosted_mcp/simple.py": {
        "file_name": "/examples/hosted_mcp/simple.py",
        "imports": [
            "argparse",
            "asyncio",
            "agents.Agent",
            "agents.HostedMCPTool",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/reasoning_content/__init__.py": {
        "file_name": "/examples/reasoning_content/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/reasoning_content/gpt_oss_stream.py": {
        "file_name": "/examples/reasoning_content/gpt_oss_stream.py",
        "imports": [
            "asyncio",
            "os",
            "openai.AsyncOpenAI",
            "openai.types.shared.Reasoning",
            "agents.Agent",
            "agents.ModelSettings",
            "agents.OpenAIChatCompletionsModel",
            "agents.Runner",
            "agents.set_tracing_disabled"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/reasoning_content/runner_example.py": {
        "file_name": "/examples/reasoning_content/runner_example.py",
        "imports": [
            "asyncio",
            "os",
            "openai.types.shared.reasoning.Reasoning",
            "agents.Agent",
            "agents.ModelSettings",
            "agents.Runner",
            "agents.trace",
            "agents.items.ReasoningItem"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/reasoning_content/main.py": {
        "file_name": "/examples/reasoning_content/main.py",
        "imports": [
            "asyncio",
            "os",
            "typing.Any",
            "typing.cast",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "openai.types.shared.reasoning.Reasoning",
            "agents.ModelSettings",
            "agents.models.interface.ModelTracing",
            "agents.models.openai_provider.OpenAIProvider"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/agent_patterns/parallelization.py": {
        "file_name": "/examples/agent_patterns/parallelization.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.ItemHelpers",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/agent_patterns/deterministic.py": {
        "file_name": "/examples/agent_patterns/deterministic.py",
        "imports": [
            "asyncio",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [
            {
                "class_name": "OutlineCheckerOutput",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/agent_patterns/output_guardrails.py": {
        "file_name": "/examples/agent_patterns/output_guardrails.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "pydantic.BaseModel",
            "pydantic.Field",
            "agents.Agent",
            "agents.GuardrailFunctionOutput",
            "agents.OutputGuardrailTripwireTriggered",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.output_guardrail"
        ],
        "classes": [
            {
                "class_name": "MessageOutput",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/agent_patterns/agents_as_tools.py": {
        "file_name": "/examples/agent_patterns/agents_as_tools.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.ItemHelpers",
            "agents.MessageOutputItem",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/agent_patterns/streaming_guardrails.py": {
        "file_name": "/examples/agent_patterns/streaming_guardrails.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "openai.types.responses.ResponseTextDeltaEvent",
            "pydantic.BaseModel",
            "pydantic.Field",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [
            {
                "class_name": "GuardrailOutput",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/agent_patterns/agents_as_tools_conditional.py": {
        "file_name": "/examples/agent_patterns/agents_as_tools_conditional.py",
        "imports": [
            "asyncio",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.AgentBase",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [
            {
                "class_name": "AppContext",
                "methods": []
            }
        ],
        "functions": {
            "french_spanish_enabled": [],
            "european_enabled": []
        }
    },
    "examples/agent_patterns/input_guardrails.py": {
        "file_name": "/examples/agent_patterns/input_guardrails.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.GuardrailFunctionOutput",
            "agents.InputGuardrailTripwireTriggered",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.input_guardrail"
        ],
        "classes": [
            {
                "class_name": "MathHomeworkOutput",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/agent_patterns/llm_as_a_judge.py": {
        "file_name": "/examples/agent_patterns/llm_as_a_judge.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "dataclasses.dataclass",
            "typing.Literal",
            "agents.Agent",
            "agents.ItemHelpers",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.trace"
        ],
        "classes": [
            {
                "class_name": "EvaluationFeedback",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/agent_patterns/forcing_tool_use.py": {
        "file_name": "/examples/agent_patterns/forcing_tool_use.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "typing.Any",
            "typing.Literal",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.FunctionToolResult",
            "agents.ModelSettings",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.ToolsToFinalOutputFunction",
            "agents.ToolsToFinalOutputResult",
            "agents.function_tool",
            "argparse"
        ],
        "classes": [
            {
                "class_name": "Weather",
                "methods": []
            }
        ],
        "functions": {
            "get_weather": [
                "print",
                "Weather"
            ]
        }
    },
    "examples/agent_patterns/routing.py": {
        "file_name": "/examples/agent_patterns/routing.py",
        "imports": [
            "asyncio",
            "uuid",
            "openai.types.responses.ResponseContentPartDoneEvent",
            "openai.types.responses.ResponseTextDeltaEvent",
            "agents.Agent",
            "agents.RawResponsesStreamEvent",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.trace"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/research_bot/printer.py": {
        "file_name": "/examples/research_bot/printer.py",
        "imports": [
            "typing.Any",
            "rich.console.Console",
            "rich.console.Group",
            "rich.live.Live",
            "rich.spinner.Spinner"
        ],
        "classes": [
            {
                "class_name": "Printer",
                "methods": [
                    "__init__",
                    "end",
                    "hide_done_checkmark",
                    "update_item",
                    "mark_item_done",
                    "flush"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Live",
                "set",
                "start"
            ],
            "end": [
                "stop"
            ],
            "hide_done_checkmark": [
                "add"
            ],
            "update_item": [
                "add",
                "flush"
            ],
            "mark_item_done": [
                "flush"
            ],
            "flush": [
                "items",
                "append",
                "Spinner",
                "update",
                "Group"
            ]
        }
    },
    "examples/research_bot/__init__.py": {
        "file_name": "/examples/research_bot/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/research_bot/main.py": {
        "file_name": "/examples/research_bot/main.py",
        "imports": [
            "asyncio",
            "manager.ResearchManager"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/research_bot/manager.py": {
        "file_name": "/examples/research_bot/manager.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "time",
            "rich.console.Console",
            "agents.Runner",
            "agents.custom_span",
            "agents.gen_trace_id",
            "agents.trace",
            "agents.planner_agent.WebSearchItem",
            "agents.planner_agent.WebSearchPlan",
            "agents.planner_agent.planner_agent",
            "agents.search_agent.search_agent",
            "agents.writer_agent.ReportData",
            "agents.writer_agent.writer_agent",
            "printer.Printer"
        ],
        "classes": [
            {
                "class_name": "ResearchManager",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Console",
                "Printer"
            ]
        }
    },
    "examples/research_bot/agents/writer_agent.py": {
        "file_name": "/examples/research_bot/agents/writer_agent.py",
        "imports": [
            "openai.types.shared.reasoning.Reasoning",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.ModelSettings"
        ],
        "classes": [
            {
                "class_name": "ReportData",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/research_bot/agents/__init__.py": {
        "file_name": "/examples/research_bot/agents/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/research_bot/agents/planner_agent.py": {
        "file_name": "/examples/research_bot/agents/planner_agent.py",
        "imports": [
            "openai.types.shared.reasoning.Reasoning",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.ModelSettings"
        ],
        "classes": [
            {
                "class_name": "WebSearchItem",
                "methods": []
            },
            {
                "class_name": "WebSearchPlan",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/research_bot/agents/search_agent.py": {
        "file_name": "/examples/research_bot/agents/search_agent.py",
        "imports": [
            "agents.Agent",
            "agents.WebSearchTool",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/handoffs/message_filter_streaming.py": {
        "file_name": "/examples/handoffs/message_filter_streaming.py",
        "imports": [
            "__future__.annotations",
            "json",
            "random",
            "agents.Agent",
            "agents.HandoffInputData",
            "agents.Runner",
            "agents.function_tool",
            "agents.handoff",
            "agents.trace",
            "agents.extensions.handoff_filters",
            "agents.models.is_gpt_5_default",
            "asyncio"
        ],
        "classes": [],
        "functions": {
            "random_number_tool": [
                "randint"
            ],
            "spanish_handoff_message_filter": [
                "is_gpt_5_default",
                "print",
                "HandoffInputData",
                "tuple",
                "remove_all_tools",
                "isinstance"
            ]
        }
    },
    "examples/handoffs/message_filter.py": {
        "file_name": "/examples/handoffs/message_filter.py",
        "imports": [
            "__future__.annotations",
            "json",
            "random",
            "agents.Agent",
            "agents.HandoffInputData",
            "agents.Runner",
            "agents.function_tool",
            "agents.handoff",
            "agents.trace",
            "agents.extensions.handoff_filters",
            "agents.models.is_gpt_5_default",
            "asyncio"
        ],
        "classes": [],
        "functions": {
            "random_number_tool": [
                "randint"
            ],
            "spanish_handoff_message_filter": [
                "is_gpt_5_default",
                "print",
                "HandoffInputData",
                "tuple",
                "remove_all_tools",
                "isinstance"
            ]
        }
    },
    "examples/realtime/cli/demo.py": {
        "file_name": "/examples/realtime/cli/demo.py",
        "imports": [
            "asyncio",
            "queue",
            "sys",
            "threading",
            "typing.Any",
            "numpy",
            "sounddevice",
            "agents.function_tool",
            "agents.realtime.RealtimeAgent",
            "agents.realtime.RealtimePlaybackTracker",
            "agents.realtime.RealtimeRunner",
            "agents.realtime.RealtimeSession",
            "agents.realtime.RealtimeSessionEvent",
            "agents.realtime.model.RealtimeModelConfig"
        ],
        "classes": [
            {
                "class_name": "NoUIDemo",
                "methods": [
                    "__init__",
                    "_output_callback"
                ]
            }
        ],
        "functions": {
            "get_weather": [],
            "_truncate_str": [
                "len"
            ],
            "__init__": [
                "RealtimePlaybackTracker",
                "Queue",
                "Event",
                "dtype",
                "int"
            ],
            "_output_callback": [
                "print",
                "is_set",
                "fill",
                "empty",
                "get_nowait",
                "clear",
                "len",
                "min",
                "max",
                "astype",
                "arange",
                "float",
                "clip",
                "on_play_bytes",
                "tobytes",
                "qsize"
            ],
            "rms_energy": [
                "astype",
                "float",
                "sqrt",
                "mean"
            ]
        }
    },
    "examples/realtime/cli/ui.py": {
        "file_name": "/examples/realtime/cli/ui.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "collections.abc.Coroutine",
            "typing.Any",
            "typing.Callable",
            "numpy",
            "numpy.typing",
            "sounddevice",
            "textual.events",
            "textual.app.App",
            "textual.app.ComposeResult",
            "textual.containers.Container",
            "textual.containers.Horizontal",
            "textual.reactive.reactive",
            "textual.widgets.RichLog",
            "textual.widgets.Static",
            "typing_extensions.override"
        ],
        "classes": [
            {
                "class_name": "Header",
                "methods": [
                    "render"
                ]
            },
            {
                "class_name": "AudioStatusIndicator",
                "methods": [
                    "render"
                ]
            },
            {
                "class_name": "AppUI",
                "methods": [
                    "__init__",
                    "compose",
                    "set_is_connected",
                    "set_audio_callback",
                    "set_header_text",
                    "set_recording_status",
                    "log_message",
                    "add_transcript",
                    "play_audio"
                ]
            }
        ],
        "functions": {
            "render": [],
            "__init__": [
                "__init__",
                "super",
                "OutputStream",
                "Event"
            ],
            "compose": [
                "Container",
                "Header",
                "AudioStatusIndicator",
                "Horizontal",
                "Static",
                "RichLog"
            ],
            "set_is_connected": [
                "set",
                "clear"
            ],
            "set_audio_callback": [],
            "set_header_text": [
                "query_one",
                "update"
            ],
            "set_recording_status": [
                "query_one"
            ],
            "log_message": [
                "query_one",
                "write"
            ],
            "add_transcript": [
                "query_one",
                "write"
            ],
            "play_audio": [
                "write",
                "log_message"
            ]
        }
    },
    "examples/realtime/app/server.py": {
        "file_name": "/examples/realtime/app/server.py",
        "imports": [
            "asyncio",
            "base64",
            "json",
            "logging",
            "struct",
            "contextlib.asynccontextmanager",
            "typing.TYPE_CHECKING",
            "typing.Any",
            "fastapi.FastAPI",
            "fastapi.WebSocket",
            "fastapi.WebSocketDisconnect",
            "fastapi.responses.FileResponse",
            "fastapi.staticfiles.StaticFiles",
            "typing_extensions.assert_never",
            "agents.realtime.RealtimeRunner",
            "agents.realtime.RealtimeSession",
            "agents.realtime.RealtimeSessionEvent",
            "agents.realtime.config.RealtimeUserInputMessage",
            "agents.realtime.model_inputs.RealtimeModelSendRawMessage",
            "agent.get_starting_agent",
            "agent.get_starting_agent",
            "agent.get_starting_agent",
            "uvicorn"
        ],
        "classes": [
            {
                "class_name": "RealtimeWebSocketManager",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": []
        }
    },
    "examples/realtime/app/agent.py": {
        "file_name": "/examples/realtime/app/agent.py",
        "imports": [
            "agents.function_tool",
            "agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX",
            "agents.realtime.RealtimeAgent",
            "agents.realtime.realtime_handoff"
        ],
        "classes": [],
        "functions": {
            "get_weather": [],
            "get_starting_agent": []
        }
    },
    "examples/realtime/twilio/__init__.py": {
        "file_name": "/examples/realtime/twilio/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/realtime/twilio/twilio_handler.py": {
        "file_name": "/examples/realtime/twilio/twilio_handler.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "base64",
            "json",
            "os",
            "time",
            "datetime.datetime",
            "typing.Any",
            "fastapi.WebSocket",
            "agents.function_tool",
            "agents.realtime.RealtimeAgent",
            "agents.realtime.RealtimePlaybackTracker",
            "agents.realtime.RealtimeRunner",
            "agents.realtime.RealtimeSession",
            "agents.realtime.RealtimeSessionEvent"
        ],
        "classes": [
            {
                "class_name": "TwilioHandler",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "get_weather": [],
            "get_current_time": [
                "strftime",
                "now"
            ],
            "__init__": [
                "RealtimePlaybackTracker",
                "int",
                "bytearray",
                "time"
            ]
        }
    },
    "examples/realtime/twilio/server.py": {
        "file_name": "/examples/realtime/twilio/server.py",
        "imports": [
            "os",
            "typing.TYPE_CHECKING",
            "fastapi.FastAPI",
            "fastapi.Request",
            "fastapi.WebSocket",
            "fastapi.WebSocketDisconnect",
            "fastapi.responses.PlainTextResponse",
            "twilio_handler.TwilioHandler",
            "twilio_handler.TwilioHandler",
            "twilio_handler.TwilioHandler",
            "uvicorn"
        ],
        "classes": [
            {
                "class_name": "TwilioWebSocketManager",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": []
        }
    },
    "examples/model_providers/litellm_auto.py": {
        "file_name": "/examples/model_providers/litellm_auto.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.ModelSettings",
            "agents.Runner",
            "agents.function_tool",
            "agents.set_tracing_disabled",
            "os"
        ],
        "classes": [
            {
                "class_name": "Result",
                "methods": []
            }
        ],
        "functions": {
            "get_weather": [
                "print"
            ]
        }
    },
    "examples/model_providers/custom_example_global.py": {
        "file_name": "/examples/model_providers/custom_example_global.py",
        "imports": [
            "asyncio",
            "os",
            "openai.AsyncOpenAI",
            "agents.Agent",
            "agents.Runner",
            "agents.function_tool",
            "agents.set_default_openai_api",
            "agents.set_default_openai_client",
            "agents.set_tracing_disabled"
        ],
        "classes": [],
        "functions": {
            "get_weather": [
                "print"
            ]
        }
    },
    "examples/model_providers/litellm_provider.py": {
        "file_name": "/examples/model_providers/litellm_provider.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "agents.Agent",
            "agents.Runner",
            "agents.function_tool",
            "agents.set_tracing_disabled",
            "agents.extensions.models.litellm_model.LitellmModel",
            "argparse"
        ],
        "classes": [],
        "functions": {
            "get_weather": [
                "print"
            ]
        }
    },
    "examples/model_providers/custom_example_agent.py": {
        "file_name": "/examples/model_providers/custom_example_agent.py",
        "imports": [
            "asyncio",
            "os",
            "openai.AsyncOpenAI",
            "agents.Agent",
            "agents.OpenAIChatCompletionsModel",
            "agents.Runner",
            "agents.function_tool",
            "agents.set_tracing_disabled"
        ],
        "classes": [],
        "functions": {
            "get_weather": [
                "print"
            ]
        }
    },
    "examples/model_providers/custom_example_provider.py": {
        "file_name": "/examples/model_providers/custom_example_provider.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "os",
            "openai.AsyncOpenAI",
            "agents.Agent",
            "agents.Model",
            "agents.ModelProvider",
            "agents.OpenAIChatCompletionsModel",
            "agents.RunConfig",
            "agents.Runner",
            "agents.function_tool",
            "agents.set_tracing_disabled"
        ],
        "classes": [
            {
                "class_name": "CustomModelProvider",
                "methods": [
                    "get_model"
                ]
            }
        ],
        "functions": {
            "get_model": [
                "OpenAIChatCompletionsModel"
            ],
            "get_weather": [
                "print"
            ]
        }
    },
    "examples/basic/non_strict_output_type.py": {
        "file_name": "/examples/basic/non_strict_output_type.py",
        "imports": [
            "asyncio",
            "json",
            "dataclasses.dataclass",
            "typing.Any",
            "agents.Agent",
            "agents.AgentOutputSchema",
            "agents.AgentOutputSchemaBase",
            "agents.Runner"
        ],
        "classes": [
            {
                "class_name": "OutputType",
                "methods": []
            },
            {
                "class_name": "CustomOutputSchema",
                "methods": [
                    "is_plain_text",
                    "name",
                    "json_schema",
                    "is_strict_json_schema",
                    "validate_json"
                ]
            }
        ],
        "functions": {
            "is_plain_text": [],
            "name": [],
            "json_schema": [],
            "is_strict_json_schema": [],
            "validate_json": [
                "loads",
                "list",
                "values"
            ]
        }
    },
    "examples/basic/local_file.py": {
        "file_name": "/examples/basic/local_file.py",
        "imports": [
            "asyncio",
            "base64",
            "os",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {
            "file_to_base64": [
                "open",
                "decode",
                "b64encode",
                "read"
            ]
        }
    },
    "examples/basic/agent_lifecycle_example.py": {
        "file_name": "/examples/basic/agent_lifecycle_example.py",
        "imports": [
            "asyncio",
            "random",
            "typing.Any",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.AgentHooks",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.Tool",
            "agents.function_tool"
        ],
        "classes": [
            {
                "class_name": "CustomAgentHooks",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "FinalResult",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [],
            "random_number": [
                "randint"
            ],
            "multiply_by_two": []
        }
    },
    "examples/basic/tool_guardrails.py": {
        "file_name": "/examples/basic/tool_guardrails.py",
        "imports": [
            "asyncio",
            "json",
            "agents.Agent",
            "agents.Runner",
            "agents.ToolGuardrailFunctionOutput",
            "agents.ToolInputGuardrailData",
            "agents.ToolOutputGuardrailData",
            "agents.ToolOutputGuardrailTripwireTriggered",
            "agents.function_tool",
            "agents.tool_input_guardrail",
            "agents.tool_output_guardrail"
        ],
        "classes": [],
        "functions": {
            "send_email": [],
            "get_user_data": [],
            "get_contact_info": [],
            "reject_sensitive_words": [
                "loads",
                "ToolGuardrailFunctionOutput",
                "items",
                "lower",
                "str",
                "reject_content"
            ],
            "block_sensitive_output": [
                "lower",
                "str",
                "raise_exception",
                "ToolGuardrailFunctionOutput"
            ],
            "reject_phone_numbers": [
                "str",
                "reject_content",
                "ToolGuardrailFunctionOutput"
            ]
        }
    },
    "examples/basic/tools.py": {
        "file_name": "/examples/basic/tools.py",
        "imports": [
            "asyncio",
            "typing.Annotated",
            "pydantic.BaseModel",
            "pydantic.Field",
            "agents.Agent",
            "agents.Runner",
            "agents.function_tool"
        ],
        "classes": [
            {
                "class_name": "Weather",
                "methods": []
            }
        ],
        "functions": {
            "get_weather": [
                "print",
                "Weather"
            ]
        }
    },
    "examples/basic/hello_world_gpt_oss.py": {
        "file_name": "/examples/basic/hello_world_gpt_oss.py",
        "imports": [
            "asyncio",
            "logging",
            "openai.AsyncOpenAI",
            "agents.Agent",
            "agents.OpenAIChatCompletionsModel",
            "agents.Runner",
            "agents.set_tracing_disabled"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/basic/stream_function_call_args.py": {
        "file_name": "/examples/basic/stream_function_call_args.py",
        "imports": [
            "asyncio",
            "typing.Annotated",
            "typing.Any",
            "typing.Optional",
            "openai.types.responses.ResponseFunctionCallArgumentsDeltaEvent",
            "agents.Agent",
            "agents.Runner",
            "agents.function_tool"
        ],
        "classes": [],
        "functions": {
            "write_file": [],
            "create_config": []
        }
    },
    "examples/basic/stream_items.py": {
        "file_name": "/examples/basic/stream_items.py",
        "imports": [
            "asyncio",
            "random",
            "agents.Agent",
            "agents.ItemHelpers",
            "agents.Runner",
            "agents.function_tool"
        ],
        "classes": [],
        "functions": {
            "how_many_jokes": [
                "randint"
            ]
        }
    },
    "examples/basic/remote_pdf.py": {
        "file_name": "/examples/basic/remote_pdf.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/basic/previous_response_id.py": {
        "file_name": "/examples/basic/previous_response_id.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/basic/local_image.py": {
        "file_name": "/examples/basic/local_image.py",
        "imports": [
            "asyncio",
            "base64",
            "os",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {
            "image_to_base64": [
                "open",
                "decode",
                "b64encode",
                "read"
            ]
        }
    },
    "examples/basic/hello_world.py": {
        "file_name": "/examples/basic/hello_world.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/basic/lifecycle_example.py": {
        "file_name": "/examples/basic/lifecycle_example.py",
        "imports": [
            "asyncio",
            "random",
            "typing.Any",
            "typing.Optional",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.AgentHooks",
            "agents.RunContextWrapper",
            "agents.RunHooks",
            "agents.Runner",
            "agents.Tool",
            "agents.Usage",
            "agents.function_tool",
            "agents.items.ModelResponse",
            "agents.items.TResponseInputItem"
        ],
        "classes": [
            {
                "class_name": "LoggingHooks",
                "methods": []
            },
            {
                "class_name": "ExampleHooks",
                "methods": [
                    "__init__",
                    "_usage_to_str"
                ]
            },
            {
                "class_name": "FinalResult",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [],
            "_usage_to_str": [],
            "random_number": [
                "randint"
            ],
            "multiply_by_two": []
        }
    },
    "examples/basic/prompt_template.py": {
        "file_name": "/examples/basic/prompt_template.py",
        "imports": [
            "argparse",
            "asyncio",
            "random",
            "agents.Agent",
            "agents.GenerateDynamicPromptData",
            "agents.Runner"
        ],
        "classes": [
            {
                "class_name": "DynamicContext",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "choice",
                "print"
            ]
        }
    },
    "examples/basic/stream_text.py": {
        "file_name": "/examples/basic/stream_text.py",
        "imports": [
            "asyncio",
            "openai.types.responses.ResponseTextDeltaEvent",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/basic/hello_world_gpt_5.py": {
        "file_name": "/examples/basic/hello_world_gpt_5.py",
        "imports": [
            "asyncio",
            "openai.types.shared.Reasoning",
            "agents.Agent",
            "agents.ModelSettings",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/basic/remote_image.py": {
        "file_name": "/examples/basic/remote_image.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/basic/usage_tracking.py": {
        "file_name": "/examples/basic/usage_tracking.py",
        "imports": [
            "asyncio",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.Runner",
            "agents.Usage",
            "agents.function_tool"
        ],
        "classes": [
            {
                "class_name": "Weather",
                "methods": []
            }
        ],
        "functions": {
            "get_weather": [
                "Weather"
            ],
            "print_usage": [
                "print"
            ]
        }
    },
    "examples/basic/dynamic_system_prompt.py": {
        "file_name": "/examples/basic/dynamic_system_prompt.py",
        "imports": [
            "asyncio",
            "random",
            "dataclasses.dataclass",
            "typing.Literal",
            "agents.Agent",
            "agents.RunContextWrapper",
            "agents.Runner"
        ],
        "classes": [
            {
                "class_name": "CustomContext",
                "methods": []
            }
        ],
        "functions": {
            "custom_instructions": []
        }
    },
    "examples/customer_service/main.py": {
        "file_name": "/examples/customer_service/main.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "random",
            "uuid",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.HandoffOutputItem",
            "agents.ItemHelpers",
            "agents.MessageOutputItem",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.ToolCallItem",
            "agents.ToolCallOutputItem",
            "agents.TResponseInputItem",
            "agents.function_tool",
            "agents.handoff",
            "agents.trace",
            "agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX"
        ],
        "classes": [
            {
                "class_name": "AirlineAgentContext",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/mcp/git_example/main.py": {
        "file_name": "/examples/mcp/git_example/main.py",
        "imports": [
            "asyncio",
            "shutil",
            "agents.Agent",
            "agents.Runner",
            "agents.trace",
            "agents.mcp.MCPServer",
            "agents.mcp.MCPServerStdio"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/mcp/filesystem_example/main.py": {
        "file_name": "/examples/mcp/filesystem_example/main.py",
        "imports": [
            "asyncio",
            "os",
            "shutil",
            "agents.Agent",
            "agents.Runner",
            "agents.gen_trace_id",
            "agents.trace",
            "agents.mcp.MCPServer",
            "agents.mcp.MCPServerStdio"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/mcp/streamablehttp_example/main.py": {
        "file_name": "/examples/mcp/streamablehttp_example/main.py",
        "imports": [
            "asyncio",
            "os",
            "shutil",
            "subprocess",
            "time",
            "typing.Any",
            "agents.Agent",
            "agents.Runner",
            "agents.gen_trace_id",
            "agents.trace",
            "agents.mcp.MCPServer",
            "agents.mcp.MCPServerStreamableHttp",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/mcp/streamablehttp_example/server.py": {
        "file_name": "/examples/mcp/streamablehttp_example/server.py",
        "imports": [
            "random",
            "requests",
            "mcp.server.fastmcp.FastMCP"
        ],
        "classes": [],
        "functions": {
            "add": [
                "print",
                "tool"
            ],
            "get_secret_word": [
                "print",
                "choice",
                "tool"
            ],
            "get_current_weather": [
                "print",
                "get",
                "tool"
            ]
        }
    },
    "examples/mcp/prompt_server/main.py": {
        "file_name": "/examples/mcp/prompt_server/main.py",
        "imports": [
            "asyncio",
            "os",
            "shutil",
            "subprocess",
            "time",
            "typing.Any",
            "agents.Agent",
            "agents.Runner",
            "agents.gen_trace_id",
            "agents.trace",
            "agents.mcp.MCPServer",
            "agents.mcp.MCPServerStreamableHttp",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/mcp/prompt_server/server.py": {
        "file_name": "/examples/mcp/prompt_server/server.py",
        "imports": [
            "mcp.server.fastmcp.FastMCP"
        ],
        "classes": [],
        "functions": {
            "generate_code_review_instructions": [
                "print",
                "prompt"
            ]
        }
    },
    "examples/mcp/streamablehttp_custom_client_example/main.py": {
        "file_name": "/examples/mcp/streamablehttp_custom_client_example/main.py",
        "imports": [
            "asyncio",
            "os",
            "shutil",
            "subprocess",
            "time",
            "typing.Any",
            "httpx",
            "agents.Agent",
            "agents.Runner",
            "agents.gen_trace_id",
            "agents.trace",
            "agents.mcp.MCPServer",
            "agents.mcp.MCPServerStreamableHttp",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {
            "create_custom_http_client": [
                "Timeout",
                "AsyncClient"
            ]
        }
    },
    "examples/mcp/streamablehttp_custom_client_example/server.py": {
        "file_name": "/examples/mcp/streamablehttp_custom_client_example/server.py",
        "imports": [
            "random",
            "mcp.server.fastmcp.FastMCP"
        ],
        "classes": [],
        "functions": {
            "add": [
                "print",
                "tool"
            ],
            "get_secret_word": [
                "print",
                "choice",
                "tool"
            ]
        }
    },
    "examples/mcp/sse_example/main.py": {
        "file_name": "/examples/mcp/sse_example/main.py",
        "imports": [
            "asyncio",
            "os",
            "shutil",
            "subprocess",
            "time",
            "typing.Any",
            "agents.Agent",
            "agents.Runner",
            "agents.gen_trace_id",
            "agents.trace",
            "agents.mcp.MCPServer",
            "agents.mcp.MCPServerSse",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/mcp/sse_example/server.py": {
        "file_name": "/examples/mcp/sse_example/server.py",
        "imports": [
            "random",
            "requests",
            "mcp.server.fastmcp.FastMCP"
        ],
        "classes": [],
        "functions": {
            "add": [
                "print",
                "tool"
            ],
            "get_secret_word": [
                "print",
                "choice",
                "tool"
            ],
            "get_current_weather": [
                "print",
                "get",
                "tool"
            ]
        }
    },
    "examples/financial_research_agent/printer.py": {
        "file_name": "/examples/financial_research_agent/printer.py",
        "imports": [
            "typing.Any",
            "rich.console.Console",
            "rich.console.Group",
            "rich.live.Live",
            "rich.spinner.Spinner"
        ],
        "classes": [
            {
                "class_name": "Printer",
                "methods": [
                    "__init__",
                    "end",
                    "hide_done_checkmark",
                    "update_item",
                    "mark_item_done",
                    "flush"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Live",
                "set",
                "start"
            ],
            "end": [
                "stop"
            ],
            "hide_done_checkmark": [
                "add"
            ],
            "update_item": [
                "add",
                "flush"
            ],
            "mark_item_done": [
                "flush"
            ],
            "flush": [
                "items",
                "append",
                "Spinner",
                "update",
                "Group"
            ]
        }
    },
    "examples/financial_research_agent/__init__.py": {
        "file_name": "/examples/financial_research_agent/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/financial_research_agent/main.py": {
        "file_name": "/examples/financial_research_agent/main.py",
        "imports": [
            "asyncio",
            "manager.FinancialResearchManager"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/financial_research_agent/manager.py": {
        "file_name": "/examples/financial_research_agent/manager.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "time",
            "collections.abc.Sequence",
            "rich.console.Console",
            "agents.Runner",
            "agents.RunResult",
            "agents.custom_span",
            "agents.gen_trace_id",
            "agents.trace",
            "agents.financials_agent.financials_agent",
            "agents.planner_agent.FinancialSearchItem",
            "agents.planner_agent.FinancialSearchPlan",
            "agents.planner_agent.planner_agent",
            "agents.risk_agent.risk_agent",
            "agents.search_agent.search_agent",
            "agents.verifier_agent.VerificationResult",
            "agents.verifier_agent.verifier_agent",
            "agents.writer_agent.FinancialReportData",
            "agents.writer_agent.writer_agent",
            "printer.Printer"
        ],
        "classes": [
            {
                "class_name": "FinancialResearchManager",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Console",
                "Printer"
            ]
        }
    },
    "examples/financial_research_agent/agents/verifier_agent.py": {
        "file_name": "/examples/financial_research_agent/agents/verifier_agent.py",
        "imports": [
            "pydantic.BaseModel",
            "agents.Agent"
        ],
        "classes": [
            {
                "class_name": "VerificationResult",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/financial_research_agent/agents/writer_agent.py": {
        "file_name": "/examples/financial_research_agent/agents/writer_agent.py",
        "imports": [
            "pydantic.BaseModel",
            "agents.Agent"
        ],
        "classes": [
            {
                "class_name": "FinancialReportData",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/financial_research_agent/agents/financials_agent.py": {
        "file_name": "/examples/financial_research_agent/agents/financials_agent.py",
        "imports": [
            "pydantic.BaseModel",
            "agents.Agent"
        ],
        "classes": [
            {
                "class_name": "AnalysisSummary",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/financial_research_agent/agents/__init__.py": {
        "file_name": "/examples/financial_research_agent/agents/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/financial_research_agent/agents/planner_agent.py": {
        "file_name": "/examples/financial_research_agent/agents/planner_agent.py",
        "imports": [
            "pydantic.BaseModel",
            "agents.Agent"
        ],
        "classes": [
            {
                "class_name": "FinancialSearchItem",
                "methods": []
            },
            {
                "class_name": "FinancialSearchPlan",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/financial_research_agent/agents/search_agent.py": {
        "file_name": "/examples/financial_research_agent/agents/search_agent.py",
        "imports": [
            "agents.Agent",
            "agents.WebSearchTool",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/financial_research_agent/agents/risk_agent.py": {
        "file_name": "/examples/financial_research_agent/agents/risk_agent.py",
        "imports": [
            "pydantic.BaseModel",
            "agents.Agent"
        ],
        "classes": [
            {
                "class_name": "AnalysisSummary",
                "methods": []
            }
        ],
        "functions": {}
    },
    "examples/tools/file_search.py": {
        "file_name": "/examples/tools/file_search.py",
        "imports": [
            "asyncio",
            "openai.OpenAI",
            "agents.Agent",
            "agents.FileSearchTool",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/tools/web_search_filters.py": {
        "file_name": "/examples/tools/web_search_filters.py",
        "imports": [
            "asyncio",
            "datetime.datetime",
            "openai.types.responses.web_search_tool.Filters",
            "openai.types.shared.reasoning.Reasoning",
            "agents.Agent",
            "agents.ModelSettings",
            "agents.Runner",
            "agents.WebSearchTool",
            "agents.trace"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/tools/image_generator.py": {
        "file_name": "/examples/tools/image_generator.py",
        "imports": [
            "asyncio",
            "base64",
            "os",
            "subprocess",
            "sys",
            "tempfile",
            "agents.Agent",
            "agents.ImageGenerationTool",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [],
        "functions": {
            "open_file": [
                "startswith",
                "run",
                "startfile",
                "print"
            ]
        }
    },
    "examples/tools/web_search.py": {
        "file_name": "/examples/tools/web_search.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner",
            "agents.WebSearchTool",
            "agents.trace"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/tools/computer_use.py": {
        "file_name": "/examples/tools/computer_use.py",
        "imports": [
            "asyncio",
            "base64",
            "typing.Literal",
            "typing.Union",
            "playwright.async_api.Browser",
            "playwright.async_api.Page",
            "playwright.async_api.Playwright",
            "playwright.async_api.async_playwright",
            "agents.Agent",
            "agents.AsyncComputer",
            "agents.Button",
            "agents.ComputerTool",
            "agents.Environment",
            "agents.ModelSettings",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [
            {
                "class_name": "LocalPlaywrightComputer",
                "methods": [
                    "__init__",
                    "playwright",
                    "browser",
                    "page",
                    "environment",
                    "dimensions"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "playwright": [],
            "browser": [],
            "page": [],
            "environment": [],
            "dimensions": []
        }
    },
    "examples/tools/code_interpreter.py": {
        "file_name": "/examples/tools/code_interpreter.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.CodeInterpreterTool",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/tools/local_shell.py": {
        "file_name": "/examples/tools/local_shell.py",
        "imports": [
            "asyncio",
            "os",
            "subprocess",
            "agents.Agent",
            "agents.LocalShellCommandRequest",
            "agents.LocalShellTool",
            "agents.Runner",
            "agents.trace"
        ],
        "classes": [],
        "functions": {
            "shell_executor": [
                "run",
                "getcwd",
                "str"
            ]
        }
    },
    "examples/voice/__init__.py": {
        "file_name": "/examples/voice/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/voice/streamed/my_workflow.py": {
        "file_name": "/examples/voice/streamed/my_workflow.py",
        "imports": [
            "random",
            "collections.abc.AsyncIterator",
            "typing.Callable",
            "agents.Agent",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.function_tool",
            "agents.extensions.handoff_prompt.prompt_with_handoff_instructions",
            "agents.voice.VoiceWorkflowBase",
            "agents.voice.VoiceWorkflowHelper"
        ],
        "classes": [
            {
                "class_name": "MyWorkflow",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "get_weather": [
                "print",
                "choice"
            ],
            "__init__": [
                "lower"
            ]
        }
    },
    "examples/voice/streamed/__init__.py": {
        "file_name": "/examples/voice/streamed/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/voice/streamed/main.py": {
        "file_name": "/examples/voice/streamed/main.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "typing.TYPE_CHECKING",
            "numpy",
            "sounddevice",
            "textual.events",
            "textual.app.App",
            "textual.app.ComposeResult",
            "textual.containers.Container",
            "textual.reactive.reactive",
            "textual.widgets.Button",
            "textual.widgets.RichLog",
            "textual.widgets.Static",
            "typing_extensions.override",
            "agents.voice.StreamedAudioInput",
            "agents.voice.VoicePipeline",
            "my_workflow.MyWorkflow",
            "my_workflow.MyWorkflow",
            "my_workflow.MyWorkflow"
        ],
        "classes": [
            {
                "class_name": "Header",
                "methods": [
                    "render"
                ]
            },
            {
                "class_name": "AudioStatusIndicator",
                "methods": [
                    "render"
                ]
            },
            {
                "class_name": "RealtimeApp",
                "methods": [
                    "__init__",
                    "_on_transcription",
                    "compose"
                ]
            }
        ],
        "functions": {
            "render": [],
            "__init__": [
                "__init__",
                "super",
                "Event",
                "VoicePipeline",
                "MyWorkflow",
                "StreamedAudioInput",
                "OutputStream"
            ],
            "_on_transcription": [
                "write",
                "query_one"
            ],
            "compose": [
                "Container",
                "Header",
                "AudioStatusIndicator",
                "RichLog"
            ]
        }
    },
    "examples/voice/static/__init__.py": {
        "file_name": "/examples/voice/static/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "examples/voice/static/main.py": {
        "file_name": "/examples/voice/static/main.py",
        "imports": [
            "asyncio",
            "random",
            "numpy",
            "agents.Agent",
            "agents.function_tool",
            "agents.extensions.handoff_prompt.prompt_with_handoff_instructions",
            "agents.voice.AudioInput",
            "agents.voice.SingleAgentVoiceWorkflow",
            "agents.voice.SingleAgentWorkflowCallbacks",
            "agents.voice.VoicePipeline",
            "util.AudioPlayer",
            "util.record_audio"
        ],
        "classes": [
            {
                "class_name": "WorkflowCallbacks",
                "methods": [
                    "on_run"
                ]
            }
        ],
        "functions": {
            "get_weather": [
                "print",
                "choice"
            ],
            "on_run": [
                "print"
            ]
        }
    },
    "examples/voice/static/util.py": {
        "file_name": "/examples/voice/static/util.py",
        "imports": [
            "curses",
            "time",
            "numpy",
            "numpy.typing",
            "sounddevice"
        ],
        "classes": [
            {
                "class_name": "AudioPlayer",
                "methods": [
                    "__enter__",
                    "__exit__",
                    "add_audio"
                ]
            }
        ],
        "functions": {
            "_record_audio": [
                "nodelay",
                "clear",
                "addstr",
                "refresh",
                "InputStream",
                "getch",
                "ord",
                "sleep",
                "concatenate",
                "empty"
            ],
            "_audio_callback": [
                "addstr",
                "refresh",
                "append",
                "copy"
            ],
            "record_audio": [
                "wrapper"
            ],
            "__enter__": [
                "OutputStream",
                "start"
            ],
            "__exit__": [
                "stop",
                "close"
            ],
            "add_audio": [
                "write"
            ]
        }
    },
    "examples/memory/openai_session_example.py": {
        "file_name": "/examples/memory/openai_session_example.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.OpenAIConversationsSession",
            "agents.Runner"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/memory/redis_session_example.py": {
        "file_name": "/examples/memory/redis_session_example.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner",
            "agents.extensions.memory.RedisSession"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/memory/sqlite_session_example.py": {
        "file_name": "/examples/memory/sqlite_session_example.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner",
            "agents.SQLiteSession"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/memory/encrypted_session_example.py": {
        "file_name": "/examples/memory/encrypted_session_example.py",
        "imports": [
            "asyncio",
            "typing.cast",
            "agents.Agent",
            "agents.Runner",
            "agents.SQLiteSession",
            "agents.extensions.memory.EncryptedSession",
            "agents.extensions.memory.encrypt_session.EncryptedEnvelope"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/memory/advanced_sqlite_session_example.py": {
        "file_name": "/examples/memory/advanced_sqlite_session_example.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner",
            "agents.function_tool",
            "agents.extensions.memory.AdvancedSQLiteSession"
        ],
        "classes": [],
        "functions": {}
    },
    "examples/memory/sqlalchemy_session_example.py": {
        "file_name": "/examples/memory/sqlalchemy_session_example.py",
        "imports": [
            "asyncio",
            "agents.Agent",
            "agents.Runner",
            "agents.extensions.memory.sqlalchemy_session.SQLAlchemySession"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/test_agent_as_tool.py": {
        "file_name": "/tests/test_agent_as_tool.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "pytest",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputText",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.AgentBase",
            "agents.FunctionTool",
            "agents.MessageOutputItem",
            "agents.RunConfig",
            "agents.RunContextWrapper",
            "agents.RunHooks",
            "agents.Runner",
            "agents.Session",
            "agents.TResponseInputItem",
            "agents.tool_context.ToolContext"
        ],
        "classes": [
            {
                "class_name": "BoolCtx",
                "methods": []
            },
            {
                "class_name": "DummySession",
                "methods": []
            },
            {
                "class_name": "DummyResult",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": []
        }
    },
    "tests/test_tool_choice_reset.py": {
        "file_name": "/tests/test_tool_choice_reset.py",
        "imports": [
            "pytest",
            "agents.Agent",
            "agents.ModelSettings",
            "agents.Runner",
            "agents._run_impl.AgentToolUseTracker",
            "agents._run_impl.RunImpl",
            "fake_model.FakeModel",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "TestToolChoiceReset",
                "methods": [
                    "test_should_reset_tool_choice_direct"
                ]
            }
        ],
        "functions": {
            "test_should_reset_tool_choice_direct": [
                "Agent",
                "ModelSettings",
                "AgentToolUseTracker",
                "maybe_reset_tool_choice",
                "add_tool_use"
            ]
        }
    },
    "tests/test_trace_processor.py": {
        "file_name": "/tests/test_trace_processor.py",
        "imports": [
            "os",
            "time",
            "unittest.mock.MagicMock",
            "unittest.mock.patch",
            "httpx",
            "pytest",
            "agents.tracing.processor_interface.TracingProcessor",
            "agents.tracing.processors.BackendSpanExporter",
            "agents.tracing.processors.BatchTraceProcessor",
            "agents.tracing.span_data.AgentSpanData",
            "agents.tracing.spans.SpanImpl",
            "agents.tracing.traces.TraceImpl"
        ],
        "classes": [],
        "functions": {
            "get_span": [
                "SpanImpl",
                "AgentSpanData"
            ],
            "get_trace": [
                "TraceImpl"
            ],
            "mocked_exporter": [
                "MagicMock"
            ],
            "test_batch_trace_processor_on_trace_start": [
                "BatchTraceProcessor",
                "get_trace",
                "on_trace_start",
                "qsize",
                "shutdown"
            ],
            "test_batch_trace_processor_on_span_end": [
                "BatchTraceProcessor",
                "get_span",
                "on_span_end",
                "qsize",
                "shutdown"
            ],
            "test_batch_trace_processor_queue_full": [
                "BatchTraceProcessor",
                "on_trace_start",
                "get_trace",
                "full",
                "qsize",
                "on_span_end",
                "get_span",
                "shutdown"
            ],
            "test_batch_processor_doesnt_enqueue_on_trace_end_or_span_start": [
                "BatchTraceProcessor",
                "on_trace_start",
                "get_trace",
                "qsize",
                "on_span_start",
                "get_span",
                "on_span_end",
                "on_trace_end",
                "shutdown"
            ],
            "test_batch_trace_processor_force_flush": [
                "BatchTraceProcessor",
                "on_trace_start",
                "get_trace",
                "on_span_end",
                "get_span",
                "force_flush",
                "len",
                "shutdown"
            ],
            "test_batch_trace_processor_shutdown_flushes": [
                "BatchTraceProcessor",
                "on_trace_start",
                "get_trace",
                "on_span_end",
                "get_span",
                "qsize",
                "shutdown",
                "len"
            ],
            "test_batch_trace_processor_scheduled_export": [
                "patch",
                "BatchTraceProcessor",
                "on_span_end",
                "get_span",
                "sleep",
                "shutdown",
                "len"
            ],
            "patched_time_sleep": [
                "patch"
            ],
            "mock_processor": [
                "MagicMock"
            ],
            "test_backend_span_exporter_no_items": [
                "BackendSpanExporter",
                "export",
                "assert_not_called",
                "close",
                "patch"
            ],
            "test_backend_span_exporter_no_api_key": [
                "dict",
                "BackendSpanExporter",
                "export",
                "get_span",
                "mock_processor",
                "assert_not_called",
                "close",
                "patch"
            ],
            "test_backend_span_exporter_2xx_success": [
                "MagicMock",
                "BackendSpanExporter",
                "export",
                "get_span",
                "mock_processor",
                "get_trace",
                "assert_called_once",
                "close",
                "patch"
            ],
            "test_backend_span_exporter_4xx_client_error": [
                "MagicMock",
                "BackendSpanExporter",
                "export",
                "get_span",
                "mock_processor",
                "assert_called_once",
                "close",
                "patch"
            ],
            "test_backend_span_exporter_5xx_retry": [
                "MagicMock",
                "BackendSpanExporter",
                "export",
                "get_span",
                "mock_processor",
                "close",
                "patch"
            ],
            "test_backend_span_exporter_request_error": [
                "RequestError",
                "BackendSpanExporter",
                "export",
                "get_span",
                "mock_processor",
                "close",
                "patch"
            ],
            "test_backend_span_exporter_close": [
                "BackendSpanExporter",
                "close",
                "assert_called_once",
                "patch"
            ]
        }
    },
    "tests/test_visualization.py": {
        "file_name": "/tests/test_visualization.py",
        "imports": [
            "sys",
            "unittest.mock.Mock",
            "graphviz",
            "pytest",
            "agents.Agent",
            "agents.extensions.visualization.draw_graph",
            "agents.extensions.visualization.get_all_edges",
            "agents.extensions.visualization.get_all_nodes",
            "agents.extensions.visualization.get_main_graph",
            "agents.handoffs.Handoff",
            "mcp.helpers.FakeMCPServer"
        ],
        "classes": [],
        "functions": {
            "mock_agent": [
                "Mock",
                "FakeMCPServer"
            ],
            "test_get_main_graph": [
                "get_main_graph",
                "print",
                "_assert_mcp_nodes"
            ],
            "test_get_all_nodes": [
                "get_all_nodes",
                "_assert_mcp_nodes"
            ],
            "test_get_all_edges": [
                "get_all_edges",
                "_assert_mcp_edges"
            ],
            "test_draw_graph": [
                "draw_graph",
                "isinstance",
                "_assert_mcp_nodes"
            ],
            "_assert_mcp_nodes": [],
            "_assert_mcp_edges": [],
            "test_cycle_detection": [
                "Agent",
                "append",
                "get_all_nodes",
                "get_all_edges",
                "count"
            ]
        }
    },
    "tests/testing_processor.py": {
        "file_name": "/tests/testing_processor.py",
        "imports": [
            "__future__.annotations",
            "threading",
            "datetime.datetime",
            "typing.Any",
            "typing.Literal",
            "agents.tracing.Span",
            "agents.tracing.Trace",
            "agents.tracing.TracingProcessor"
        ],
        "classes": [
            {
                "class_name": "SpanProcessorForTests",
                "methods": [
                    "__init__",
                    "on_trace_start",
                    "on_trace_end",
                    "on_span_start",
                    "on_span_end",
                    "get_ordered_spans",
                    "get_traces",
                    "clear",
                    "shutdown",
                    "force_flush"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Lock"
            ],
            "on_trace_start": [
                "append"
            ],
            "on_trace_end": [
                "append"
            ],
            "on_span_start": [
                "append"
            ],
            "on_span_end": [
                "append"
            ],
            "get_ordered_spans": [
                "export",
                "sorted"
            ],
            "get_traces": [
                "export"
            ],
            "clear": [
                "clear"
            ],
            "shutdown": [],
            "force_flush": [],
            "fetch_ordered_spans": [
                "get_ordered_spans"
            ],
            "fetch_traces": [
                "get_traces"
            ],
            "fetch_events": [],
            "assert_no_spans": [
                "fetch_ordered_spans",
                "AssertionError",
                "len"
            ],
            "assert_no_traces": [
                "fetch_traces",
                "AssertionError",
                "len",
                "assert_no_spans"
            ],
            "fetch_normalized_spans": [
                "fetch_traces",
                "export",
                "pop",
                "startswith",
                "items",
                "append",
                "fetch_ordered_spans",
                "fromisoformat",
                "setdefault"
            ]
        }
    },
    "tests/test_pretty_print.py": {
        "file_name": "/tests/test_pretty_print.py",
        "imports": [
            "json",
            "pytest",
            "inline_snapshot.snapshot",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.Runner",
            "agents.agent_output._WRAPPER_DICT_KEY",
            "agents.util._pretty_print.pretty_print_result",
            "agents.util._pretty_print.pretty_print_run_result_streaming",
            "tests.fake_model.FakeModel",
            "test_responses.get_final_output_message",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {}
    },
    "tests/test_max_turns.py": {
        "file_name": "/tests/test_max_turns.py",
        "imports": [
            "__future__.annotations",
            "json",
            "pytest",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.MaxTurnsExceeded",
            "agents.Runner",
            "fake_model.FakeModel",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {}
    },
    "tests/test_call_model_input_filter_unit.py": {
        "file_name": "/tests/test_call_model_input_filter_unit.py",
        "imports": [
            "__future__.annotations",
            "sys",
            "pathlib.Path",
            "typing.Any",
            "pytest",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputText",
            "fake_model.FakeModel",
            "agents.agent.Agent",
            "agents.exceptions.UserError",
            "agents.run.CallModelData",
            "agents.run.ModelInputData",
            "agents.run.RunConfig",
            "agents.run.Runner"
        ],
        "classes": [],
        "functions": {
            "filter_fn": [
                "list",
                "ModelInputData"
            ],
            "invalid_filter": []
        }
    },
    "tests/test_logprobs.py": {
        "file_name": "/tests/test_logprobs.py",
        "imports": [
            "pytest",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.OpenAIResponsesModel"
        ],
        "classes": [
            {
                "class_name": "DummyResponses",
                "methods": []
            },
            {
                "class_name": "DummyResponse",
                "methods": []
            },
            {
                "class_name": "DummyClient",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "DummyResponses"
            ]
        }
    },
    "tests/test_strict_schema_oneof.py": {
        "file_name": "/tests/test_strict_schema_oneof.py",
        "imports": [
            "typing.Annotated",
            "typing.Literal",
            "typing.Union",
            "pydantic.BaseModel",
            "pydantic.Field",
            "agents.agent_output.AgentOutputSchema",
            "agents.strict_schema.ensure_strict_json_schema"
        ],
        "classes": [
            {
                "class_name": "FruitArgs",
                "methods": []
            },
            {
                "class_name": "FoodArgs",
                "methods": []
            },
            {
                "class_name": "BuyFruitStep",
                "methods": []
            },
            {
                "class_name": "BuyFoodStep",
                "methods": []
            },
            {
                "class_name": "Actions",
                "methods": []
            }
        ],
        "functions": {
            "test_oneof_converted_to_anyof": [
                "ensure_strict_json_schema"
            ],
            "test_nested_oneof_in_array_items": [
                "ensure_strict_json_schema"
            ],
            "test_discriminated_union_with_pydantic": [
                "Field",
                "AgentOutputSchema",
                "json_schema",
                "len"
            ],
            "test_oneof_merged_with_existing_anyof": [
                "ensure_strict_json_schema"
            ],
            "test_discriminator_preserved": [
                "ensure_strict_json_schema"
            ],
            "test_deeply_nested_oneof": [
                "ensure_strict_json_schema"
            ],
            "test_oneof_with_refs": [
                "ensure_strict_json_schema"
            ]
        }
    },
    "tests/test_tool_guardrails.py": {
        "file_name": "/tests/test_tool_guardrails.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "typing.Any",
            "pytest",
            "agents.Agent",
            "agents.ToolGuardrailFunctionOutput",
            "agents.ToolInputGuardrail",
            "agents.ToolInputGuardrailData",
            "agents.ToolInputGuardrailTripwireTriggered",
            "agents.ToolOutputGuardrail",
            "agents.ToolOutputGuardrailData",
            "agents.ToolOutputGuardrailTripwireTriggered",
            "agents.UserError",
            "agents.tool_context.ToolContext",
            "agents.tool_guardrails.tool_input_guardrail",
            "agents.tool_guardrails.tool_output_guardrail"
        ],
        "classes": [],
        "functions": {
            "get_mock_tool_context": [
                "ToolContext"
            ],
            "get_sync_input_guardrail": [],
            "sync_guardrail": [
                "raise_exception",
                "allow"
            ],
            "get_async_input_guardrail": [
                "raise_exception",
                "allow"
            ],
            "get_sync_output_guardrail": [],
            "get_async_output_guardrail": [
                "raise_exception",
                "allow"
            ],
            "decorated_input_guardrail": [
                "allow"
            ],
            "decorated_named_input_guardrail": [
                "allow",
                "tool_input_guardrail"
            ],
            "decorated_output_guardrail": [
                "allow"
            ],
            "decorated_named_output_guardrail": [
                "allow",
                "tool_output_guardrail"
            ],
            "check_for_password": [
                "lower",
                "reject_content",
                "ToolGuardrailFunctionOutput"
            ],
            "check_for_ssn": [
                "lower",
                "str",
                "raise_exception",
                "ToolGuardrailFunctionOutput"
            ],
            "test_tool_input_guardrail_exception": [
                "raise_exception",
                "ToolInputGuardrailTripwireTriggered",
                "str"
            ],
            "test_guardrail": [
                "raise_exception"
            ],
            "test_tool_output_guardrail_exception": [
                "raise_exception",
                "ToolOutputGuardrailTripwireTriggered",
                "str"
            ],
            "allow_guardrail": [
                "allow"
            ],
            "reject_content_guardrail": [
                "reject_content"
            ],
            "raise_exception_guardrail": [
                "raise_exception"
            ],
            "mixed_guardrail": [
                "lower",
                "str",
                "raise_exception",
                "reject_content",
                "ToolGuardrailFunctionOutput"
            ],
            "test_guard": [
                "allow"
            ]
        }
    },
    "tests/test_debug.py": {
        "file_name": "/tests/test_debug.py",
        "imports": [
            "os",
            "unittest.mock.patch",
            "agents._debug._load_dont_log_model_data",
            "agents._debug._load_dont_log_tool_data"
        ],
        "classes": [],
        "functions": {
            "test_dont_log_model_data": [
                "_load_dont_log_model_data",
                "dict"
            ],
            "test_dont_log_model_data_0": [
                "_load_dont_log_model_data",
                "dict"
            ],
            "test_dont_log_model_data_1": [
                "_load_dont_log_model_data",
                "dict"
            ],
            "test_dont_log_model_data_true": [
                "_load_dont_log_model_data",
                "dict"
            ],
            "test_dont_log_model_data_false": [
                "_load_dont_log_model_data",
                "dict"
            ],
            "test_dont_log_tool_data": [
                "_load_dont_log_tool_data",
                "dict"
            ],
            "test_dont_log_tool_data_0": [
                "_load_dont_log_tool_data",
                "dict"
            ],
            "test_dont_log_tool_data_1": [
                "_load_dont_log_tool_data",
                "dict"
            ],
            "test_dont_log_tool_data_true": [
                "_load_dont_log_tool_data",
                "dict"
            ],
            "test_dont_log_tool_data_false": [
                "_load_dont_log_tool_data",
                "dict"
            ]
        }
    },
    "tests/test_agent_llm_hooks.py": {
        "file_name": "/tests/test_agent_llm_hooks.py",
        "imports": [
            "collections.defaultdict",
            "typing.Any",
            "typing.Optional",
            "pytest",
            "agents.agent.Agent",
            "agents.items.ItemHelpers",
            "agents.items.ModelResponse",
            "agents.items.TResponseInputItem",
            "agents.lifecycle.AgentHooks",
            "agents.run.Runner",
            "agents.run_context.RunContextWrapper",
            "agents.run_context.TContext",
            "agents.tool.Tool",
            "fake_model.FakeModel",
            "test_responses.get_function_tool",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "AgentHooksForTests",
                "methods": [
                    "__init__",
                    "reset"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "defaultdict"
            ],
            "reset": [
                "clear"
            ],
            "test_sync_agent_hook_with_llm": [
                "AgentHooksForTests",
                "FakeModel",
                "Agent",
                "get_function_tool",
                "set_next_output",
                "get_text_message",
                "run_sync"
            ]
        }
    },
    "tests/test_openai_responses_converter.py": {
        "file_name": "/tests/test_openai_responses_converter.py",
        "imports": [
            "pytest",
            "openai.omit",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.AgentOutputSchema",
            "agents.Computer",
            "agents.ComputerTool",
            "agents.FileSearchTool",
            "agents.Handoff",
            "agents.Tool",
            "agents.UserError",
            "agents.WebSearchTool",
            "agents.function_tool",
            "agents.handoff",
            "agents.models.openai_responses.Converter"
        ],
        "classes": [
            {
                "class_name": "OutModel",
                "methods": []
            },
            {
                "class_name": "DummyComputer",
                "methods": [
                    "environment",
                    "dimensions",
                    "screenshot",
                    "click",
                    "double_click",
                    "scroll",
                    "type",
                    "wait",
                    "move",
                    "keypress",
                    "drag"
                ]
            }
        ],
        "functions": {
            "test_convert_tool_choice_standard_values": [
                "convert_tool_choice"
            ],
            "test_get_response_format_plain_text_and_json_schema": [
                "get_response_format",
                "AgentOutputSchema",
                "isinstance",
                "get",
                "is_strict_json_schema"
            ],
            "test_convert_tools_basic_types_and_includes": [
                "function_tool",
                "FileSearchTool",
                "WebSearchTool",
                "ComputerTool",
                "DummyComputer",
                "convert_tools",
                "isinstance",
                "len",
                "next",
                "get",
                "raises"
            ],
            "environment": [],
            "dimensions": [],
            "screenshot": [],
            "click": [],
            "double_click": [],
            "scroll": [],
            "type": [],
            "wait": [],
            "move": [],
            "keypress": [],
            "drag": [],
            "test_convert_tools_includes_handoffs": [
                "Agent",
                "handoff",
                "convert_tools",
                "isinstance",
                "len",
                "get",
                "default_tool_name",
                "default_tool_description"
            ]
        }
    },
    "tests/test_cancel_streaming.py": {
        "file_name": "/tests/test_cancel_streaming.py",
        "imports": [
            "json",
            "pytest",
            "agents.Agent",
            "agents.Runner",
            "fake_model.FakeModel",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/fake_model.py": {
        "file_name": "/tests/fake_model.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.ResponseContentPartAddedEvent",
            "openai.types.responses.ResponseContentPartDoneEvent",
            "openai.types.responses.ResponseCreatedEvent",
            "openai.types.responses.ResponseFunctionCallArgumentsDeltaEvent",
            "openai.types.responses.ResponseFunctionCallArgumentsDoneEvent",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseInProgressEvent",
            "openai.types.responses.ResponseOutputItemAddedEvent",
            "openai.types.responses.ResponseOutputItemDoneEvent",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.ResponseReasoningSummaryPartAddedEvent",
            "openai.types.responses.ResponseReasoningSummaryPartDoneEvent",
            "openai.types.responses.ResponseReasoningSummaryTextDeltaEvent",
            "openai.types.responses.ResponseReasoningSummaryTextDoneEvent",
            "openai.types.responses.ResponseTextDeltaEvent",
            "openai.types.responses.ResponseTextDoneEvent",
            "openai.types.responses.ResponseUsage",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "openai.types.responses.response_reasoning_summary_part_added_event.Part",
            "openai.types.responses.response_reasoning_summary_part_done_event.Part",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "agents.agent_output.AgentOutputSchemaBase",
            "agents.handoffs.Handoff",
            "agents.items.ModelResponse",
            "agents.items.TResponseInputItem",
            "agents.items.TResponseOutputItem",
            "agents.items.TResponseStreamEvent",
            "agents.model_settings.ModelSettings",
            "agents.models.interface.Model",
            "agents.models.interface.ModelTracing",
            "agents.tool.Tool",
            "agents.tracing.SpanError",
            "agents.tracing.generation_span",
            "agents.usage.Usage"
        ],
        "classes": [
            {
                "class_name": "FakeModel",
                "methods": [
                    "__init__",
                    "set_hardcoded_usage",
                    "set_next_output",
                    "add_multiple_turn_outputs",
                    "get_next_output"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "set_hardcoded_usage": [],
            "set_next_output": [
                "append"
            ],
            "add_multiple_turn_outputs": [
                "extend"
            ],
            "get_next_output": [
                "pop"
            ],
            "get_response_obj": [
                "Response",
                "ResponseUsage",
                "InputTokensDetails",
                "OutputTokensDetails"
            ]
        }
    },
    "tests/test_run_step_execution.py": {
        "file_name": "/tests/test_run_step_execution.py",
        "imports": [
            "__future__.annotations",
            "json",
            "typing.Any",
            "pytest",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.MessageOutputItem",
            "agents.ModelResponse",
            "agents.RunConfig",
            "agents.RunContextWrapper",
            "agents.RunHooks",
            "agents.RunItem",
            "agents.ToolCallItem",
            "agents.ToolCallOutputItem",
            "agents.TResponseInputItem",
            "agents.Usage",
            "agents._run_impl.NextStepFinalOutput",
            "agents._run_impl.NextStepHandoff",
            "agents._run_impl.NextStepRunAgain",
            "agents._run_impl.RunImpl",
            "agents._run_impl.SingleStepResult",
            "agents.run.AgentRunner",
            "agents.tool.function_tool",
            "agents.tool_context.ToolContext",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_input_item",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "assert_item_is_message": [
                "isinstance"
            ],
            "assert_item_is_function_tool_call": [
                "isinstance"
            ],
            "assert_item_is_function_tool_call_output": [
                "isinstance"
            ]
        }
    },
    "tests/test_function_schema.py": {
        "file_name": "/tests/test_function_schema.py",
        "imports": [
            "collections.abc.Mapping",
            "enum.Enum",
            "typing.Annotated",
            "typing.Any",
            "typing.Literal",
            "pytest",
            "pydantic.BaseModel",
            "pydantic.Field",
            "pydantic.ValidationError",
            "typing_extensions.TypedDict",
            "agents.RunContextWrapper",
            "agents.exceptions.UserError",
            "agents.function_schema.function_schema"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            },
            {
                "class_name": "InnerModel",
                "methods": []
            },
            {
                "class_name": "OuterModel",
                "methods": []
            },
            {
                "class_name": "MyClass",
                "methods": [
                    "foo",
                    "foo_ctx",
                    "bar",
                    "bar_ctx",
                    "baz",
                    "baz_ctx"
                ]
            },
            {
                "class_name": "MyEnum",
                "methods": []
            }
        ],
        "functions": {
            "no_args_function": [],
            "test_no_args_function": [
                "function_schema",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "no_args_function"
            ],
            "no_args_function_with_context": [],
            "test_no_args_function_with_context": [
                "function_schema",
                "RunContextWrapper",
                "params_pydantic_model",
                "to_call_args",
                "no_args_function_with_context"
            ],
            "simple_function": [],
            "test_simple_function": [
                "function_schema",
                "isinstance",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "simple_function",
                "raises"
            ],
            "varargs_function": [],
            "test_varargs_function": [
                "function_schema",
                "isinstance",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "varargs_function",
                "raises"
            ],
            "complex_args_function": [],
            "test_nested_data_function": [
                "function_schema",
                "isinstance",
                "get",
                "OuterModel",
                "InnerModel",
                "Foo",
                "model_dump",
                "params_pydantic_model",
                "to_call_args",
                "complex_args_function"
            ],
            "complex_args_and_docs_function": [],
            "test_complex_args_and_docs_function": [
                "function_schema",
                "isinstance",
                "get",
                "OuterModel",
                "InnerModel",
                "Foo",
                "model_dump",
                "params_pydantic_model",
                "to_call_args",
                "complex_args_and_docs_function",
                "raises"
            ],
            "function_with_context": [],
            "test_function_with_context": [
                "function_schema",
                "RunContextWrapper",
                "params_pydantic_model",
                "to_call_args",
                "function_with_context"
            ],
            "foo": [],
            "foo_ctx": [],
            "bar": [],
            "bar_ctx": [],
            "baz": [],
            "baz_ctx": [],
            "test_class_based_functions": [
                "RunContextWrapper",
                "MyClass",
                "function_schema",
                "isinstance",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "foo",
                "foo_ctx",
                "bar",
                "bar_ctx",
                "baz",
                "baz_ctx"
            ],
            "enum_and_literal_function": [],
            "test_enum_and_literal_function": [
                "function_schema",
                "isinstance",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "enum_and_literal_function",
                "raises"
            ],
            "test_run_context_in_non_first_position_raises_value_error": [
                "raises",
                "function_schema"
            ],
            "func": [
                "sum"
            ],
            "test_var_positional_tuple_annotation": [
                "function_schema",
                "get"
            ],
            "test_var_keyword_dict_annotation": [
                "function_schema",
                "get"
            ],
            "test_schema_with_mapping_raises_strict_mode_error": [
                "raises",
                "function_schema"
            ],
            "func_with_mapping": [],
            "test_name_override_without_docstring": [
                "function_schema",
                "get"
            ],
            "test_function_with_field_required_constraints": [
                "function_schema",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "func_with_field_constraints",
                "raises"
            ],
            "func_with_field_constraints": [
                "Field"
            ],
            "test_function_with_field_optional_with_default": [
                "function_schema",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "func_with_optional_field",
                "raises"
            ],
            "func_with_optional_field": [
                "Field"
            ],
            "test_function_uses_annotated_descriptions_without_docstring": [
                "function_schema",
                "get"
            ],
            "add": [],
            "test_function_prefers_docstring_descriptions_over_annotated_metadata": [
                "function_schema",
                "get"
            ],
            "test_function_with_field_description_merge": [
                "function_schema",
                "get"
            ],
            "func_with_field_and_docstring": [
                "Field"
            ],
            "func_with_field_desc_only": [
                "Field"
            ],
            "test_function_with_field_description_only": [
                "function_schema",
                "get"
            ],
            "test_function_with_field_string_constraints": [
                "function_schema",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "func_with_string_field",
                "raises"
            ],
            "func_with_string_field": [
                "Field"
            ],
            "test_function_with_field_multiple_constraints": [
                "function_schema",
                "get",
                "params_pydantic_model",
                "to_call_args",
                "func_with_multiple_field_constraints",
                "raises"
            ],
            "func_with_multiple_field_constraints": [
                "Field"
            ]
        }
    },
    "tests/test_agent_tracing.py": {
        "file_name": "/tests/test_agent_tracing.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "pytest",
            "inline_snapshot.snapshot",
            "agents.Agent",
            "agents.RunConfig",
            "agents.Runner",
            "agents.trace",
            "fake_model.FakeModel",
            "test_responses.get_text_message",
            "testing_processor.assert_no_traces",
            "testing_processor.fetch_normalized_spans"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/test_agent_config.py": {
        "file_name": "/tests/test_agent_config.py",
        "imports": [
            "pytest",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.AgentOutputSchema",
            "agents.Handoff",
            "agents.RunContextWrapper",
            "agents.handoff",
            "agents.lifecycle.AgentHooksBase",
            "agents.model_settings.ModelSettings",
            "agents.run.AgentRunner"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            },
            {
                "class_name": "TestAgentValidation",
                "methods": [
                    "test_name_validation_critical_cases",
                    "test_tool_use_behavior_dict_validation",
                    "test_hooks_validation_python39_compatibility",
                    "test_list_field_validation",
                    "test_model_settings_validation"
                ]
            },
            {
                "class_name": "MockHooks",
                "methods": []
            }
        ],
        "functions": {
            "sync_instructions": [],
            "test_name_validation_critical_cases": [
                "raises",
                "Agent"
            ],
            "test_tool_use_behavior_dict_validation": [
                "Agent",
                "raises"
            ],
            "test_hooks_validation_python39_compatibility": [
                "Agent",
                "MockHooks",
                "raises"
            ],
            "test_list_field_validation": [
                "raises",
                "Agent"
            ],
            "test_model_settings_validation": [
                "Agent",
                "ModelSettings",
                "raises"
            ]
        }
    },
    "tests/test_local_shell_tool.py": {
        "file_name": "/tests/test_local_shell_tool.py",
        "imports": [
            "typing.Any",
            "typing.cast",
            "pytest",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.response_output_item.LocalShellCall",
            "openai.types.responses.response_output_item.LocalShellCallAction",
            "agents.Agent",
            "agents.LocalShellCommandRequest",
            "agents.LocalShellTool",
            "agents.RunConfig",
            "agents.RunContextWrapper",
            "agents.RunHooks",
            "agents.Runner",
            "agents._run_impl.LocalShellAction",
            "agents._run_impl.ToolRunLocalShellCall",
            "agents.items.ToolCallOutputItem",
            "fake_model.FakeModel",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "RecordingLocalShellExecutor",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "__call__": [
                "append"
            ]
        }
    },
    "tests/test_openai_chatcompletions_converter.py": {
        "file_name": "/tests/test_openai_chatcompletions_converter.py",
        "imports": [
            "__future__.annotations",
            "typing.Literal",
            "typing.cast",
            "pytest",
            "openai.omit",
            "openai.types.chat.ChatCompletionMessage",
            "openai.types.chat.ChatCompletionMessageFunctionToolCall",
            "openai.types.chat.chat_completion_message_tool_call.Function",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseFunctionToolCallParam",
            "openai.types.responses.ResponseInputTextParam",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.response_input_item_param.FunctionCallOutput",
            "agents.agent_output.AgentOutputSchema",
            "agents.exceptions.UserError",
            "agents.items.TResponseInputItem",
            "agents.models.chatcmpl_converter.Converter",
            "agents.models.fake_id.FAKE_RESPONSES_ID"
        ],
        "classes": [
            {
                "class_name": "TestObject",
                "methods": []
            }
        ],
        "functions": {
            "test_message_to_output_items_with_text_only": [
                "ChatCompletionMessage",
                "message_to_output_items",
                "len",
                "cast"
            ],
            "test_message_to_output_items_with_refusal": [
                "ChatCompletionMessage",
                "message_to_output_items",
                "len",
                "cast"
            ],
            "test_message_to_output_items_with_tool_call": [
                "ChatCompletionMessageFunctionToolCall",
                "Function",
                "ChatCompletionMessage",
                "message_to_output_items",
                "len",
                "cast",
                "isinstance"
            ],
            "test_items_to_messages_with_string_user_content": [
                "items_to_messages",
                "isinstance",
                "len"
            ],
            "test_items_to_messages_with_easy_input_message": [
                "items_to_messages",
                "len"
            ],
            "test_items_to_messages_with_output_message_and_function_call": [
                "ResponseOutputText",
                "ResponseOutputRefusal",
                "ResponseOutputMessage",
                "model_dump",
                "items_to_messages",
                "len",
                "get",
                "isinstance"
            ],
            "test_convert_tool_choice_handles_standard_and_named_options": [
                "convert_tool_choice",
                "isinstance"
            ],
            "test_convert_response_format_returns_not_given_for_plain_text_and_dict_for_schemas": [
                "convert_response_format",
                "AgentOutputSchema",
                "isinstance",
                "is_strict_json_schema",
                "json_schema"
            ],
            "test_items_to_messages_with_function_output_item": [
                "items_to_messages",
                "len"
            ],
            "test_extract_all_and_text_content_for_strings_and_lists": [
                "extract_all_content",
                "extract_text_content",
                "isinstance",
                "len",
                "all"
            ],
            "test_items_to_messages_handles_system_and_developer_roles": [
                "items_to_messages",
                "len"
            ],
            "test_maybe_input_message_allows_message_typed_dict": [
                "maybe_input_message",
                "items_to_messages",
                "len"
            ],
            "test_tool_call_conversion": [
                "ResponseFunctionToolCallParam",
                "items_to_messages",
                "len",
                "get",
                "list"
            ],
            "test_input_message_with_all_roles": [
                "cast",
                "maybe_input_message",
                "items_to_messages",
                "len",
                "parametrize"
            ],
            "test_item_reference_errors": [
                "raises",
                "items_to_messages"
            ],
            "test_unknown_object_errors": [
                "raises",
                "items_to_messages",
                "TestObject"
            ],
            "test_assistant_messages_in_history": [
                "items_to_messages",
                "len"
            ]
        }
    },
    "tests/test_agent_instructions_signature.py": {
        "file_name": "/tests/test_agent_instructions_signature.py",
        "imports": [
            "unittest.mock.Mock",
            "pytest",
            "agents.Agent",
            "agents.RunContextWrapper"
        ],
        "classes": [
            {
                "class_name": "TestInstructionsSignatureValidation",
                "methods": [
                    "mock_run_context"
                ]
            }
        ],
        "functions": {
            "mock_run_context": [
                "Mock"
            ],
            "valid_instructions": [],
            "invalid_instructions": [],
            "flexible_instructions": []
        }
    },
    "tests/test_agent_runner_streamed.py": {
        "file_name": "/tests/test_agent_runner_streamed.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "typing.Any",
            "typing.cast",
            "pytest",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.GuardrailFunctionOutput",
            "agents.Handoff",
            "agents.HandoffInputData",
            "agents.InputGuardrail",
            "agents.InputGuardrailTripwireTriggered",
            "agents.OutputGuardrail",
            "agents.OutputGuardrailTripwireTriggered",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.UserError",
            "agents.function_tool",
            "agents.handoff",
            "agents.items.RunItem",
            "agents.run.RunConfig",
            "agents.stream_events.AgentUpdatedStreamEvent",
            "fake_model.FakeModel",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_input_item",
            "test_responses.get_text_message",
            "utils.simple_session.SimpleListSession"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "remove_new_items": [
                "HandoffInputData"
            ],
            "invalid_input_filter": [],
            "on_input": [],
            "guardrail_function": [
                "GuardrailFunctionOutput"
            ],
            "tool2": [
                "function_tool"
            ]
        }
    },
    "tests/test_model_payload_iterators.py": {
        "file_name": "/tests/test_model_payload_iterators.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.Iterable",
            "collections.abc.Iterator",
            "typing.Any",
            "typing.cast",
            "httpx",
            "pytest",
            "openai.omit",
            "openai.types.chat.chat_completion.ChatCompletion",
            "openai.types.responses.ToolParam",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.OpenAIChatCompletionsModel",
            "agents.OpenAIResponsesModel",
            "agents.generation_span",
            "agents.models.openai_chatcompletions",
            "agents.models.openai_responses"
        ],
        "classes": [
            {
                "class_name": "_SingleUseIterable",
                "methods": [
                    "__init__",
                    "__iter__"
                ]
            },
            {
                "class_name": "DummyCompletions",
                "methods": []
            },
            {
                "class_name": "DummyClient",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyResponses",
                "methods": []
            },
            {
                "class_name": "DummyClient",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "list",
                "type",
                "DummyCompletions",
                "URL",
                "DummyResponses"
            ],
            "__iter__": [
                "RuntimeError"
            ],
            "_force_materialization": [
                "isinstance",
                "values",
                "_force_materialization",
                "list"
            ]
        }
    },
    "tests/test_doc_parsing.py": {
        "file_name": "/tests/test_doc_parsing.py",
        "imports": [
            "agents.function_schema.generate_func_documentation"
        ],
        "classes": [
            {
                "class_name": "Bar",
                "methods": [
                    "func_bar",
                    "func_baz"
                ]
            }
        ],
        "functions": {
            "func_foo_google": [],
            "func_foo_numpy": [],
            "func_foo_sphinx": [],
            "func_bar": [],
            "func_baz": [],
            "test_functions_are_ok": [
                "func_foo_google",
                "func_foo_numpy",
                "func_foo_sphinx",
                "func_bar",
                "Bar",
                "func_baz"
            ],
            "test_auto_detection": [
                "generate_func_documentation"
            ],
            "test_instance_method": [
                "Bar",
                "generate_func_documentation"
            ],
            "test_classmethod": [
                "generate_func_documentation"
            ]
        }
    },
    "tests/test_function_tool.py": {
        "file_name": "/tests/test_function_tool.py",
        "imports": [
            "json",
            "typing.Any",
            "pytest",
            "pydantic.BaseModel",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.AgentBase",
            "agents.FunctionTool",
            "agents.ModelBehaviorError",
            "agents.RunContextWrapper",
            "agents.function_tool",
            "agents.tool.default_tool_error_function",
            "agents.tool_context.ToolContext"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            },
            {
                "class_name": "Bar",
                "methods": []
            },
            {
                "class_name": "FunctionArgs",
                "methods": []
            },
            {
                "class_name": "BoolCtx",
                "methods": []
            }
        ],
        "functions": {
            "argless_function": [],
            "argless_with_context": [],
            "simple_function": [],
            "complex_args_function": [],
            "test_function_config_overrides": [
                "function_tool"
            ],
            "test_func_schema_is_strict": [
                "function_tool"
            ],
            "do_some_work": [],
            "my_func": [
                "ValueError"
            ],
            "custom_sync_error_function": [],
            "disabled_tool": [
                "function_tool"
            ],
            "another_tool": [
                "function_tool"
            ]
        }
    },
    "tests/test_function_tool_decorator.py": {
        "file_name": "/tests/test_function_tool_decorator.py",
        "imports": [
            "asyncio",
            "json",
            "typing.Any",
            "typing.Optional",
            "pytest",
            "inline_snapshot.snapshot",
            "agents.function_tool",
            "agents.run_context.RunContextWrapper",
            "agents.tool_context.ToolContext"
        ],
        "classes": [
            {
                "class_name": "DummyContext",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "ctx_wrapper": [
                "ToolContext",
                "DummyContext"
            ],
            "sync_no_context_no_args": [],
            "sync_no_context_with_args": [],
            "sync_with_context": [],
            "sync_no_context_override": [
                "function_tool"
            ],
            "will_fail_on_bad_json": [
                "function_tool"
            ],
            "sync_error_handler": [],
            "will_not_fail_on_bad_json": [
                "function_tool"
            ],
            "async_error_handler": [],
            "will_not_fail_on_bad_json_async": [
                "function_tool"
            ],
            "optional_param_function": [
                "function_tool"
            ],
            "all_optional_params_function": [
                "function_tool"
            ],
            "get_weather": []
        }
    },
    "tests/test_computer_action.py": {
        "file_name": "/tests/test_computer_action.py",
        "imports": [
            "typing.Any",
            "pytest",
            "openai.types.responses.response_computer_tool_call.ActionClick",
            "openai.types.responses.response_computer_tool_call.ActionDoubleClick",
            "openai.types.responses.response_computer_tool_call.ActionDrag",
            "openai.types.responses.response_computer_tool_call.ActionDragPath",
            "openai.types.responses.response_computer_tool_call.ActionKeypress",
            "openai.types.responses.response_computer_tool_call.ActionMove",
            "openai.types.responses.response_computer_tool_call.ActionScreenshot",
            "openai.types.responses.response_computer_tool_call.ActionScroll",
            "openai.types.responses.response_computer_tool_call.ActionType",
            "openai.types.responses.response_computer_tool_call.ActionWait",
            "openai.types.responses.response_computer_tool_call.PendingSafetyCheck",
            "openai.types.responses.response_computer_tool_call.ResponseComputerToolCall",
            "agents.Agent",
            "agents.AgentHooks",
            "agents.AsyncComputer",
            "agents.Computer",
            "agents.ComputerTool",
            "agents.RunConfig",
            "agents.RunContextWrapper",
            "agents.RunHooks",
            "agents._run_impl.ComputerAction",
            "agents._run_impl.RunImpl",
            "agents._run_impl.ToolRunComputerAction",
            "agents.items.ToolCallOutputItem",
            "agents.tool.ComputerToolSafetyCheckData"
        ],
        "classes": [
            {
                "class_name": "LoggingComputer",
                "methods": [
                    "__init__",
                    "environment",
                    "dimensions",
                    "screenshot",
                    "click",
                    "double_click",
                    "scroll",
                    "type",
                    "wait",
                    "move",
                    "keypress",
                    "drag"
                ]
            },
            {
                "class_name": "LoggingAsyncComputer",
                "methods": [
                    "__init__",
                    "environment",
                    "dimensions"
                ]
            },
            {
                "class_name": "LoggingRunHooks",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "LoggingAgentHooks",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "environment": [],
            "dimensions": [],
            "screenshot": [
                "append"
            ],
            "click": [
                "append"
            ],
            "double_click": [
                "append"
            ],
            "scroll": [
                "append"
            ],
            "type": [
                "append"
            ],
            "wait": [
                "append"
            ],
            "move": [
                "append"
            ],
            "keypress": [
                "append"
            ],
            "drag": [
                "append",
                "tuple"
            ],
            "on_sc": [
                "append"
            ]
        }
    },
    "tests/__init__.py": {
        "file_name": "/tests/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "tests/test_session.py": {
        "file_name": "/tests/test_session.py",
        "imports": [
            "asyncio",
            "tempfile",
            "pathlib.Path",
            "pytest",
            "agents.Agent",
            "agents.RunConfig",
            "agents.Runner",
            "agents.SQLiteSession",
            "agents.TResponseInputItem",
            "agents.exceptions.UserError",
            "fake_model.FakeModel",
            "test_responses.get_text_message",
            "concurrent.futures"
        ],
        "classes": [],
        "functions": {
            "_run_sync_wrapper": [
                "new_event_loop",
                "set_event_loop",
                "run_sync",
                "close"
            ],
            "filter_assistant_messages": [],
            "add_item": [
                "new_event_loop",
                "set_event_loop",
                "run_until_complete",
                "add_items",
                "close"
            ]
        }
    },
    "tests/test_run_error_details.py": {
        "file_name": "/tests/test_run_error_details.py",
        "imports": [
            "json",
            "pytest",
            "agents.Agent",
            "agents.MaxTurnsExceeded",
            "agents.RunErrorDetails",
            "agents.Runner",
            "fake_model.FakeModel",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/test_agent_clone_shallow_copy.py": {
        "file_name": "/tests/test_agent_clone_shallow_copy.py",
        "imports": [
            "agents.Agent",
            "agents.function_tool",
            "agents.handoff"
        ],
        "classes": [],
        "functions": {
            "greet": [],
            "test_agent_clone_shallow_copy": [
                "Agent",
                "handoff",
                "clone",
                "copy"
            ]
        }
    },
    "tests/test_responses_tracing.py": {
        "file_name": "/tests/test_responses_tracing.py",
        "imports": [
            "typing.Optional",
            "pytest",
            "inline_snapshot.snapshot",
            "openai.AsyncOpenAI",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.OpenAIResponsesModel",
            "agents.trace",
            "agents.tracing.span_data.ResponseSpanData",
            "tests.fake_model",
            "testing_processor.assert_no_spans",
            "testing_processor.fetch_normalized_spans",
            "testing_processor.fetch_ordered_spans"
        ],
        "classes": [
            {
                "class_name": "DummyTracing",
                "methods": [
                    "is_disabled"
                ]
            },
            {
                "class_name": "DummyUsage",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyResponse",
                "methods": [
                    "__init__",
                    "__aiter__"
                ]
            },
            {
                "class_name": "DummyStream",
                "methods": []
            },
            {
                "class_name": "DummyStream",
                "methods": []
            },
            {
                "class_name": "DummyStream",
                "methods": []
            }
        ],
        "functions": {
            "is_disabled": [],
            "__init__": [
                "InputTokensDetails",
                "OutputTokensDetails",
                "DummyUsage"
            ],
            "__aiter__": [
                "ResponseCompletedEvent",
                "get_response_obj"
            ]
        }
    },
    "tests/test_openai_responses.py": {
        "file_name": "/tests/test_openai_responses.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "pytest",
            "openai.types.responses.ResponseCompletedEvent",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.__version__",
            "agents.models.openai_responses._HEADERS_OVERRIDE",
            "agents.models.openai_responses.OpenAIResponsesModel",
            "tests.fake_model.get_response_obj"
        ],
        "classes": [
            {
                "class_name": "DummyStream",
                "methods": [
                    "__aiter__"
                ]
            },
            {
                "class_name": "DummyResponses",
                "methods": []
            },
            {
                "class_name": "DummyResponsesClient",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__aiter__": [
                "ResponseCompletedEvent",
                "get_response_obj",
                "gen"
            ],
            "__init__": [
                "DummyResponses"
            ]
        }
    },
    "tests/test_handoff_tool.py": {
        "file_name": "/tests/test_handoff_tool.py",
        "imports": [
            "inspect",
            "json",
            "typing.Any",
            "pytest",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputText",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.Handoff",
            "agents.HandoffInputData",
            "agents.MessageOutputItem",
            "agents.ModelBehaviorError",
            "agents.RunContextWrapper",
            "agents.UserError",
            "agents.handoff",
            "agents.run.AgentRunner"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "message_item": [
                "MessageOutputItem",
                "ResponseOutputMessage",
                "ResponseOutputText"
            ],
            "get_len": [
                "isinstance",
                "len"
            ],
            "_on_handoff": [],
            "test_handoff_input_data": [
                "Agent",
                "HandoffInputData",
                "RunContextWrapper",
                "get_len",
                "message_item"
            ],
            "test_handoff_input_schema_is_strict": [
                "Agent",
                "handoff",
                "items",
                "model_json_schema"
            ],
            "test_get_transfer_message_is_valid_json": [
                "Agent",
                "handoff",
                "get_transfer_message",
                "loads"
            ],
            "test_handoff_is_enabled_bool": [
                "Agent",
                "handoff"
            ],
            "always_enabled": [],
            "always_disabled": []
        }
    },
    "tests/test_reasoning_content.py": {
        "file_name": "/tests/test_reasoning_content.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "typing.cast",
            "pytest",
            "openai.types.chat.ChatCompletion",
            "openai.types.chat.ChatCompletionChunk",
            "openai.types.chat.ChatCompletionMessage",
            "openai.types.chat.chat_completion_chunk.Choice",
            "openai.types.chat.chat_completion_chunk.ChoiceDelta",
            "openai.types.completion_usage.CompletionTokensDetails",
            "openai.types.completion_usage.CompletionUsage",
            "openai.types.completion_usage.PromptTokensDetails",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.ResponseReasoningItem",
            "agents.model_settings.ModelSettings",
            "agents.models.interface.ModelTracing",
            "agents.models.openai_chatcompletions.OpenAIChatCompletionsModel",
            "agents.models.openai_provider.OpenAIProvider"
        ],
        "classes": [],
        "functions": {
            "create_content_delta": [],
            "create_reasoning_delta": [],
            "create_chunk": [
                "ChoiceDelta",
                "get",
                "cast",
                "ChatCompletionChunk",
                "Choice",
                "CompletionUsage",
                "CompletionTokensDetails",
                "PromptTokensDetails"
            ]
        }
    },
    "tests/test_anthropic_thinking_blocks.py": {
        "file_name": "/tests/test_anthropic_thinking_blocks.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "typing.cast",
            "openai.types.chat.ChatCompletionMessageToolCall",
            "openai.types.chat.chat_completion_message_tool_call.Function",
            "agents.extensions.models.litellm_model.InternalChatCompletionMessage",
            "agents.models.chatcmpl_converter.Converter"
        ],
        "classes": [],
        "functions": {
            "create_mock_anthropic_response_with_thinking": [
                "InternalChatCompletionMessage"
            ],
            "test_converter_skips_reasoning_items": [
                "items_to_messages",
                "len",
                "get",
                "isinstance"
            ],
            "test_reasoning_items_preserved_in_message_conversion": [
                "create_mock_anthropic_response_with_thinking",
                "message_to_output_items",
                "hasattr",
                "len"
            ],
            "test_anthropic_thinking_blocks_with_tool_calls": [
                "InternalChatCompletionMessage",
                "ChatCompletionMessageToolCall",
                "Function",
                "message_to_output_items",
                "hasattr",
                "len",
                "append",
                "model_dump",
                "cast",
                "items_to_messages",
                "get",
                "isinstance"
            ]
        }
    },
    "tests/test_global_hooks.py": {
        "file_name": "/tests/test_global_hooks.py",
        "imports": [
            "__future__.annotations",
            "json",
            "collections.defaultdict",
            "typing.Any",
            "pytest",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.RunContextWrapper",
            "agents.RunHooks",
            "agents.Runner",
            "agents.TContext",
            "agents.Tool",
            "fake_model.FakeModel",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "RunHooksForTests",
                "methods": [
                    "__init__",
                    "reset"
                ]
            },
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "defaultdict"
            ],
            "reset": [
                "clear"
            ]
        }
    },
    "tests/test_extended_thinking_message_order.py": {
        "file_name": "/tests/test_extended_thinking_message_order.py",
        "imports": [
            "__future__.annotations",
            "openai.types.chat.ChatCompletionMessageParam",
            "agents.extensions.models.litellm_model.LitellmModel"
        ],
        "classes": [
            {
                "class_name": "TestExtendedThinkingMessageOrder",
                "methods": [
                    "test_basic_reordering_tool_result_before_call",
                    "test_consecutive_tool_calls_get_separated",
                    "test_unmatched_tool_results_preserved",
                    "test_tool_calls_without_results_preserved",
                    "test_correctly_ordered_messages_unchanged",
                    "test_multiple_tool_calls_single_message",
                    "test_empty_messages_list",
                    "test_no_tool_messages",
                    "test_complex_mixed_scenario"
                ]
            }
        ],
        "functions": {
            "test_basic_reordering_tool_result_before_call": [
                "LitellmModel",
                "_fix_tool_message_ordering",
                "len"
            ],
            "test_consecutive_tool_calls_get_separated": [
                "LitellmModel",
                "_fix_tool_message_ordering",
                "len"
            ],
            "test_unmatched_tool_results_preserved": [
                "LitellmModel",
                "_fix_tool_message_ordering",
                "len"
            ],
            "test_tool_calls_without_results_preserved": [
                "LitellmModel",
                "_fix_tool_message_ordering",
                "len"
            ],
            "test_correctly_ordered_messages_unchanged": [
                "LitellmModel",
                "_fix_tool_message_ordering",
                "len"
            ],
            "test_multiple_tool_calls_single_message": [
                "LitellmModel",
                "_fix_tool_message_ordering",
                "len"
            ],
            "test_empty_messages_list": [
                "LitellmModel",
                "_fix_tool_message_ordering"
            ],
            "test_no_tool_messages": [
                "LitellmModel",
                "_fix_tool_message_ordering"
            ],
            "test_complex_mixed_scenario": [
                "LitellmModel",
                "_fix_tool_message_ordering",
                "len"
            ]
        }
    },
    "tests/test_extra_headers.py": {
        "file_name": "/tests/test_extra_headers.py",
        "imports": [
            "pytest",
            "openai.types.chat.chat_completion.ChatCompletion",
            "openai.types.chat.chat_completion.Choice",
            "openai.types.chat.chat_completion_message.ChatCompletionMessage",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.OpenAIChatCompletionsModel",
            "agents.OpenAIResponsesModel"
        ],
        "classes": [
            {
                "class_name": "DummyResponses",
                "methods": []
            },
            {
                "class_name": "DummyResponse",
                "methods": []
            },
            {
                "class_name": "DummyClient",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyCompletions",
                "methods": []
            },
            {
                "class_name": "DummyClient",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "DummyResponses",
                "type",
                "DummyCompletions"
            ]
        }
    },
    "tests/test_tracing_errors.py": {
        "file_name": "/tests/test_tracing_errors.py",
        "imports": [
            "__future__.annotations",
            "json",
            "typing.Any",
            "pytest",
            "inline_snapshot.snapshot",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.GuardrailFunctionOutput",
            "agents.InputGuardrail",
            "agents.InputGuardrailTripwireTriggered",
            "agents.MaxTurnsExceeded",
            "agents.ModelBehaviorError",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.TResponseInputItem",
            "fake_model.FakeModel",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_message",
            "testing_processor.fetch_normalized_spans"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "guardrail_function": [
                "GuardrailFunctionOutput"
            ]
        }
    },
    "tests/test_guardrails.py": {
        "file_name": "/tests/test_guardrails.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "pytest",
            "agents.Agent",
            "agents.GuardrailFunctionOutput",
            "agents.InputGuardrail",
            "agents.OutputGuardrail",
            "agents.RunContextWrapper",
            "agents.TResponseInputItem",
            "agents.UserError",
            "agents.guardrail.input_guardrail",
            "agents.guardrail.output_guardrail"
        ],
        "classes": [],
        "functions": {
            "get_sync_guardrail": [],
            "sync_guardrail": [
                "GuardrailFunctionOutput"
            ],
            "get_async_input_guardrail": [
                "GuardrailFunctionOutput"
            ],
            "get_sync_output_guardrail": [],
            "get_async_output_guardrail": [
                "GuardrailFunctionOutput"
            ],
            "decorated_input_guardrail": [
                "GuardrailFunctionOutput"
            ],
            "decorated_named_input_guardrail": [
                "GuardrailFunctionOutput",
                "input_guardrail"
            ],
            "decorated_output_guardrail": [
                "GuardrailFunctionOutput"
            ],
            "decorated_named_output_guardrail": [
                "GuardrailFunctionOutput",
                "output_guardrail"
            ]
        }
    },
    "tests/test_session_exceptions.py": {
        "file_name": "/tests/test_session_exceptions.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "typing.Any",
            "unittest.mock.AsyncMock",
            "unittest.mock.Mock",
            "pytest",
            "websockets.exceptions",
            "agents.realtime.events.RealtimeError",
            "agents.realtime.model.RealtimeModel",
            "agents.realtime.model.RealtimeModelConfig",
            "agents.realtime.model.RealtimeModelListener",
            "agents.realtime.model_events.RealtimeModelErrorEvent",
            "agents.realtime.model_events.RealtimeModelEvent",
            "agents.realtime.model_events.RealtimeModelExceptionEvent",
            "agents.realtime.session.RealtimeSession"
        ],
        "classes": [
            {
                "class_name": "FakeRealtimeModel",
                "methods": [
                    "__init__",
                    "set_next_events",
                    "add_listener",
                    "remove_listener"
                ]
            },
            {
                "class_name": "TestSessionExceptions",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [],
            "set_next_events": [
                "copy"
            ],
            "add_listener": [
                "append"
            ],
            "remove_listener": [
                "remove"
            ],
            "fake_agent": [
                "Mock",
                "AsyncMock"
            ],
            "fake_model": [
                "FakeRealtimeModel"
            ]
        }
    },
    "tests/test_stream_events.py": {
        "file_name": "/tests/test_stream_events.py",
        "imports": [
            "asyncio",
            "time",
            "pytest",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.ResponseContentPartAddedEvent",
            "openai.types.responses.ResponseContentPartDoneEvent",
            "openai.types.responses.ResponseCreatedEvent",
            "openai.types.responses.ResponseFunctionCallArgumentsDeltaEvent",
            "openai.types.responses.ResponseFunctionCallArgumentsDoneEvent",
            "openai.types.responses.ResponseInProgressEvent",
            "openai.types.responses.ResponseOutputItemAddedEvent",
            "openai.types.responses.ResponseOutputItemDoneEvent",
            "openai.types.responses.ResponseReasoningSummaryPartAddedEvent",
            "openai.types.responses.ResponseReasoningSummaryPartDoneEvent",
            "openai.types.responses.ResponseReasoningSummaryTextDeltaEvent",
            "openai.types.responses.ResponseReasoningSummaryTextDoneEvent",
            "openai.types.responses.ResponseTextDeltaEvent",
            "openai.types.responses.ResponseTextDoneEvent",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "openai.types.responses.response_reasoning_item.Summary",
            "agents.Agent",
            "agents.HandoffCallItem",
            "agents.Runner",
            "agents.function_tool",
            "agents.extensions.handoff_filters.remove_all_tools",
            "agents.handoffs.handoff",
            "agents.items.MessageOutputItem",
            "agents.items.ReasoningItem",
            "agents.items.ToolCallItem",
            "agents.items.ToolCallOutputItem",
            "fake_model.FakeModel",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [],
        "functions": {
            "get_reasoning_item": [
                "ResponseReasoningItem",
                "Summary"
            ]
        }
    },
    "tests/test_items_helpers.py": {
        "file_name": "/tests/test_items_helpers.py",
        "imports": [
            "__future__.annotations",
            "json",
            "openai.types.responses.response_computer_tool_call.ActionScreenshot",
            "openai.types.responses.response_computer_tool_call.ResponseComputerToolCall",
            "openai.types.responses.response_computer_tool_call_param.ResponseComputerToolCallParam",
            "openai.types.responses.response_file_search_tool_call.ResponseFileSearchToolCall",
            "openai.types.responses.response_file_search_tool_call_param.ResponseFileSearchToolCallParam",
            "openai.types.responses.response_function_tool_call.ResponseFunctionToolCall",
            "openai.types.responses.response_function_tool_call_param.ResponseFunctionToolCallParam",
            "openai.types.responses.response_function_web_search.ActionSearch",
            "openai.types.responses.response_function_web_search.ResponseFunctionWebSearch",
            "openai.types.responses.response_function_web_search_param.ResponseFunctionWebSearchParam",
            "openai.types.responses.response_output_message.ResponseOutputMessage",
            "openai.types.responses.response_output_message_param.ResponseOutputMessageParam",
            "openai.types.responses.response_output_refusal.ResponseOutputRefusal",
            "openai.types.responses.response_output_text.ResponseOutputText",
            "openai.types.responses.response_output_text_param.ResponseOutputTextParam",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "openai.types.responses.response_reasoning_item.Summary",
            "openai.types.responses.response_reasoning_item_param.ResponseReasoningItemParam",
            "pydantic.TypeAdapter",
            "agents.Agent",
            "agents.ItemHelpers",
            "agents.MessageOutputItem",
            "agents.ModelResponse",
            "agents.ReasoningItem",
            "agents.RunItem",
            "agents.TResponseInputItem",
            "agents.Usage"
        ],
        "classes": [],
        "functions": {
            "make_message": [
                "ResponseOutputMessage"
            ],
            "test_extract_last_content_of_text_message": [
                "ResponseOutputText",
                "make_message",
                "extract_last_content"
            ],
            "test_extract_last_content_of_refusal_message": [
                "ResponseOutputText",
                "ResponseOutputRefusal",
                "make_message",
                "extract_last_content"
            ],
            "test_extract_last_content_non_message_returns_empty": [
                "ResponseFunctionToolCall",
                "extract_last_content"
            ],
            "test_extract_last_text_returns_text_only": [
                "ResponseOutputText",
                "make_message",
                "extract_last_text",
                "ResponseOutputRefusal"
            ],
            "test_input_to_new_input_list_from_string": [
                "input_to_new_input_list",
                "isinstance"
            ],
            "test_input_to_new_input_list_deep_copies_lists": [
                "input_to_new_input_list",
                "pop",
                "get"
            ],
            "test_text_message_output_concatenates_text_segments": [
                "append",
                "ResponseOutputText",
                "ResponseOutputRefusal",
                "make_message",
                "MessageOutputItem",
                "Agent",
                "text_message_output"
            ],
            "test_text_message_outputs_across_list_of_runitems": [
                "make_message",
                "ResponseOutputText",
                "MessageOutputItem",
                "Agent",
                "ResponseReasoningItem",
                "ReasoningItem",
                "text_message_outputs"
            ],
            "test_tool_call_output_item_constructs_function_call_output_dict": [
                "ResponseFunctionToolCall",
                "tool_call_output_item",
                "isinstance"
            ],
            "test_to_input_items_for_message": [
                "ResponseOutputText",
                "ResponseOutputMessage",
                "ModelResponse",
                "Usage",
                "to_input_items",
                "isinstance",
                "len"
            ],
            "test_to_input_items_for_function_call": [
                "ResponseFunctionToolCall",
                "ModelResponse",
                "Usage",
                "to_input_items",
                "isinstance",
                "len"
            ],
            "test_to_input_items_for_file_search_call": [
                "ResponseFileSearchToolCall",
                "ModelResponse",
                "Usage",
                "to_input_items",
                "isinstance",
                "len"
            ],
            "test_to_input_items_for_web_search_call": [
                "ResponseFunctionWebSearch",
                "ActionSearch",
                "ModelResponse",
                "Usage",
                "to_input_items",
                "isinstance",
                "len"
            ],
            "test_to_input_items_for_computer_call_click": [
                "ActionScreenshot",
                "ResponseComputerToolCall",
                "ModelResponse",
                "Usage",
                "to_input_items",
                "isinstance",
                "len"
            ],
            "test_to_input_items_for_reasoning": [
                "Summary",
                "ResponseReasoningItem",
                "ModelResponse",
                "Usage",
                "to_input_items",
                "isinstance",
                "len",
                "print"
            ],
            "test_input_to_new_input_list_copies_the_ones_produced_by_pydantic": [
                "ResponseOutputMessageParam",
                "ResponseOutputTextParam",
                "dumps",
                "validate_json",
                "TypeAdapter",
                "input_to_new_input_list",
                "len",
                "enumerate"
            ]
        }
    },
    "tests/test_usage.py": {
        "file_name": "/tests/test_usage.py",
        "imports": [
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "agents.usage.Usage"
        ],
        "classes": [],
        "functions": {
            "test_usage_add_aggregates_all_fields": [
                "Usage",
                "InputTokensDetails",
                "OutputTokensDetails",
                "add"
            ],
            "test_usage_add_aggregates_with_none_values": [
                "Usage",
                "InputTokensDetails",
                "OutputTokensDetails",
                "add"
            ]
        }
    },
    "tests/test_output_tool.py": {
        "file_name": "/tests/test_output_tool.py",
        "imports": [
            "json",
            "typing.Any",
            "pytest",
            "pydantic.BaseModel",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.AgentOutputSchema",
            "agents.AgentOutputSchemaBase",
            "agents.ModelBehaviorError",
            "agents.UserError",
            "agents.agent_output._WRAPPER_DICT_KEY",
            "agents.run.AgentRunner",
            "agents.util._json"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            },
            {
                "class_name": "Bar",
                "methods": []
            },
            {
                "class_name": "CustomOutputSchema",
                "methods": [
                    "is_plain_text",
                    "name",
                    "json_schema",
                    "is_strict_json_schema",
                    "validate_json"
                ]
            }
        ],
        "functions": {
            "test_plain_text_output": [
                "Agent",
                "_get_output_schema"
            ],
            "test_structured_output_pydantic": [
                "Agent",
                "_get_output_schema",
                "isinstance",
                "items",
                "model_json_schema",
                "json_schema",
                "model_dump_json",
                "Foo",
                "validate_json"
            ],
            "test_structured_output_typed_dict": [
                "Agent",
                "_get_output_schema",
                "isinstance",
                "dumps",
                "Bar",
                "validate_json"
            ],
            "test_structured_output_list": [
                "Agent",
                "_get_output_schema",
                "isinstance",
                "dumps",
                "validate_json"
            ],
            "test_bad_json_raises_error": [
                "Agent",
                "_get_output_schema",
                "raises",
                "validate_json",
                "object",
                "dumps"
            ],
            "test_plain_text_obj_doesnt_produce_schema": [
                "AgentOutputSchema",
                "raises",
                "json_schema"
            ],
            "test_structured_output_is_strict": [
                "AgentOutputSchema",
                "is_strict_json_schema",
                "items",
                "model_json_schema",
                "json_schema"
            ],
            "test_setting_strict_false_works": [
                "AgentOutputSchema",
                "is_strict_json_schema",
                "json_schema",
                "model_json_schema"
            ],
            "is_plain_text": [],
            "name": [],
            "json_schema": [],
            "is_strict_json_schema": [],
            "validate_json": [],
            "test_custom_output_schema": [
                "CustomOutputSchema",
                "Agent",
                "_get_output_schema",
                "isinstance",
                "json_schema",
                "is_strict_json_schema",
                "is_plain_text",
                "dumps",
                "validate_json"
            ]
        }
    },
    "tests/test_run_hooks.py": {
        "file_name": "/tests/test_run_hooks.py",
        "imports": [
            "collections.defaultdict",
            "typing.Any",
            "typing.Optional",
            "typing.cast",
            "pytest",
            "agents.agent.Agent",
            "agents.items.ItemHelpers",
            "agents.items.ModelResponse",
            "agents.items.TResponseInputItem",
            "agents.lifecycle.AgentHooks",
            "agents.lifecycle.RunHooks",
            "agents.models.interface.Model",
            "agents.run.Runner",
            "agents.run_context.RunContextWrapper",
            "agents.run_context.TContext",
            "agents.tool.Tool",
            "tests.test_agent_llm_hooks.AgentHooksForTests",
            "fake_model.FakeModel",
            "test_responses.get_function_tool",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "RunHooksForTests",
                "methods": [
                    "__init__",
                    "reset"
                ]
            },
            {
                "class_name": "DummyAgentHooks",
                "methods": []
            },
            {
                "class_name": "BoomModel",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "defaultdict"
            ],
            "reset": [
                "clear"
            ],
            "test_sync_run_hook_with_llm": [
                "RunHooksForTests",
                "FakeModel",
                "Agent",
                "get_function_tool",
                "set_next_output",
                "get_text_message",
                "run_sync"
            ],
            "test_runner_run_streamed_rejects_agent_hooks": [
                "FakeModel",
                "Agent",
                "cast",
                "DummyAgentHooks",
                "raises",
                "run_streamed"
            ]
        }
    },
    "tests/test_tracing.py": {
        "file_name": "/tests/test_tracing.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "typing.Any",
            "pytest",
            "inline_snapshot.snapshot",
            "agents.tracing.Span",
            "agents.tracing.Trace",
            "agents.tracing.agent_span",
            "agents.tracing.custom_span",
            "agents.tracing.function_span",
            "agents.tracing.generation_span",
            "agents.tracing.handoff_span",
            "agents.tracing.trace",
            "agents.tracing.spans.SpanError",
            "testing_processor.SPAN_PROCESSOR_TESTING",
            "testing_processor.assert_no_traces",
            "testing_processor.fetch_events",
            "testing_processor.fetch_normalized_spans"
        ],
        "classes": [],
        "functions": {
            "standard_span_checks": [],
            "standard_trace_checks": [],
            "simple_tracing": [
                "trace",
                "start",
                "agent_span",
                "finish",
                "custom_span"
            ],
            "test_simple_tracing": [
                "simple_tracing",
                "fetch_normalized_spans",
                "snapshot"
            ],
            "ctxmanager_spans": [
                "trace",
                "custom_span"
            ],
            "test_ctxmanager_spans": [
                "ctxmanager_spans",
                "fetch_normalized_spans",
                "snapshot"
            ],
            "spans_with_setters": [
                "trace",
                "agent_span",
                "function_span",
                "generation_span",
                "handoff_span"
            ],
            "test_spans_with_setters": [
                "spans_with_setters",
                "fetch_normalized_spans",
                "snapshot"
            ],
            "disabled_tracing": [
                "trace",
                "agent_span",
                "function_span"
            ],
            "test_disabled_tracing": [
                "disabled_tracing",
                "assert_no_traces"
            ],
            "enabled_trace_disabled_span": [
                "trace",
                "agent_span",
                "function_span",
                "generation_span"
            ],
            "test_enabled_trace_disabled_span": [
                "enabled_trace_disabled_span",
                "fetch_normalized_spans",
                "snapshot"
            ],
            "test_start_and_end_called_manual": [
                "simple_tracing",
                "fetch_events"
            ],
            "test_start_and_end_called_ctxmanager": [
                "trace",
                "custom_span",
                "fetch_events"
            ]
        }
    },
    "tests/test_openai_chatcompletions_stream.py": {
        "file_name": "/tests/test_openai_chatcompletions_stream.py",
        "imports": [
            "collections.abc.AsyncIterator",
            "pytest",
            "openai.types.chat.chat_completion_chunk.ChatCompletionChunk",
            "openai.types.chat.chat_completion_chunk.Choice",
            "openai.types.chat.chat_completion_chunk.ChoiceDelta",
            "openai.types.chat.chat_completion_chunk.ChoiceDeltaToolCall",
            "openai.types.chat.chat_completion_chunk.ChoiceDeltaToolCallFunction",
            "openai.types.completion_usage.CompletionTokensDetails",
            "openai.types.completion_usage.CompletionUsage",
            "openai.types.completion_usage.PromptTokensDetails",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "agents.model_settings.ModelSettings",
            "agents.models.interface.ModelTracing",
            "agents.models.openai_chatcompletions.OpenAIChatCompletionsModel",
            "agents.models.openai_provider.OpenAIProvider"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/test_tracing_errors_streamed.py": {
        "file_name": "/tests/test_tracing_errors_streamed.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "typing.Any",
            "pytest",
            "inline_snapshot.snapshot",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.GuardrailFunctionOutput",
            "agents.InputGuardrail",
            "agents.InputGuardrailTripwireTriggered",
            "agents.MaxTurnsExceeded",
            "agents.ModelBehaviorError",
            "agents.OutputGuardrail",
            "agents.OutputGuardrailTripwireTriggered",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.TResponseInputItem",
            "fake_model.FakeModel",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_message",
            "testing_processor.fetch_normalized_spans"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "input_guardrail_function": [
                "GuardrailFunctionOutput"
            ],
            "output_guardrail_function": [
                "GuardrailFunctionOutput"
            ]
        }
    },
    "tests/test_tool_use_behavior.py": {
        "file_name": "/tests/test_tool_use_behavior.py",
        "imports": [
            "__future__.annotations",
            "typing.cast",
            "pytest",
            "openai.types.responses.response_input_item_param.FunctionCallOutput",
            "agents.Agent",
            "agents.FunctionToolResult",
            "agents.RunConfig",
            "agents.RunContextWrapper",
            "agents.ToolCallOutputItem",
            "agents.ToolsToFinalOutputResult",
            "agents.UserError",
            "agents._run_impl.RunImpl",
            "test_responses.get_function_tool"
        ],
        "classes": [],
        "functions": {
            "_make_function_tool_result": [
                "get_function_tool",
                "cast",
                "ToolCallOutputItem",
                "FunctionToolResult"
            ],
            "behavior": [
                "len",
                "ToolsToFinalOutputResult"
            ]
        }
    },
    "tests/test_extension_filters.py": {
        "file_name": "/tests/test_extension_filters.py",
        "imports": [
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputText",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "agents.Agent",
            "agents.HandoffInputData",
            "agents.RunContextWrapper",
            "agents.extensions.handoff_filters.remove_all_tools",
            "agents.items.HandoffOutputItem",
            "agents.items.MessageOutputItem",
            "agents.items.ReasoningItem",
            "agents.items.ToolCallOutputItem",
            "agents.items.TResponseInputItem"
        ],
        "classes": [],
        "functions": {
            "fake_agent": [
                "Agent"
            ],
            "_get_message_input_item": [],
            "_get_reasoning_input_item": [],
            "_get_function_result_input_item": [],
            "_get_message_output_run_item": [
                "MessageOutputItem",
                "fake_agent",
                "ResponseOutputMessage",
                "ResponseOutputText"
            ],
            "_get_tool_output_run_item": [
                "ToolCallOutputItem",
                "fake_agent"
            ],
            "_get_handoff_input_item": [],
            "_get_handoff_output_run_item": [
                "HandoffOutputItem",
                "fake_agent"
            ],
            "_get_reasoning_output_run_item": [
                "ReasoningItem",
                "fake_agent",
                "ResponseReasoningItem"
            ],
            "test_empty_data": [
                "HandoffInputData",
                "RunContextWrapper",
                "remove_all_tools"
            ],
            "test_str_historyonly": [
                "HandoffInputData",
                "RunContextWrapper",
                "remove_all_tools"
            ],
            "test_str_history_and_list": [
                "HandoffInputData",
                "_get_message_output_run_item",
                "RunContextWrapper",
                "remove_all_tools"
            ],
            "test_list_history_and_list": [
                "HandoffInputData",
                "_get_message_input_item",
                "_get_message_output_run_item",
                "RunContextWrapper",
                "remove_all_tools"
            ],
            "test_removes_tools_from_history": [
                "HandoffInputData",
                "_get_message_input_item",
                "_get_function_result_input_item",
                "_get_tool_output_run_item",
                "_get_message_output_run_item",
                "RunContextWrapper",
                "remove_all_tools",
                "len"
            ],
            "test_removes_tools_from_new_items": [
                "HandoffInputData",
                "_get_message_output_run_item",
                "_get_tool_output_run_item",
                "RunContextWrapper",
                "remove_all_tools",
                "len"
            ],
            "test_removes_tools_from_new_items_and_history": [
                "HandoffInputData",
                "_get_message_input_item",
                "_get_reasoning_input_item",
                "_get_function_result_input_item",
                "_get_reasoning_output_run_item",
                "_get_message_output_run_item",
                "_get_tool_output_run_item",
                "RunContextWrapper",
                "remove_all_tools",
                "len"
            ],
            "test_removes_handoffs_from_history": [
                "HandoffInputData",
                "_get_message_input_item",
                "_get_handoff_input_item",
                "_get_reasoning_output_run_item",
                "_get_message_output_run_item",
                "_get_tool_output_run_item",
                "_get_handoff_output_run_item",
                "RunContextWrapper",
                "remove_all_tools",
                "len"
            ]
        }
    },
    "tests/test_responses.py": {
        "file_name": "/tests/test_responses.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseOutputItem",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputText",
            "agents.Agent",
            "agents.FunctionTool",
            "agents.Handoff",
            "agents.TResponseInputItem",
            "agents.default_tool_error_function",
            "agents.function_tool"
        ],
        "classes": [],
        "functions": {
            "get_text_input_item": [],
            "get_text_message": [
                "ResponseOutputMessage",
                "ResponseOutputText"
            ],
            "get_function_tool": [
                "function_tool"
            ],
            "_foo": [],
            "get_function_tool_call": [
                "ResponseFunctionToolCall"
            ],
            "get_handoff_tool_call": [
                "default_tool_name",
                "get_function_tool_call"
            ],
            "get_final_output_message": [
                "ResponseOutputMessage",
                "ResponseOutputText"
            ]
        }
    },
    "tests/test_agent_runner.py": {
        "file_name": "/tests/test_agent_runner.py",
        "imports": [
            "__future__.annotations",
            "asyncio",
            "json",
            "tempfile",
            "pathlib.Path",
            "typing.Any",
            "typing.cast",
            "unittest.mock.patch",
            "pytest",
            "typing_extensions.TypedDict",
            "agents.Agent",
            "agents.GuardrailFunctionOutput",
            "agents.Handoff",
            "agents.HandoffInputData",
            "agents.InputGuardrail",
            "agents.InputGuardrailTripwireTriggered",
            "agents.ModelBehaviorError",
            "agents.ModelSettings",
            "agents.OutputGuardrail",
            "agents.OutputGuardrailTripwireTriggered",
            "agents.RunConfig",
            "agents.RunContextWrapper",
            "agents.Runner",
            "agents.SQLiteSession",
            "agents.UserError",
            "agents.handoff",
            "agents.agent.ToolsToFinalOutputResult",
            "agents.tool.FunctionToolResult",
            "agents.tool.function_tool",
            "fake_model.FakeModel",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_input_item",
            "test_responses.get_text_message",
            "utils.simple_session.SimpleListSession"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "remove_new_items": [
                "HandoffInputData"
            ],
            "invalid_input_filter": [],
            "on_input": [],
            "_on_handoff_too_many_params": [],
            "on_handoff_too_few_params": [],
            "guardrail_function": [
                "GuardrailFunctionOutput"
            ],
            "test_tool_one": [
                "Foo"
            ],
            "test_tool_two": [],
            "custom_tool_use_behavior": [
                "ToolsToFinalOutputResult"
            ],
            "tool2": [
                "function_tool"
            ]
        }
    },
    "tests/test_run_config.py": {
        "file_name": "/tests/test_run_config.py",
        "imports": [
            "__future__.annotations",
            "pytest",
            "agents.Agent",
            "agents.RunConfig",
            "agents.Runner",
            "agents.models.interface.Model",
            "agents.models.interface.ModelProvider",
            "fake_model.FakeModel",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "DummyProvider",
                "methods": [
                    "__init__",
                    "get_model"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "FakeModel"
            ],
            "get_model": [],
            "test_trace_include_sensitive_data_defaults_to_true_when_env_not_set": [
                "delenv",
                "RunConfig"
            ],
            "test_trace_include_sensitive_data_follows_env_value": [
                "setenv",
                "RunConfig",
                "parametrize"
            ],
            "test_trace_include_sensitive_data_explicit_override_takes_precedence": [
                "setenv",
                "RunConfig"
            ]
        }
    },
    "tests/test_openai_conversations_session.py": {
        "file_name": "/tests/test_openai_conversations_session.py",
        "imports": [
            "__future__.annotations",
            "unittest.mock.AsyncMock",
            "unittest.mock.MagicMock",
            "unittest.mock.patch",
            "pytest",
            "agents.Agent",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.memory.openai_conversations_session.OpenAIConversationsSession",
            "agents.memory.openai_conversations_session.start_openai_conversations_session",
            "tests.fake_model.FakeModel",
            "tests.test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "TestStartOpenAIConversationsSession",
                "methods": []
            },
            {
                "class_name": "TestOpenAIConversationsSessionConstructor",
                "methods": [
                    "test_init_with_conversation_id_and_client",
                    "test_init_with_conversation_id_only",
                    "test_init_with_client_only",
                    "test_init_with_no_args_fallback"
                ]
            },
            {
                "class_name": "TestOpenAIConversationsSessionLifecycle",
                "methods": []
            },
            {
                "class_name": "TestOpenAIConversationsSessionBasicOperations",
                "methods": []
            },
            {
                "class_name": "TestOpenAIConversationsSessionRunnerIntegration",
                "methods": []
            },
            {
                "class_name": "TestOpenAIConversationsSessionErrorHandling",
                "methods": []
            },
            {
                "class_name": "TestOpenAIConversationsSessionConcurrentAccess",
                "methods": []
            }
        ],
        "functions": {
            "mock_openai_client": [
                "AsyncMock",
                "MagicMock"
            ],
            "agent": [
                "Agent",
                "FakeModel"
            ],
            "test_init_with_conversation_id_and_client": [
                "OpenAIConversationsSession"
            ],
            "test_init_with_conversation_id_only": [
                "patch",
                "AsyncMock",
                "OpenAIConversationsSession",
                "assert_called_once"
            ],
            "test_init_with_client_only": [
                "OpenAIConversationsSession"
            ],
            "test_init_with_no_args_fallback": [
                "patch",
                "AsyncMock",
                "OpenAIConversationsSession",
                "assert_called_once"
            ]
        }
    },
    "tests/test_agent_hooks.py": {
        "file_name": "/tests/test_agent_hooks.py",
        "imports": [
            "__future__.annotations",
            "json",
            "collections.defaultdict",
            "typing.Any",
            "pytest",
            "typing_extensions.TypedDict",
            "agents.agent.Agent",
            "agents.lifecycle.AgentHooks",
            "agents.run.Runner",
            "agents.run_context.RunContextWrapper",
            "agents.run_context.TContext",
            "agents.tool.Tool",
            "fake_model.FakeModel",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "AgentHooksForTests",
                "methods": [
                    "__init__",
                    "reset"
                ]
            },
            {
                "class_name": "Foo",
                "methods": []
            },
            {
                "class_name": "EmptyAgentHooks",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "defaultdict"
            ],
            "reset": [
                "clear"
            ]
        }
    },
    "tests/test_agent_prompt.py": {
        "file_name": "/tests/test_agent_prompt.py",
        "imports": [
            "pytest",
            "agents.Agent",
            "agents.Prompt",
            "agents.RunContextWrapper",
            "agents.Runner",
            "fake_model.FakeModel",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "PromptCaptureFakeModel",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "dynamic_prompt_fn": []
        }
    },
    "tests/test_streaming_tool_call_arguments.py": {
        "file_name": "/tests/test_streaming_tool_call_arguments.py",
        "imports": [
            "json",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "typing.Optional",
            "typing.Union",
            "typing.cast",
            "pytest",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseOutputItemAddedEvent",
            "openai.types.responses.ResponseOutputItemDoneEvent",
            "agents.Agent",
            "agents.Runner",
            "agents.function_tool",
            "agents.agent_output.AgentOutputSchemaBase",
            "agents.handoffs.Handoff",
            "agents.items.TResponseInputItem",
            "agents.items.TResponseOutputItem",
            "agents.items.TResponseStreamEvent",
            "agents.model_settings.ModelSettings",
            "agents.models.interface.Model",
            "agents.models.interface.ModelTracing",
            "agents.stream_events.RunItemStreamEvent",
            "agents.tool.Tool",
            "agents.tracing.generation_span",
            "fake_model.get_response_obj",
            "test_responses.get_function_tool_call"
        ],
        "classes": [
            {
                "class_name": "StreamingFakeModel",
                "methods": [
                    "__init__",
                    "set_next_output",
                    "get_next_output"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "set_next_output": [
                "append"
            ],
            "get_next_output": [
                "pop"
            ],
            "calculate_sum": [
                "str"
            ],
            "format_message": [],
            "get_current_time": []
        }
    },
    "tests/test_call_model_input_filter.py": {
        "file_name": "/tests/test_call_model_input_filter.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "pytest",
            "agents.Agent",
            "agents.RunConfig",
            "agents.Runner",
            "agents.UserError",
            "agents.run.CallModelData",
            "agents.run.ModelInputData",
            "fake_model.FakeModel",
            "test_responses.get_text_input_item",
            "test_responses.get_text_message"
        ],
        "classes": [],
        "functions": {
            "filter_fn": [
                "list",
                "get_text_input_item",
                "ModelInputData"
            ],
            "invalid_filter": []
        }
    },
    "tests/test_run.py": {
        "file_name": "/tests/test_run.py",
        "imports": [
            "__future__.annotations",
            "unittest.mock",
            "pytest",
            "agents.Agent",
            "agents.Runner",
            "agents.run.AgentRunner",
            "agents.run.set_default_agent_runner",
            "fake_model.FakeModel"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/test_strict_schema.py": {
        "file_name": "/tests/test_strict_schema.py",
        "imports": [
            "pytest",
            "agents.exceptions.UserError",
            "agents.strict_schema.ensure_strict_json_schema"
        ],
        "classes": [],
        "functions": {
            "test_empty_schema_has_additional_properties_false": [
                "ensure_strict_json_schema"
            ],
            "test_non_dict_schema_errors": [
                "raises",
                "ensure_strict_json_schema"
            ],
            "test_object_without_additional_properties": [
                "ensure_strict_json_schema"
            ],
            "test_object_with_true_additional_properties": [
                "raises",
                "ensure_strict_json_schema"
            ],
            "test_array_items_processing_and_default_removal": [
                "ensure_strict_json_schema"
            ],
            "test_anyOf_processing": [
                "ensure_strict_json_schema"
            ],
            "test_allOf_single_entry_merging": [
                "ensure_strict_json_schema"
            ],
            "test_default_removal_on_non_object": [
                "ensure_strict_json_schema"
            ],
            "test_ref_expansion": [
                "ensure_strict_json_schema"
            ],
            "test_ref_no_expansion_when_alone": [
                "ensure_strict_json_schema"
            ],
            "test_invalid_ref_format": [
                "raises",
                "ensure_strict_json_schema"
            ]
        }
    },
    "tests/test_run_step_processing.py": {
        "file_name": "/tests/test_run_step_processing.py",
        "imports": [
            "__future__.annotations",
            "pytest",
            "openai.types.responses.ResponseComputerToolCall",
            "openai.types.responses.ResponseFileSearchToolCall",
            "openai.types.responses.ResponseFunctionWebSearch",
            "openai.types.responses.response_computer_tool_call.ActionClick",
            "openai.types.responses.response_function_web_search.ActionSearch",
            "openai.types.responses.response_reasoning_item.ResponseReasoningItem",
            "openai.types.responses.response_reasoning_item.Summary",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.Computer",
            "agents.ComputerTool",
            "agents.Handoff",
            "agents.ModelBehaviorError",
            "agents.ModelResponse",
            "agents.ReasoningItem",
            "agents.RunContextWrapper",
            "agents.ToolCallItem",
            "agents.Usage",
            "agents._run_impl.RunImpl",
            "agents.run.AgentRunner",
            "test_responses.get_final_output_message",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_handoff_tool_call",
            "test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            },
            {
                "class_name": "DummyComputer",
                "methods": [
                    "environment",
                    "dimensions",
                    "screenshot",
                    "click",
                    "double_click",
                    "scroll",
                    "type",
                    "wait",
                    "move",
                    "keypress",
                    "drag"
                ]
            }
        ],
        "functions": {
            "_dummy_ctx": [
                "RunContextWrapper"
            ],
            "test_empty_response": [
                "Agent",
                "ModelResponse",
                "Usage",
                "process_model_response"
            ],
            "test_no_tool_calls": [
                "Agent",
                "ModelResponse",
                "get_text_message",
                "Usage",
                "process_model_response"
            ],
            "environment": [],
            "dimensions": [],
            "screenshot": [],
            "click": [],
            "double_click": [],
            "scroll": [],
            "type": [],
            "wait": [],
            "move": [],
            "keypress": [],
            "drag": []
        }
    },
    "tests/conftest.py": {
        "file_name": "/tests/conftest.py",
        "imports": [
            "__future__.annotations",
            "pytest",
            "agents.models._openai_shared",
            "agents.models.openai_chatcompletions.OpenAIChatCompletionsModel",
            "agents.models.openai_responses.OpenAIResponsesModel",
            "agents.run.set_default_agent_runner",
            "agents.tracing.set_trace_processors",
            "agents.tracing.setup.get_trace_provider",
            "testing_processor.SPAN_PROCESSOR_TESTING",
            "os"
        ],
        "classes": [],
        "functions": {
            "setup_span_processor": [
                "set_trace_processors",
                "fixture"
            ],
            "ensure_openai_api_key": [
                "get",
                "fixture"
            ],
            "clear_span_processor": [
                "force_flush",
                "shutdown",
                "clear",
                "fixture"
            ],
            "clear_openai_settings": [
                "fixture"
            ],
            "clear_default_runner": [
                "set_default_agent_runner",
                "fixture"
            ],
            "shutdown_trace_provider": [
                "shutdown",
                "get_trace_provider",
                "fixture"
            ],
            "disable_real_model_clients": [
                "get_closest_marker",
                "setattr",
                "fixture"
            ],
            "failing_version": [
                "fail"
            ]
        }
    },
    "tests/test_tool_converter.py": {
        "file_name": "/tests/test_tool_converter.py",
        "imports": [
            "pytest",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.Handoff",
            "agents.function_tool",
            "agents.handoff",
            "agents.exceptions.UserError",
            "agents.models.chatcmpl_converter.Converter",
            "agents.tool.FileSearchTool",
            "agents.tool.WebSearchTool"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "some_function": [],
            "test_to_openai_with_function_tool": [
                "some_function",
                "function_tool",
                "tool_to_openai",
                "get",
                "isinstance",
                "keys"
            ],
            "test_convert_handoff_tool": [
                "Agent",
                "handoff",
                "convert_handoff_tool",
                "default_tool_name",
                "get",
                "default_tool_description",
                "items"
            ],
            "test_tool_converter_hosted_tools_errors": [
                "raises",
                "tool_to_openai",
                "WebSearchTool",
                "FileSearchTool"
            ]
        }
    },
    "tests/test_repl.py": {
        "file_name": "/tests/test_repl.py",
        "imports": [
            "pytest",
            "agents.Agent",
            "agents.run_demo_loop",
            "fake_model.FakeModel",
            "test_responses.get_text_input_item",
            "test_responses.get_text_message"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/test_config.py": {
        "file_name": "/tests/test_config.py",
        "imports": [
            "os",
            "openai",
            "pytest",
            "agents.set_default_openai_api",
            "agents.set_default_openai_client",
            "agents.set_default_openai_key",
            "agents.models.openai_chatcompletions.OpenAIChatCompletionsModel",
            "agents.models.openai_provider.OpenAIProvider",
            "agents.models.openai_responses.OpenAIResponsesModel"
        ],
        "classes": [],
        "functions": {
            "test_cc_no_default_key_errors": [
                "delenv",
                "raises",
                "get_model",
                "OpenAIProvider"
            ],
            "test_cc_set_default_openai_key": [
                "set_default_openai_key",
                "get_model",
                "OpenAIProvider"
            ],
            "test_cc_set_default_openai_client": [
                "AsyncOpenAI",
                "set_default_openai_client",
                "get_model",
                "OpenAIProvider"
            ],
            "test_resp_no_default_key_errors": [
                "delenv",
                "getenv",
                "raises",
                "get_model",
                "OpenAIProvider"
            ],
            "test_resp_set_default_openai_key": [
                "set_default_openai_key",
                "get_model",
                "OpenAIProvider"
            ],
            "test_resp_set_default_openai_client": [
                "AsyncOpenAI",
                "set_default_openai_client",
                "get_model",
                "OpenAIProvider"
            ],
            "test_set_default_openai_api": [
                "isinstance",
                "get_model",
                "OpenAIProvider",
                "set_default_openai_api"
            ]
        }
    },
    "tests/test_openai_chatcompletions.py": {
        "file_name": "/tests/test_openai_chatcompletions.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "httpx",
            "pytest",
            "openai.AsyncOpenAI",
            "openai.omit",
            "openai.types.chat.chat_completion.ChatCompletion",
            "openai.types.chat.chat_completion.Choice",
            "openai.types.chat.chat_completion_chunk.ChatCompletionChunk",
            "openai.types.chat.chat_completion_message.ChatCompletionMessage",
            "openai.types.chat.chat_completion_message_tool_call.ChatCompletionMessageFunctionToolCall",
            "openai.types.chat.chat_completion_message_tool_call.Function",
            "openai.types.completion_usage.CompletionUsage",
            "openai.types.completion_usage.PromptTokensDetails",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "agents.ModelResponse",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.OpenAIChatCompletionsModel",
            "agents.OpenAIProvider",
            "agents.__version__",
            "agents.generation_span",
            "agents.models.chatcmpl_helpers.HEADERS_OVERRIDE",
            "agents.models.chatcmpl_helpers.ChatCmplHelpers",
            "agents.models.fake_id.FAKE_RESPONSES_ID"
        ],
        "classes": [
            {
                "class_name": "DummyCompletions",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyClient",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyCompletions",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyClient",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyCompletions",
                "methods": []
            },
            {
                "class_name": "DummyChatClient",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "type",
                "URL",
                "DummyCompletions"
            ],
            "test_store_param": [
                "ModelSettings",
                "AsyncOpenAI",
                "get_store_param"
            ]
        }
    },
    "tests/test_result_cast.py": {
        "file_name": "/tests/test_result_cast.py",
        "imports": [
            "typing.Any",
            "pytest",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.RunContextWrapper",
            "agents.RunResult"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {
            "create_run_result": [
                "RunResult",
                "Agent",
                "RunContextWrapper"
            ],
            "test_result_cast_typechecks": [
                "create_run_result",
                "final_output_as",
                "Foo"
            ],
            "test_bad_cast_doesnt_raise": [
                "create_run_result",
                "final_output_as"
            ],
            "test_bad_cast_with_param_raises": [
                "create_run_result",
                "raises",
                "final_output_as",
                "Foo"
            ]
        }
    },
    "tests/utils/simple_session.py": {
        "file_name": "/tests/utils/simple_session.py",
        "imports": [
            "__future__.annotations",
            "agents.items.TResponseInputItem",
            "agents.memory.session.Session"
        ],
        "classes": [
            {
                "class_name": "SimpleListSession",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": []
        }
    },
    "tests/utils/test_json.py": {
        "file_name": "/tests/utils/test_json.py",
        "imports": [
            "json",
            "openai.types.responses.response_output_message_param.ResponseOutputMessageParam",
            "openai.types.responses.response_output_text_param.ResponseOutputTextParam",
            "agents.util._json._to_dump_compatible"
        ],
        "classes": [],
        "functions": {
            "test_to_dump_compatible": [
                "__iter__",
                "ResponseOutputMessageParam",
                "ResponseOutputTextParam",
                "dumps",
                "_to_dump_compatible"
            ]
        }
    },
    "tests/realtime/test_session_payload_and_formats.py": {
        "file_name": "/tests/realtime/test_session_payload_and_formats.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.Mapping",
            "typing.Any",
            "typing.cast",
            "pydantic",
            "openai.types.realtime.realtime_audio_config.RealtimeAudioConfig",
            "openai.types.realtime.realtime_audio_formats.AudioPCM",
            "openai.types.realtime.realtime_audio_formats.AudioPCMA",
            "openai.types.realtime.realtime_audio_formats.AudioPCMU",
            "openai.types.realtime.realtime_session_create_request.RealtimeSessionCreateRequest",
            "openai.types.realtime.realtime_transcription_session_create_request.RealtimeTranscriptionSessionCreateRequest",
            "agents.realtime.openai_realtime.OpenAIRealtimeWebSocketModel"
        ],
        "classes": [
            {
                "class_name": "_DummyModel",
                "methods": []
            },
            {
                "class_name": "HasType",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "_session_with_output": [
                "RealtimeSessionCreateRequest",
                "RealtimeAudioConfig",
                "cast"
            ],
            "test_normalize_session_payload_variants": [
                "_session_with_output",
                "AudioPCM",
                "_normalize_session_payload",
                "RealtimeTranscriptionSessionCreateRequest",
                "isinstance"
            ],
            "test_extract_audio_format_from_session_objects": [
                "_session_with_output",
                "AudioPCM",
                "_extract_audio_format",
                "AudioPCMU",
                "AudioPCMA"
            ],
            "test_normalize_audio_format_fallbacks": [
                "_normalize_audio_format",
                "_DummyModel",
                "HasType"
            ],
            "__init__": []
        }
    },
    "tests/realtime/test_audio_formats_unit.py": {
        "file_name": "/tests/realtime/test_audio_formats_unit.py",
        "imports": [
            "openai.types.realtime.realtime_audio_formats.AudioPCM",
            "agents.realtime.audio_formats.to_realtime_audio_format"
        ],
        "classes": [],
        "functions": {
            "test_to_realtime_audio_format_from_strings": [
                "to_realtime_audio_format"
            ],
            "test_to_realtime_audio_format_passthrough_and_unknown_logs": [
                "AudioPCM",
                "to_realtime_audio_format"
            ],
            "test_to_realtime_audio_format_none": [
                "to_realtime_audio_format"
            ]
        }
    },
    "tests/realtime/test_playback_tracker_manual_unit.py": {
        "file_name": "/tests/realtime/test_playback_tracker_manual_unit.py",
        "imports": [
            "agents.realtime.model.RealtimePlaybackTracker"
        ],
        "classes": [],
        "functions": {
            "test_playback_tracker_on_play_bytes_and_state": [
                "RealtimePlaybackTracker",
                "set_audio_format",
                "on_play_bytes",
                "get_state",
                "abs",
                "on_play_ms",
                "on_interrupted"
            ]
        }
    },
    "tests/realtime/test_openai_realtime.py": {
        "file_name": "/tests/realtime/test_openai_realtime.py",
        "imports": [
            "json",
            "typing.Any",
            "typing.cast",
            "unittest.mock.AsyncMock",
            "unittest.mock.Mock",
            "unittest.mock.patch",
            "pytest",
            "websockets",
            "agents.Agent",
            "agents.exceptions.UserError",
            "agents.handoffs.handoff",
            "agents.realtime.model_events.RealtimeModelAudioEvent",
            "agents.realtime.model_events.RealtimeModelErrorEvent",
            "agents.realtime.model_events.RealtimeModelToolCallEvent",
            "agents.realtime.model_inputs.RealtimeModelSendAudio",
            "agents.realtime.model_inputs.RealtimeModelSendInterrupt",
            "agents.realtime.model_inputs.RealtimeModelSendSessionUpdate",
            "agents.realtime.model_inputs.RealtimeModelSendToolOutput",
            "agents.realtime.model_inputs.RealtimeModelSendUserInput",
            "agents.realtime.openai_realtime.OpenAIRealtimeWebSocketModel",
            "agents.tool.Tool",
            "agents.realtime._util.calculate_audio_length_ms"
        ],
        "classes": [
            {
                "class_name": "TestOpenAIRealtimeWebSocketModel",
                "methods": [
                    "model",
                    "mock_websocket"
                ]
            },
            {
                "class_name": "TestConnectionLifecycle",
                "methods": []
            },
            {
                "class_name": "TestEventHandlingRobustness",
                "methods": []
            },
            {
                "class_name": "TestSendEventAndConfig",
                "methods": [
                    "test_add_remove_listener_and_tools_conversion",
                    "test_get_and_update_session_config",
                    "test_calculate_audio_length_ms_pure_function"
                ]
            },
            {
                "class_name": "X",
                "methods": []
            }
        ],
        "functions": {
            "model": [
                "OpenAIRealtimeWebSocketModel"
            ],
            "mock_websocket": [
                "AsyncMock"
            ],
            "mock_create_task_func": [
                "close"
            ],
            "get_api_key": [],
            "test_add_remove_listener_and_tools_conversion": [
                "AsyncMock",
                "add_listener",
                "len",
                "remove_listener",
                "raises",
                "_tools_to_session_tools",
                "cast",
                "X",
                "handoff",
                "Agent",
                "startswith"
            ],
            "test_get_and_update_session_config": [
                "_get_session_config"
            ],
            "test_calculate_audio_length_ms_pure_function": [
                "calculate_audio_length_ms"
            ]
        }
    },
    "tests/realtime/__init__.py": {
        "file_name": "/tests/realtime/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "tests/realtime/test_session.py": {
        "file_name": "/tests/realtime/test_session.py",
        "imports": [
            "asyncio",
            "typing.Any",
            "typing.cast",
            "unittest.mock.AsyncMock",
            "unittest.mock.Mock",
            "unittest.mock.PropertyMock",
            "unittest.mock.patch",
            "pytest",
            "agents.exceptions.UserError",
            "agents.guardrail.GuardrailFunctionOutput",
            "agents.guardrail.OutputGuardrail",
            "agents.handoffs.Handoff",
            "agents.realtime.agent.RealtimeAgent",
            "agents.realtime.config.RealtimeRunConfig",
            "agents.realtime.config.RealtimeSessionModelSettings",
            "agents.realtime.events.RealtimeAgentEndEvent",
            "agents.realtime.events.RealtimeAgentStartEvent",
            "agents.realtime.events.RealtimeAudio",
            "agents.realtime.events.RealtimeAudioEnd",
            "agents.realtime.events.RealtimeAudioInterrupted",
            "agents.realtime.events.RealtimeError",
            "agents.realtime.events.RealtimeGuardrailTripped",
            "agents.realtime.events.RealtimeHistoryAdded",
            "agents.realtime.events.RealtimeHistoryUpdated",
            "agents.realtime.events.RealtimeRawModelEvent",
            "agents.realtime.events.RealtimeToolEnd",
            "agents.realtime.events.RealtimeToolStart",
            "agents.realtime.items.AssistantAudio",
            "agents.realtime.items.AssistantMessageItem",
            "agents.realtime.items.AssistantText",
            "agents.realtime.items.InputAudio",
            "agents.realtime.items.InputText",
            "agents.realtime.items.RealtimeItem",
            "agents.realtime.items.UserMessageItem",
            "agents.realtime.model.RealtimeModel",
            "agents.realtime.model.RealtimeModelConfig",
            "agents.realtime.model_events.RealtimeModelAudioDoneEvent",
            "agents.realtime.model_events.RealtimeModelAudioEvent",
            "agents.realtime.model_events.RealtimeModelAudioInterruptedEvent",
            "agents.realtime.model_events.RealtimeModelConnectionStatusEvent",
            "agents.realtime.model_events.RealtimeModelErrorEvent",
            "agents.realtime.model_events.RealtimeModelInputAudioTranscriptionCompletedEvent",
            "agents.realtime.model_events.RealtimeModelItemDeletedEvent",
            "agents.realtime.model_events.RealtimeModelItemUpdatedEvent",
            "agents.realtime.model_events.RealtimeModelOtherEvent",
            "agents.realtime.model_events.RealtimeModelToolCallEvent",
            "agents.realtime.model_events.RealtimeModelTranscriptDeltaEvent",
            "agents.realtime.model_events.RealtimeModelTurnEndedEvent",
            "agents.realtime.model_events.RealtimeModelTurnStartedEvent",
            "agents.realtime.model_inputs.RealtimeModelSendAudio",
            "agents.realtime.model_inputs.RealtimeModelSendInterrupt",
            "agents.realtime.model_inputs.RealtimeModelSendSessionUpdate",
            "agents.realtime.model_inputs.RealtimeModelSendUserInput",
            "agents.realtime.session.RealtimeSession",
            "agents.tool.FunctionTool",
            "agents.tool_context.ToolContext",
            "agents.realtime.model_inputs.RealtimeModelSendAudio",
            "agents.realtime.model_inputs.RealtimeModelSendInterrupt",
            "agents.realtime.model_inputs.RealtimeModelSendToolOutput",
            "agents.realtime.model_inputs.RealtimeModelSendUserInput",
            "pytest",
            "agents.exceptions.ModelBehaviorError",
            "asyncio",
            "asyncio"
        ],
        "classes": [
            {
                "class_name": "_DummyModel",
                "methods": [
                    "__init__",
                    "add_listener",
                    "remove_listener"
                ]
            },
            {
                "class_name": "_FakeAudio",
                "methods": []
            },
            {
                "class_name": "MockRealtimeModel",
                "methods": [
                    "__init__",
                    "add_listener",
                    "remove_listener"
                ]
            },
            {
                "class_name": "TestEventHandling",
                "methods": []
            },
            {
                "class_name": "TestHistoryManagement",
                "methods": [
                    "test_merge_transcript_into_existing_audio_message",
                    "test_merge_transcript_preserves_other_items",
                    "test_merge_transcript_only_affects_matching_audio_content",
                    "test_update_existing_item_by_id",
                    "test_update_existing_item_preserves_order",
                    "test_insert_new_item_after_previous_item",
                    "test_insert_new_item_after_nonexistent_previous_item",
                    "test_add_new_item_to_end_when_no_previous_item_id",
                    "test_add_first_item_to_empty_history",
                    "test_complex_insertion_scenario"
                ]
            },
            {
                "class_name": "TestToolCallExecution",
                "methods": []
            },
            {
                "class_name": "TestGuardrailFunctionality",
                "methods": [
                    "triggered_guardrail",
                    "safe_guardrail"
                ]
            },
            {
                "class_name": "TestModelSettingsIntegration",
                "methods": []
            },
            {
                "class_name": "TestModelSettingsPrecedence",
                "methods": []
            },
            {
                "class_name": "TestUpdateAgentFunctionality",
                "methods": []
            },
            {
                "class_name": "TestTranscriptPreservation",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "add_listener": [
                "append"
            ],
            "remove_listener": [
                "remove"
            ],
            "mock_agent": [
                "Mock",
                "AsyncMock",
                "type",
                "PropertyMock"
            ],
            "mock_model": [
                "MockRealtimeModel"
            ],
            "mock_function_tool": [
                "Mock",
                "AsyncMock"
            ],
            "mock_handoff": [
                "Mock"
            ],
            "test_merge_transcript_into_existing_audio_message": [
                "UserMessageItem",
                "InputText",
                "InputAudio",
                "RealtimeModelInputAudioTranscriptionCompletedEvent",
                "_get_new_history",
                "cast",
                "len",
                "hasattr"
            ],
            "test_merge_transcript_preserves_other_items": [
                "UserMessageItem",
                "InputText",
                "InputAudio",
                "AssistantMessageItem",
                "AssistantText",
                "RealtimeModelInputAudioTranscriptionCompletedEvent",
                "_get_new_history",
                "cast",
                "len",
                "hasattr"
            ],
            "test_merge_transcript_only_affects_matching_audio_content": [
                "UserMessageItem",
                "InputText",
                "InputAudio",
                "RealtimeModelInputAudioTranscriptionCompletedEvent",
                "_get_new_history",
                "cast"
            ],
            "test_update_existing_item_by_id": [
                "AssistantMessageItem",
                "AssistantText",
                "_get_new_history",
                "cast",
                "len"
            ],
            "test_update_existing_item_preserves_order": [
                "AssistantMessageItem",
                "AssistantText",
                "_get_new_history",
                "cast",
                "len"
            ],
            "test_insert_new_item_after_previous_item": [
                "AssistantMessageItem",
                "AssistantText",
                "_get_new_history",
                "cast",
                "len"
            ],
            "test_insert_new_item_after_nonexistent_previous_item": [
                "AssistantMessageItem",
                "AssistantText",
                "_get_new_history",
                "cast",
                "len"
            ],
            "test_add_new_item_to_end_when_no_previous_item_id": [
                "AssistantMessageItem",
                "AssistantText",
                "_get_new_history",
                "cast",
                "len"
            ],
            "test_add_first_item_to_empty_history": [
                "AssistantMessageItem",
                "AssistantText",
                "_get_new_history",
                "len"
            ],
            "test_complex_insertion_scenario": [
                "AssistantMessageItem",
                "AssistantText",
                "_get_new_history",
                "len",
                "cast"
            ],
            "triggered_guardrail": [
                "OutputGuardrail"
            ],
            "guardrail_func": [
                "GuardrailFunctionOutput"
            ],
            "safe_guardrail": [
                "OutputGuardrail"
            ],
            "create_triggered_guardrail": [
                "OutputGuardrail"
            ]
        }
    },
    "tests/realtime/test_playback_tracker.py": {
        "file_name": "/tests/realtime/test_playback_tracker.py",
        "imports": [
            "unittest.mock.AsyncMock",
            "pytest",
            "agents.realtime._default_tracker.ModelAudioTracker",
            "agents.realtime.model.RealtimePlaybackTracker",
            "agents.realtime.model_inputs.RealtimeModelSendInterrupt",
            "agents.realtime.openai_realtime.OpenAIRealtimeWebSocketModel",
            "agents.realtime._util.calculate_audio_length_ms"
        ],
        "classes": [
            {
                "class_name": "TestPlaybackTracker",
                "methods": [
                    "model",
                    "test_audio_state_accumulation_across_deltas",
                    "test_state_cleanup_on_interruption",
                    "test_audio_length_calculation_with_different_formats"
                ]
            }
        ],
        "functions": {
            "model": [
                "OpenAIRealtimeWebSocketModel"
            ],
            "test_audio_state_accumulation_across_deltas": [
                "ModelAudioTracker",
                "set_audio_format",
                "on_audio_delta",
                "get_state",
                "abs"
            ],
            "test_state_cleanup_on_interruption": [
                "ModelAudioTracker",
                "set_audio_format",
                "on_audio_delta",
                "get_last_audio_item",
                "on_interrupted",
                "RealtimePlaybackTracker",
                "on_play_ms",
                "get_state"
            ],
            "test_audio_length_calculation_with_different_formats": [
                "calculate_audio_length_ms"
            ]
        }
    },
    "tests/realtime/test_model_events.py": {
        "file_name": "/tests/realtime/test_model_events.py",
        "imports": [
            "typing.get_args",
            "agents.realtime.model_events.RealtimeModelEvent"
        ],
        "classes": [],
        "functions": {
            "test_all_events_have_type": [
                "get_args",
                "len",
                "isinstance"
            ]
        }
    },
    "tests/realtime/test_item_parsing.py": {
        "file_name": "/tests/realtime/test_item_parsing.py",
        "imports": [
            "openai.types.realtime.realtime_conversation_item_assistant_message.Content",
            "openai.types.realtime.realtime_conversation_item_assistant_message.RealtimeConversationItemAssistantMessage",
            "openai.types.realtime.realtime_conversation_item_system_message.Content",
            "openai.types.realtime.realtime_conversation_item_system_message.RealtimeConversationItemSystemMessage",
            "openai.types.realtime.realtime_conversation_item_user_message.Content",
            "openai.types.realtime.realtime_conversation_item_user_message.RealtimeConversationItemUserMessage",
            "agents.realtime.items.AssistantMessageItem",
            "agents.realtime.items.RealtimeMessageItem",
            "agents.realtime.items.SystemMessageItem",
            "agents.realtime.items.UserMessageItem",
            "agents.realtime.openai_realtime._ConversionHelper"
        ],
        "classes": [],
        "functions": {
            "test_user_message_conversion": [
                "RealtimeConversationItemUserMessage",
                "UserMessageContent",
                "conversation_item_to_realtime_message_item",
                "isinstance"
            ],
            "test_assistant_message_conversion": [
                "RealtimeConversationItemAssistantMessage",
                "AssistantMessageContent",
                "conversation_item_to_realtime_message_item",
                "isinstance"
            ],
            "test_system_message_conversion": [
                "RealtimeConversationItemSystemMessage",
                "SystemMessageContent",
                "conversation_item_to_realtime_message_item",
                "isinstance"
            ]
        }
    },
    "tests/realtime/test_ga_session_update_normalization.py": {
        "file_name": "/tests/realtime/test_ga_session_update_normalization.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "typing.cast",
            "pytest",
            "websockets.asyncio.client.ClientConnection",
            "agents.realtime.openai_realtime.OpenAIRealtimeWebSocketModel"
        ],
        "classes": [
            {
                "class_name": "_DummyWS",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": []
        }
    },
    "tests/realtime/test_agent.py": {
        "file_name": "/tests/realtime/test_agent.py",
        "imports": [
            "__future__.annotations",
            "pytest",
            "agents.RunContextWrapper",
            "agents.realtime.agent.RealtimeAgent"
        ],
        "classes": [],
        "functions": {
            "test_can_initialize_realtime_agent": [
                "RealtimeAgent"
            ],
            "_instructions": []
        }
    },
    "tests/realtime/test_conversion_helpers.py": {
        "file_name": "/tests/realtime/test_conversion_helpers.py",
        "imports": [
            "__future__.annotations",
            "base64",
            "unittest.mock.Mock",
            "pytest",
            "openai.types.realtime.conversation_item_create_event.ConversationItemCreateEvent",
            "openai.types.realtime.conversation_item_truncate_event.ConversationItemTruncateEvent",
            "openai.types.realtime.input_audio_buffer_append_event.InputAudioBufferAppendEvent",
            "openai.types.realtime.realtime_conversation_item_function_call_output.RealtimeConversationItemFunctionCallOutput",
            "pydantic.ValidationError",
            "agents.realtime.config.RealtimeModelTracingConfig",
            "agents.realtime.model_inputs.RealtimeModelSendAudio",
            "agents.realtime.model_inputs.RealtimeModelSendRawMessage",
            "agents.realtime.model_inputs.RealtimeModelSendToolOutput",
            "agents.realtime.model_inputs.RealtimeModelSendUserInput",
            "agents.realtime.model_inputs.RealtimeModelUserInputMessage",
            "agents.realtime.openai_realtime._ConversionHelper"
        ],
        "classes": [
            {
                "class_name": "TestConversionHelperTryConvertRawMessage",
                "methods": [
                    "test_try_convert_raw_message_valid_session_update",
                    "test_try_convert_raw_message_valid_response_create",
                    "test_try_convert_raw_message_invalid_type",
                    "test_try_convert_raw_message_malformed_data",
                    "test_try_convert_raw_message_missing_type"
                ]
            },
            {
                "class_name": "TestConversionHelperTracingConfig",
                "methods": [
                    "test_convert_tracing_config_none",
                    "test_convert_tracing_config_auto",
                    "test_convert_tracing_config_dict_full",
                    "test_convert_tracing_config_dict_partial",
                    "test_convert_tracing_config_empty_dict"
                ]
            },
            {
                "class_name": "TestConversionHelperUserInput",
                "methods": [
                    "test_convert_user_input_to_conversation_item_string",
                    "test_convert_user_input_to_conversation_item_dict",
                    "test_convert_user_input_to_conversation_item_dict_empty_content",
                    "test_convert_user_input_to_item_create"
                ]
            },
            {
                "class_name": "TestConversionHelperAudio",
                "methods": [
                    "test_convert_audio_to_input_audio_buffer_append",
                    "test_convert_audio_to_input_audio_buffer_append_empty",
                    "test_convert_audio_to_input_audio_buffer_append_large_data"
                ]
            },
            {
                "class_name": "TestConversionHelperToolOutput",
                "methods": [
                    "test_convert_tool_output",
                    "test_convert_tool_output_no_call_id",
                    "test_convert_tool_output_empty_output"
                ]
            },
            {
                "class_name": "TestConversionHelperInterrupt",
                "methods": [
                    "test_convert_interrupt",
                    "test_convert_interrupt_zero_time",
                    "test_convert_interrupt_large_values",
                    "test_convert_interrupt_empty_item_id"
                ]
            }
        ],
        "functions": {
            "test_try_convert_raw_message_valid_session_update": [
                "RealtimeModelSendRawMessage",
                "try_convert_raw_message"
            ],
            "test_try_convert_raw_message_valid_response_create": [
                "RealtimeModelSendRawMessage",
                "try_convert_raw_message"
            ],
            "test_try_convert_raw_message_invalid_type": [
                "RealtimeModelSendRawMessage",
                "try_convert_raw_message"
            ],
            "test_try_convert_raw_message_malformed_data": [
                "RealtimeModelSendRawMessage",
                "try_convert_raw_message"
            ],
            "test_try_convert_raw_message_missing_type": [
                "RealtimeModelSendRawMessage",
                "try_convert_raw_message"
            ],
            "test_convert_tracing_config_none": [
                "convert_tracing_config"
            ],
            "test_convert_tracing_config_auto": [
                "convert_tracing_config"
            ],
            "test_convert_tracing_config_dict_full": [
                "convert_tracing_config"
            ],
            "test_convert_tracing_config_dict_partial": [
                "convert_tracing_config"
            ],
            "test_convert_tracing_config_empty_dict": [
                "convert_tracing_config"
            ],
            "test_convert_user_input_to_conversation_item_string": [
                "RealtimeModelSendUserInput",
                "convert_user_input_to_conversation_item",
                "len"
            ],
            "test_convert_user_input_to_conversation_item_dict": [
                "RealtimeModelSendUserInput",
                "convert_user_input_to_conversation_item",
                "len"
            ],
            "test_convert_user_input_to_conversation_item_dict_empty_content": [
                "RealtimeModelSendUserInput",
                "convert_user_input_to_conversation_item",
                "len"
            ],
            "test_convert_user_input_to_item_create": [
                "RealtimeModelSendUserInput",
                "convert_user_input_to_item_create",
                "isinstance"
            ],
            "test_convert_audio_to_input_audio_buffer_append": [
                "RealtimeModelSendAudio",
                "convert_audio_to_input_audio_buffer_append",
                "isinstance",
                "decode",
                "b64encode"
            ],
            "test_convert_audio_to_input_audio_buffer_append_empty": [
                "RealtimeModelSendAudio",
                "convert_audio_to_input_audio_buffer_append",
                "isinstance"
            ],
            "test_convert_audio_to_input_audio_buffer_append_large_data": [
                "RealtimeModelSendAudio",
                "convert_audio_to_input_audio_buffer_append",
                "isinstance",
                "b64decode"
            ],
            "test_convert_tool_output": [
                "Mock",
                "RealtimeModelSendToolOutput",
                "convert_tool_output",
                "isinstance"
            ],
            "test_convert_tool_output_no_call_id": [
                "Mock",
                "RealtimeModelSendToolOutput",
                "raises",
                "convert_tool_output"
            ],
            "test_convert_tool_output_empty_output": [
                "Mock",
                "RealtimeModelSendToolOutput",
                "convert_tool_output",
                "isinstance"
            ],
            "test_convert_interrupt": [
                "convert_interrupt",
                "isinstance"
            ],
            "test_convert_interrupt_zero_time": [
                "convert_interrupt",
                "isinstance"
            ],
            "test_convert_interrupt_large_values": [
                "convert_interrupt",
                "isinstance"
            ],
            "test_convert_interrupt_empty_item_id": [
                "convert_interrupt",
                "isinstance"
            ]
        }
    },
    "tests/realtime/test_runner.py": {
        "file_name": "/tests/realtime/test_runner.py",
        "imports": [
            "unittest.mock.AsyncMock",
            "unittest.mock.Mock",
            "unittest.mock.patch",
            "pytest",
            "agents.realtime.agent.RealtimeAgent",
            "agents.realtime.config.RealtimeRunConfig",
            "agents.realtime.config.RealtimeSessionModelSettings",
            "agents.realtime.model.RealtimeModel",
            "agents.realtime.model.RealtimeModelConfig",
            "agents.realtime.runner.RealtimeRunner",
            "agents.realtime.session.RealtimeSession",
            "agents.tool.function_tool"
        ],
        "classes": [
            {
                "class_name": "MockRealtimeModel",
                "methods": [
                    "__init__",
                    "add_listener",
                    "remove_listener"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "add_listener": [],
            "remove_listener": [],
            "mock_agent": [
                "Mock",
                "AsyncMock"
            ],
            "mock_model": [
                "MockRealtimeModel"
            ],
            "tool_one": []
        }
    },
    "tests/realtime/test_tracing.py": {
        "file_name": "/tests/realtime/test_tracing.py",
        "imports": [
            "typing.cast",
            "unittest.mock.AsyncMock",
            "unittest.mock.Mock",
            "unittest.mock.patch",
            "pytest",
            "openai.types.realtime.realtime_session_create_request.RealtimeSessionCreateRequest",
            "openai.types.realtime.realtime_tracing_config.TracingConfiguration",
            "agents.realtime.agent.RealtimeAgent",
            "agents.realtime.model.RealtimeModel",
            "agents.realtime.openai_realtime.OpenAIRealtimeWebSocketModel",
            "agents.realtime.session.RealtimeSession",
            "openai.types.realtime.session_update_event.SessionUpdateEvent",
            "openai.types.realtime.session_update_event.SessionUpdateEvent",
            "openai.types.realtime.session_update_event.SessionUpdateEvent"
        ],
        "classes": [
            {
                "class_name": "TestRealtimeTracingIntegration",
                "methods": [
                    "model",
                    "mock_websocket"
                ]
            }
        ],
        "functions": {
            "model": [
                "OpenAIRealtimeWebSocketModel"
            ],
            "mock_websocket": [
                "AsyncMock"
            ]
        }
    },
    "tests/realtime/test_openai_realtime_conversions.py": {
        "file_name": "/tests/realtime/test_openai_realtime_conversions.py",
        "imports": [
            "typing.cast",
            "pytest",
            "openai.types.realtime.realtime_conversation_item_user_message.RealtimeConversationItemUserMessage",
            "openai.types.realtime.realtime_tracing_config.TracingConfiguration",
            "agents.Agent",
            "agents.exceptions.UserError",
            "agents.handoffs.handoff",
            "agents.realtime.config.RealtimeModelTracingConfig",
            "agents.realtime.model_inputs.RealtimeModelSendRawMessage",
            "agents.realtime.model_inputs.RealtimeModelSendUserInput",
            "agents.realtime.model_inputs.RealtimeModelUserInputMessage",
            "agents.realtime.openai_realtime.OpenAIRealtimeWebSocketModel",
            "agents.realtime.openai_realtime._ConversionHelper",
            "agents.realtime.openai_realtime.get_api_key",
            "agents.tool.Tool",
            "agents.realtime.openai_realtime._ConversionHelper"
        ],
        "classes": [
            {
                "class_name": "NotFunctionTool",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "test_try_convert_raw_message_invalid_returns_none": [
                "RealtimeModelSendRawMessage",
                "try_convert_raw_message"
            ],
            "test_convert_user_input_to_conversation_item_dict_and_str": [
                "RealtimeModelSendUserInput",
                "cast",
                "convert_user_input_to_conversation_item"
            ],
            "test_convert_tracing_config_variants": [
                "convert_tracing_config",
                "cast"
            ],
            "test_tools_to_session_tools_raises_on_non_function_tool": [
                "OpenAIRealtimeWebSocketModel",
                "raises",
                "_tools_to_session_tools",
                "cast",
                "NotFunctionTool"
            ],
            "__init__": [],
            "test_tools_to_session_tools_includes_handoffs": [
                "Agent",
                "handoff",
                "OpenAIRealtimeWebSocketModel",
                "_tools_to_session_tools",
                "startswith"
            ]
        }
    },
    "tests/realtime/test_realtime_handoffs.py": {
        "file_name": "/tests/realtime/test_realtime_handoffs.py",
        "imports": [
            "typing.Any",
            "unittest.mock.Mock",
            "pytest",
            "agents.Agent",
            "agents.exceptions.ModelBehaviorError",
            "agents.exceptions.UserError",
            "agents.realtime.RealtimeAgent",
            "agents.realtime.realtime_handoff",
            "agents.run_context.RunContextWrapper",
            "agents.handoff",
            "agents.handoffs.Handoff",
            "agents.realtime.handoffs.realtime_handoff",
            "collections.abc.Awaitable",
            "typing.cast"
        ],
        "classes": [],
        "functions": {
            "test_realtime_handoff_creation": [
                "RealtimeAgent",
                "realtime_handoff"
            ],
            "test_realtime_handoff_with_custom_params": [
                "RealtimeAgent",
                "realtime_handoff"
            ],
            "test_realtime_handoff_with_on_handoff_callback": [
                "RealtimeAgent",
                "realtime_handoff"
            ],
            "on_handoff_callback": [
                "append"
            ],
            "test_regular_agent_handoff_still_works": [
                "Agent",
                "handoff",
                "hasattr"
            ],
            "test_type_annotations_work": [
                "RealtimeAgent",
                "realtime_handoff",
                "isinstance"
            ],
            "test_realtime_handoff_invalid_param_counts_raise": [
                "RealtimeAgent",
                "raises",
                "realtime_handoff"
            ],
            "bad2": [],
            "bad1": []
        }
    },
    "tests/tracing/test_set_api_key_fix.py": {
        "file_name": "/tests/tracing/test_set_api_key_fix.py",
        "imports": [
            "os",
            "agents.tracing.processors.BackendSpanExporter"
        ],
        "classes": [],
        "functions": {
            "test_set_api_key_preserves_env_fallback": [
                "get",
                "BackendSpanExporter",
                "set_api_key",
                "pop"
            ]
        }
    },
    "tests/tracing/test_processor_api_key.py": {
        "file_name": "/tests/tracing/test_processor_api_key.py",
        "imports": [
            "pytest",
            "agents.tracing.processors.BackendSpanExporter"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/mcp/test_mcp_util.py": {
        "file_name": "/tests/mcp/test_mcp_util.py",
        "imports": [
            "logging",
            "typing.Any",
            "pytest",
            "inline_snapshot.snapshot",
            "mcp.types.CallToolResult",
            "mcp.types.TextContent",
            "mcp.types.Tool",
            "pydantic.BaseModel",
            "pydantic.TypeAdapter",
            "agents.Agent",
            "agents.FunctionTool",
            "agents.RunContextWrapper",
            "agents.exceptions.AgentsException",
            "agents.exceptions.ModelBehaviorError",
            "agents.mcp.MCPServer",
            "agents.mcp.MCPUtil",
            "helpers.FakeMCPServer",
            "mcp.types.TextContent",
            "json",
            "json",
            "json",
            "json",
            "json",
            "json",
            "json"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            },
            {
                "class_name": "Bar",
                "methods": []
            },
            {
                "class_name": "CrashingFakeMCPServer",
                "methods": []
            },
            {
                "class_name": "StructuredContentTestServer",
                "methods": [
                    "__init__",
                    "set_test_result"
                ]
            }
        ],
        "functions": {
            "_convertible_schema": [
                "model_json_schema"
            ],
            "__init__": [
                "__init__",
                "super"
            ],
            "set_test_result": []
        }
    },
    "tests/mcp/test_client_session_retries.py": {
        "file_name": "/tests/mcp/test_client_session_retries.py",
        "imports": [
            "typing.cast",
            "pytest",
            "mcp.ClientSession",
            "mcp.Tool",
            "mcp.types.CallToolResult",
            "mcp.types.ListToolsResult",
            "agents.mcp.server._MCPServerWithClientSession"
        ],
        "classes": [
            {
                "class_name": "DummySession",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyServer",
                "methods": [
                    "__init__",
                    "create_streams",
                    "name"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "cast"
            ],
            "create_streams": [],
            "name": []
        }
    },
    "tests/mcp/test_tool_filtering.py": {
        "file_name": "/tests/mcp/test_tool_filtering.py",
        "imports": [
            "asyncio",
            "pytest",
            "mcp.Tool",
            "agents.Agent",
            "agents.mcp.ToolFilterContext",
            "agents.mcp.create_static_tool_filter",
            "agents.run_context.RunContextWrapper",
            "helpers.FakeMCPServer"
        ],
        "classes": [],
        "functions": {
            "create_test_agent": [
                "Agent"
            ],
            "create_test_context": [
                "RunContextWrapper"
            ],
            "sync_filter": [
                "startswith"
            ],
            "context_independent_filter": [
                "startswith"
            ],
            "context_dependent_filter": [
                "lower",
                "startswith"
            ],
            "error_prone_filter": [
                "ValueError"
            ]
        }
    },
    "tests/mcp/test_mcp_tracing.py": {
        "file_name": "/tests/mcp/test_mcp_tracing.py",
        "imports": [
            "pytest",
            "inline_snapshot.snapshot",
            "agents.Agent",
            "agents.Runner",
            "fake_model.FakeModel",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_text_message",
            "testing_processor.SPAN_PROCESSOR_TESTING",
            "testing_processor.fetch_normalized_spans",
            "helpers.FakeMCPServer"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/mcp/test_connect_disconnect.py": {
        "file_name": "/tests/mcp/test_connect_disconnect.py",
        "imports": [
            "unittest.mock.AsyncMock",
            "unittest.mock.patch",
            "pytest",
            "mcp.types.ListToolsResult",
            "mcp.types.Tool",
            "agents.mcp.MCPServerStdio",
            "helpers.DummyStreamsContextManager",
            "helpers.tee"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/mcp/test_runner_calls_mcp.py": {
        "file_name": "/tests/mcp/test_runner_calls_mcp.py",
        "imports": [
            "json",
            "pytest",
            "pydantic.BaseModel",
            "agents.Agent",
            "agents.ModelBehaviorError",
            "agents.Runner",
            "agents.UserError",
            "fake_model.FakeModel",
            "test_responses.get_function_tool_call",
            "test_responses.get_text_message",
            "helpers.FakeMCPServer"
        ],
        "classes": [
            {
                "class_name": "Foo",
                "methods": []
            }
        ],
        "functions": {}
    },
    "tests/mcp/__init__.py": {
        "file_name": "/tests/mcp/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "tests/mcp/test_streamable_http_client_factory.py": {
        "file_name": "/tests/mcp/test_streamable_http_client_factory.py",
        "imports": [
            "unittest.mock.MagicMock",
            "unittest.mock.patch",
            "httpx",
            "pytest",
            "agents.mcp.MCPServerStreamableHttp",
            "agents.mcp.server.MCPServerStreamableHttpParams"
        ],
        "classes": [
            {
                "class_name": "TestMCPServerStreamableHttpClientFactory",
                "methods": [
                    "test_httpx_client_factory_type_annotation"
                ]
            }
        ],
        "functions": {
            "custom_factory": [
                "AsyncClient",
                "Timeout"
            ],
            "ssl_cert_factory": [
                "AsyncClient",
                "Timeout"
            ],
            "proxy_factory": [
                "AsyncClient",
                "Timeout"
            ],
            "retry_factory": [
                "AsyncClient",
                "Timeout"
            ],
            "test_httpx_client_factory_type_annotation": [
                "hasattr",
                "str"
            ],
            "comprehensive_factory": [
                "AsyncClient",
                "Timeout"
            ]
        }
    },
    "tests/mcp/test_server_errors.py": {
        "file_name": "/tests/mcp/test_server_errors.py",
        "imports": [
            "pytest",
            "agents.Agent",
            "agents.exceptions.UserError",
            "agents.mcp.server._MCPServerWithClientSession",
            "agents.run_context.RunContextWrapper"
        ],
        "classes": [
            {
                "class_name": "CrashingClientSessionServer",
                "methods": [
                    "__init__",
                    "create_streams",
                    "name"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "create_streams": [
                "ValueError"
            ],
            "name": []
        }
    },
    "tests/mcp/helpers.py": {
        "file_name": "/tests/mcp/helpers.py",
        "imports": [
            "asyncio",
            "json",
            "shutil",
            "typing.Any",
            "mcp.Tool",
            "mcp.types.CallToolResult",
            "mcp.types.Content",
            "mcp.types.GetPromptResult",
            "mcp.types.ListPromptsResult",
            "mcp.types.PromptMessage",
            "mcp.types.TextContent",
            "agents.mcp.MCPServer",
            "agents.mcp.server._MCPServerWithClientSession",
            "agents.mcp.util.ToolFilter"
        ],
        "classes": [
            {
                "class_name": "DummyStream",
                "methods": []
            },
            {
                "class_name": "DummyStreamsContextManager",
                "methods": []
            },
            {
                "class_name": "_TestFilterServer",
                "methods": [
                    "__init__",
                    "create_streams",
                    "name"
                ]
            },
            {
                "class_name": "FakeMCPServer",
                "methods": [
                    "__init__",
                    "add_tool",
                    "name"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "Lock"
            ],
            "create_streams": [
                "NotImplementedError"
            ],
            "name": [],
            "add_tool": [
                "append",
                "MCPTool"
            ]
        }
    },
    "tests/mcp/test_caching.py": {
        "file_name": "/tests/mcp/test_caching.py",
        "imports": [
            "unittest.mock.AsyncMock",
            "unittest.mock.patch",
            "pytest",
            "mcp.types.ListToolsResult",
            "mcp.types.Tool",
            "agents.Agent",
            "agents.mcp.MCPServerStdio",
            "agents.run_context.RunContextWrapper",
            "helpers.DummyStreamsContextManager",
            "helpers.tee"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/mcp/test_prompt_server.py": {
        "file_name": "/tests/mcp/test_prompt_server.py",
        "imports": [
            "typing.Any",
            "pytest",
            "agents.Agent",
            "agents.Runner",
            "agents.mcp.MCPServer",
            "fake_model.FakeModel",
            "test_responses.get_text_message",
            "mcp.types.Prompt",
            "mcp.types.ListPromptsResult",
            "mcp.types.GetPromptResult",
            "mcp.types.PromptMessage",
            "mcp.types.TextContent"
        ],
        "classes": [
            {
                "class_name": "FakeMCPPromptServer",
                "methods": [
                    "__init__",
                    "add_prompt",
                    "set_prompt_result",
                    "name"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "add_prompt": [
                "Prompt",
                "append"
            ],
            "set_prompt_result": [],
            "name": []
        }
    },
    "tests/mcp/test_message_handler.py": {
        "file_name": "/tests/mcp/test_message_handler.py",
        "imports": [
            "contextlib",
            "anyio",
            "pytest",
            "mcp.client.session.MessageHandlerFnT",
            "mcp.shared.message.SessionMessage",
            "mcp.shared.session.RequestResponder",
            "mcp.types.ClientResult",
            "mcp.types.Implementation",
            "mcp.types.InitializeResult",
            "mcp.types.ServerCapabilities",
            "mcp.types.ServerNotification",
            "mcp.types.ServerRequest",
            "agents.mcp.server.MCPServerSse",
            "agents.mcp.server.MCPServerStdio",
            "agents.mcp.server.MCPServerStreamableHttp",
            "agents.mcp.server._MCPServerWithClientSession"
        ],
        "classes": [
            {
                "class_name": "_StubClientSession",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "_MessageHandlerTestServer",
                "methods": [
                    "__init__",
                    "create_streams",
                    "name"
                ]
            },
            {
                "class_name": "_AsyncHandler",
                "methods": []
            },
            {
                "class_name": "_AsyncHandler",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "create_streams": [
                "aclose",
                "_streams"
            ],
            "name": [],
            "_recording_client_session": [
                "_StubClientSession"
            ],
            "test_message_handler_propagates_to_server_base": [
                "_AsyncHandler",
                "server_cls",
                "parametrize"
            ]
        }
    },
    "tests/mcp/conftest.py": {
        "file_name": "/tests/mcp/conftest.py",
        "imports": [
            "os",
            "sys"
        ],
        "classes": [],
        "functions": {
            "pytest_ignore_collect": [
                "dirname",
                "startswith",
                "str"
            ]
        }
    },
    "tests/voice/test_workflow.py": {
        "file_name": "/tests/voice/test_workflow.py",
        "imports": [
            "__future__.annotations",
            "json",
            "collections.abc.AsyncIterator",
            "typing.Any",
            "pytest",
            "inline_snapshot.snapshot",
            "openai.types.responses.ResponseCompletedEvent",
            "openai.types.responses.response_text_delta_event.ResponseTextDeltaEvent",
            "agents.Agent",
            "agents.Model",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.Tool",
            "agents.agent_output.AgentOutputSchemaBase",
            "agents.handoffs.Handoff",
            "agents.items.ModelResponse",
            "agents.items.TResponseInputItem",
            "agents.items.TResponseOutputItem",
            "agents.items.TResponseStreamEvent",
            "fake_model.get_response_obj",
            "test_responses.get_function_tool",
            "test_responses.get_function_tool_call",
            "test_responses.get_text_message",
            "agents.voice.SingleAgentVoiceWorkflow"
        ],
        "classes": [
            {
                "class_name": "FakeStreamingModel",
                "methods": [
                    "__init__",
                    "set_next_output",
                    "add_multiple_turn_outputs",
                    "get_next_output"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "set_next_output": [
                "append"
            ],
            "add_multiple_turn_outputs": [
                "extend"
            ],
            "get_next_output": [
                "pop"
            ]
        }
    },
    "tests/voice/test_input.py": {
        "file_name": "/tests/voice/test_input.py",
        "imports": [
            "io",
            "wave",
            "numpy",
            "pytest",
            "agents.UserError",
            "agents.voice.AudioInput",
            "agents.voice.StreamedAudioInput",
            "agents.voice.input.DEFAULT_SAMPLE_RATE",
            "agents.voice.input._buffer_to_audio_file"
        ],
        "classes": [
            {
                "class_name": "TestAudioInput",
                "methods": [
                    "test_audio_input_default_params",
                    "test_audio_input_custom_params",
                    "test_audio_input_to_audio_file"
                ]
            },
            {
                "class_name": "TestStreamedAudioInput",
                "methods": []
            }
        ],
        "functions": {
            "test_buffer_to_audio_file_int16": [
                "linspace",
                "astype",
                "sin",
                "_buffer_to_audio_file",
                "isinstance",
                "open",
                "getnchannels",
                "getsampwidth",
                "getframerate",
                "getnframes",
                "len"
            ],
            "test_buffer_to_audio_file_float32": [
                "linspace",
                "astype",
                "sin",
                "_buffer_to_audio_file",
                "isinstance",
                "open",
                "getnchannels",
                "getsampwidth",
                "getframerate",
                "getnframes",
                "len"
            ],
            "test_buffer_to_audio_file_invalid_dtype": [
                "array",
                "raises",
                "_buffer_to_audio_file"
            ],
            "test_audio_input_default_params": [
                "linspace",
                "astype",
                "sin",
                "AudioInput",
                "array_equal"
            ],
            "test_audio_input_custom_params": [
                "linspace",
                "astype",
                "sin",
                "AudioInput",
                "array_equal"
            ],
            "test_audio_input_to_audio_file": [
                "linspace",
                "astype",
                "sin",
                "AudioInput",
                "to_audio_file",
                "isinstance",
                "open",
                "getnchannels",
                "getsampwidth",
                "getframerate",
                "getnframes",
                "len"
            ]
        }
    },
    "tests/voice/fake_models.py": {
        "file_name": "/tests/voice/fake_models.py",
        "imports": [
            "__future__.annotations",
            "collections.abc.AsyncIterator",
            "typing.Literal",
            "numpy",
            "numpy.typing",
            "agents.voice.AudioInput",
            "agents.voice.StreamedAudioInput",
            "agents.voice.StreamedTranscriptionSession",
            "agents.voice.STTModel",
            "agents.voice.STTModelSettings",
            "agents.voice.TTSModel",
            "agents.voice.TTSModelSettings",
            "agents.voice.VoiceWorkflowBase"
        ],
        "classes": [
            {
                "class_name": "FakeTTS",
                "methods": [
                    "__init__",
                    "model_name"
                ]
            },
            {
                "class_name": "FakeSession",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "FakeSTT",
                "methods": [
                    "__init__",
                    "model_name"
                ]
            },
            {
                "class_name": "FakeWorkflow",
                "methods": [
                    "__init__",
                    "add_output",
                    "add_multiple_outputs"
                ]
            },
            {
                "class_name": "FakeStreamedAudioInput",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [],
            "model_name": [],
            "add_output": [
                "append"
            ],
            "add_multiple_outputs": [
                "extend"
            ]
        }
    },
    "tests/voice/__init__.py": {
        "file_name": "/tests/voice/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "tests/voice/test_openai_stt.py": {
        "file_name": "/tests/voice/test_openai_stt.py",
        "imports": [
            "asyncio",
            "json",
            "time",
            "unittest.mock.AsyncMock",
            "unittest.mock.patch",
            "numpy",
            "pytest",
            "agents.voice.OpenAISTTTranscriptionSession",
            "agents.voice.StreamedAudioInput",
            "agents.voice.STTModelSettings",
            "agents.voice.exceptions.STTWebsocketConnectionError",
            "agents.voice.models.openai_stt.EVENT_INACTIVITY_TIMEOUT",
            "fake_models.FakeStreamedAudioInput"
        ],
        "classes": [],
        "functions": {
            "create_mock_websocket": [
                "AsyncMock",
                "iter"
            ],
            "fake_time": [],
            "fake_time_func": [
                "next"
            ]
        }
    },
    "tests/voice/helpers.py": {
        "file_name": "/tests/voice/helpers.py",
        "imports": [
            "agents.voice.StreamedAudioResult"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/voice/test_openai_tts.py": {
        "file_name": "/tests/voice/test_openai_tts.py",
        "imports": [
            "types.SimpleNamespace",
            "typing.Any",
            "pytest",
            "agents.voice.OpenAITTSModel",
            "agents.voice.TTSModelSettings"
        ],
        "classes": [
            {
                "class_name": "_FakeStreamResponse",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "_make_fake_openai_client": [
                "SimpleNamespace"
            ],
            "fake_create": [
                "_FakeStreamResponse"
            ]
        }
    },
    "tests/voice/test_pipeline.py": {
        "file_name": "/tests/voice/test_pipeline.py",
        "imports": [
            "__future__.annotations",
            "numpy",
            "numpy.typing",
            "pytest",
            "agents.voice.AudioInput",
            "agents.voice.TTSModelSettings",
            "agents.voice.VoicePipeline",
            "agents.voice.VoicePipelineConfig",
            "fake_models.FakeStreamedAudioInput",
            "fake_models.FakeSTT",
            "fake_models.FakeTTS",
            "fake_models.FakeWorkflow",
            "helpers.extract_events"
        ],
        "classes": [],
        "functions": {
            "_transform_data": [
                "astype"
            ]
        }
    },
    "tests/voice/conftest.py": {
        "file_name": "/tests/voice/conftest.py",
        "imports": [
            "os",
            "sys"
        ],
        "classes": [],
        "functions": {
            "pytest_ignore_collect": [
                "dirname",
                "startswith",
                "str"
            ]
        }
    },
    "tests/extensions/memory/test_advanced_sqlite_session.py": {
        "file_name": "/tests/extensions/memory/test_advanced_sqlite_session.py",
        "imports": [
            "typing.Any",
            "typing.Optional",
            "typing.cast",
            "pytest",
            "openai.types.responses.response_usage.InputTokensDetails",
            "openai.types.responses.response_usage.OutputTokensDetails",
            "agents.Agent",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.function_tool",
            "agents.extensions.memory.AdvancedSQLiteSession",
            "agents.result.RunResult",
            "agents.run_context.RunContextWrapper",
            "agents.usage.Usage",
            "tests.fake_model.FakeModel",
            "tests.test_responses.get_text_message"
        ],
        "classes": [],
        "functions": {
            "agent": [
                "Agent",
                "FakeModel"
            ],
            "usage_data": [
                "Usage",
                "InputTokensDetails",
                "OutputTokensDetails"
            ],
            "create_mock_run_result": [
                "Agent",
                "FakeModel",
                "Usage",
                "InputTokensDetails",
                "OutputTokensDetails",
                "RunContextWrapper",
                "RunResult"
            ]
        }
    },
    "tests/extensions/memory/test_encrypt_session.py": {
        "file_name": "/tests/extensions/memory/test_encrypt_session.py",
        "imports": [
            "__future__.annotations",
            "tempfile",
            "time",
            "pathlib.Path",
            "pytest",
            "cryptography.fernet.Fernet",
            "agents.Agent",
            "agents.Runner",
            "agents.SQLiteSession",
            "agents.TResponseInputItem",
            "agents.extensions.memory.encrypt_session.EncryptedSession",
            "tests.fake_model.FakeModel",
            "tests.test_responses.get_text_message"
        ],
        "classes": [
            {
                "class_name": "CustomSession",
                "methods": [
                    "get_stats"
                ]
            }
        ],
        "functions": {
            "agent": [
                "Agent",
                "FakeModel"
            ],
            "encryption_key": [
                "str",
                "decode",
                "generate_key"
            ],
            "underlying_session": [
                "mkdtemp",
                "Path",
                "SQLiteSession"
            ],
            "get_stats": []
        }
    },
    "tests/extensions/memory/test_redis_session.py": {
        "file_name": "/tests/extensions/memory/test_redis_session.py",
        "imports": [
            "__future__.annotations",
            "typing.cast",
            "pytest",
            "agents.Agent",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.extensions.memory.redis_session.RedisSession",
            "tests.fake_model.FakeModel",
            "tests.test_responses.get_text_message",
            "fakeredis.aioredis",
            "redis.asyncio.Redis",
            "uuid",
            "asyncio",
            "fakeredis.aioredis",
            "redis.asyncio",
            "unittest.mock"
        ],
        "classes": [],
        "functions": {
            "agent": [
                "Agent",
                "FakeModel"
            ]
        }
    },
    "tests/extensions/memory/test_sqlalchemy_session.py": {
        "file_name": "/tests/extensions/memory/test_sqlalchemy_session.py",
        "imports": [
            "__future__.annotations",
            "pytest",
            "agents.Agent",
            "agents.Runner",
            "agents.TResponseInputItem",
            "agents.extensions.memory.sqlalchemy_session.SQLAlchemySession",
            "tests.fake_model.FakeModel",
            "tests.test_responses.get_text_message"
        ],
        "classes": [],
        "functions": {
            "agent": [
                "Agent",
                "FakeModel"
            ]
        }
    },
    "tests/model_settings/test_serialization.py": {
        "file_name": "/tests/model_settings/test_serialization.py",
        "imports": [
            "json",
            "dataclasses.fields",
            "openai.types.shared.Reasoning",
            "pydantic.TypeAdapter",
            "pydantic_core.to_json",
            "agents.model_settings.MCPToolChoice",
            "agents.model_settings.ModelSettings"
        ],
        "classes": [],
        "functions": {
            "verify_serialization": [
                "to_json_dict",
                "dumps"
            ],
            "test_basic_serialization": [
                "ModelSettings",
                "verify_serialization"
            ],
            "test_mcp_tool_choice_serialization": [
                "ModelSettings",
                "MCPToolChoice",
                "verify_serialization"
            ],
            "test_all_fields_serialization": [
                "ModelSettings",
                "Reasoning",
                "fields",
                "getattr",
                "verify_serialization"
            ],
            "test_extra_args_serialization": [
                "ModelSettings",
                "to_json_dict",
                "verify_serialization"
            ],
            "test_extra_args_resolve": [
                "ModelSettings",
                "resolve"
            ],
            "test_extra_args_resolve_with_none": [
                "ModelSettings",
                "resolve"
            ],
            "test_extra_args_resolve_both_none": [
                "ModelSettings",
                "resolve"
            ],
            "test_pydantic_serialization": [
                "ModelSettings",
                "Reasoning",
                "to_json",
                "validate_json",
                "TypeAdapter"
            ]
        }
    },
    "tests/fastapi/__init__.py": {
        "file_name": "/tests/fastapi/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "tests/fastapi/test_streaming_context.py": {
        "file_name": "/tests/fastapi/test_streaming_context.py",
        "imports": [
            "pytest",
            "httpx.ASGITransport",
            "httpx.AsyncClient",
            "inline_snapshot.snapshot",
            "fake_model.FakeModel",
            "test_responses.get_text_message",
            "streaming_app.agent",
            "streaming_app.app"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/fastapi/streaming_app.py": {
        "file_name": "/tests/fastapi/streaming_app.py",
        "imports": [
            "collections.abc.AsyncIterator",
            "fastapi.FastAPI",
            "starlette.responses.StreamingResponse",
            "agents.Agent",
            "agents.Runner",
            "agents.RunResultStreaming"
        ],
        "classes": [
            {
                "class_name": "StreamHandler",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": []
        }
    },
    "tests/models/__init__.py": {
        "file_name": "/tests/models/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "tests/models/test_litellm_extra_body.py": {
        "file_name": "/tests/models/test_litellm_extra_body.py",
        "imports": [
            "litellm",
            "pytest",
            "litellm.types.utils.Choices",
            "litellm.types.utils.Message",
            "litellm.types.utils.ModelResponse",
            "litellm.types.utils.Usage",
            "agents.extensions.models.litellm_model.LitellmModel",
            "agents.model_settings.ModelSettings",
            "agents.models.interface.ModelTracing"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/models/test_kwargs_functionality.py": {
        "file_name": "/tests/models/test_kwargs_functionality.py",
        "imports": [
            "litellm",
            "pytest",
            "litellm.types.utils.Choices",
            "litellm.types.utils.Message",
            "litellm.types.utils.ModelResponse",
            "litellm.types.utils.Usage",
            "openai.types.chat.chat_completion.ChatCompletion",
            "openai.types.chat.chat_completion.Choice",
            "openai.types.chat.chat_completion_message.ChatCompletionMessage",
            "openai.types.completion_usage.CompletionUsage",
            "agents.extensions.models.litellm_model.LitellmModel",
            "agents.model_settings.ModelSettings",
            "agents.models.interface.ModelTracing",
            "agents.models.openai_chatcompletions.OpenAIChatCompletionsModel"
        ],
        "classes": [
            {
                "class_name": "MockChatCompletions",
                "methods": []
            },
            {
                "class_name": "MockChat",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "MockClient",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "MockChatCompletions",
                "MockChat"
            ]
        }
    },
    "tests/models/test_litellm_chatcompletions_stream.py": {
        "file_name": "/tests/models/test_litellm_chatcompletions_stream.py",
        "imports": [
            "collections.abc.AsyncIterator",
            "pytest",
            "openai.types.chat.chat_completion_chunk.ChatCompletionChunk",
            "openai.types.chat.chat_completion_chunk.Choice",
            "openai.types.chat.chat_completion_chunk.ChoiceDelta",
            "openai.types.chat.chat_completion_chunk.ChoiceDeltaToolCall",
            "openai.types.chat.chat_completion_chunk.ChoiceDeltaToolCallFunction",
            "openai.types.completion_usage.CompletionTokensDetails",
            "openai.types.completion_usage.CompletionUsage",
            "openai.types.completion_usage.PromptTokensDetails",
            "openai.types.responses.Response",
            "openai.types.responses.ResponseFunctionToolCall",
            "openai.types.responses.ResponseOutputMessage",
            "openai.types.responses.ResponseOutputRefusal",
            "openai.types.responses.ResponseOutputText",
            "agents.extensions.models.litellm_model.LitellmModel",
            "agents.extensions.models.litellm_provider.LitellmProvider",
            "agents.model_settings.ModelSettings",
            "agents.models.interface.ModelTracing"
        ],
        "classes": [],
        "functions": {}
    },
    "tests/models/test_litellm_user_agent.py": {
        "file_name": "/tests/models/test_litellm_user_agent.py",
        "imports": [
            "__future__.annotations",
            "typing.Any",
            "pytest",
            "agents.ModelSettings",
            "agents.ModelTracing",
            "agents.__version__",
            "agents.models.chatcmpl_helpers.HEADERS_OVERRIDE",
            "importlib",
            "sys",
            "types"
        ],
        "classes": [
            {
                "class_name": "DummyMessage",
                "methods": [
                    "get",
                    "model_dump"
                ]
            },
            {
                "class_name": "Choices",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "DummyModelResponse",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "get": [],
            "model_dump": [],
            "__init__": [
                "DummyMessage",
                "Choices"
            ]
        }
    },
    "tests/models/test_default_models.py": {
        "file_name": "/tests/models/test_default_models.py",
        "imports": [
            "os",
            "unittest.mock.patch",
            "agents.Agent",
            "agents.model_settings.ModelSettings",
            "agents.models.get_default_model",
            "agents.models.get_default_model_settings",
            "agents.models.gpt_5_reasoning_settings_required",
            "agents.models.is_gpt_5_default"
        ],
        "classes": [],
        "functions": {
            "test_default_model_is_gpt_4_1": [
                "get_default_model",
                "is_gpt_5_default",
                "gpt_5_reasoning_settings_required",
                "get_default_model_settings"
            ],
            "test_default_model_env_gpt_5": [
                "get_default_model",
                "is_gpt_5_default",
                "gpt_5_reasoning_settings_required",
                "get_default_model_settings",
                "dict"
            ],
            "test_default_model_env_gpt_5_mini": [
                "get_default_model",
                "is_gpt_5_default",
                "gpt_5_reasoning_settings_required",
                "get_default_model_settings",
                "dict"
            ],
            "test_default_model_env_gpt_5_nano": [
                "get_default_model",
                "is_gpt_5_default",
                "gpt_5_reasoning_settings_required",
                "get_default_model_settings",
                "dict"
            ],
            "test_default_model_env_gpt_5_chat_latest": [
                "get_default_model",
                "is_gpt_5_default",
                "gpt_5_reasoning_settings_required",
                "get_default_model_settings",
                "dict"
            ],
            "test_default_model_env_gpt_4o": [
                "get_default_model",
                "is_gpt_5_default",
                "gpt_5_reasoning_settings_required",
                "get_default_model_settings",
                "dict"
            ],
            "test_agent_uses_gpt_5_default_model_settings": [
                "Agent",
                "dict"
            ],
            "test_agent_resets_model_settings_for_non_gpt_5_models": [
                "Agent",
                "ModelSettings",
                "dict"
            ]
        }
    },
    "tests/models/conftest.py": {
        "file_name": "/tests/models/conftest.py",
        "imports": [
            "os",
            "sys"
        ],
        "classes": [],
        "functions": {
            "pytest_ignore_collect": [
                "dirname",
                "startswith",
                "str"
            ]
        }
    },
    "tests/models/test_map.py": {
        "file_name": "/tests/models/test_map.py",
        "imports": [
            "agents.Agent",
            "agents.OpenAIResponsesModel",
            "agents.RunConfig",
            "agents.extensions.models.litellm_model.LitellmModel",
            "agents.run.AgentRunner"
        ],
        "classes": [],
        "functions": {
            "test_no_prefix_is_openai": [
                "Agent",
                "_get_model",
                "RunConfig",
                "isinstance"
            ],
            "openai_prefix_is_openai": [
                "Agent",
                "_get_model",
                "RunConfig",
                "isinstance"
            ],
            "test_litellm_prefix_is_litellm": [
                "Agent",
                "_get_model",
                "RunConfig",
                "isinstance"
            ]
        }
    }
}
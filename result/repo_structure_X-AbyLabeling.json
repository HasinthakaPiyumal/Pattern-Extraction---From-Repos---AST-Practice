{
    "scripts/generate_languages.py": {
        "file_name": "/scripts/generate_languages.py",
        "imports": [
            "os",
            "glob",
            "PyQt5.QtCore"
        ],
        "classes": [],
        "functions": {}
    },
    "scripts/compile_languages.py": {
        "file_name": "/scripts/compile_languages.py",
        "imports": [
            "os"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/app.py": {
        "file_name": "/anylabeling/app.py",
        "imports": [
            "os",
            "argparse",
            "codecs",
            "logging",
            "sys",
            "pathlib.Path",
            "yaml",
            "PyQt5.QtCore",
            "PyQt5.QtWidgets",
            "anylabeling.app_info.__appname__",
            "anylabeling.app_info.__version__",
            "anylabeling.app_info.__url__",
            "anylabeling.config.get_config",
            "anylabeling.config",
            "anylabeling.views.mainwindow.MainWindow",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.new_icon",
            "anylabeling.views.labeling.utils.gradient_text",
            "anylabeling.views.labeling.utils.update_checker.check_for_updates_async",
            "anylabeling.resources.resources"
        ],
        "classes": [],
        "functions": {
            "main": [
                "ArgumentParser",
                "add_argument",
                "join",
                "expanduser",
                "parse_args",
                "hasattr",
                "isfile",
                "open",
                "strip",
                "split",
                "safe_load",
                "pop",
                "setLevel",
                "getattr",
                "upper",
                "info",
                "gradient_text",
                "get_config",
                "error",
                "exit",
                "endswith",
                "get",
                "name",
                "system",
                "QTranslator",
                "load",
                "setAttribute",
                "QApplication",
                "processEvents",
                "setApplicationName",
                "setApplicationVersion",
                "setWindowIcon",
                "new_icon",
                "installTranslator",
                "warning",
                "MainWindow",
                "fileName",
                "clear",
                "singleShot",
                "showMaximized",
                "raise_",
                "exec"
            ],
            "delayed_update_check": [
                "check_for_updates_async"
            ]
        }
    },
    "anylabeling/utils.py": {
        "file_name": "/anylabeling/utils.py",
        "imports": [
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.pyqtSlot"
        ],
        "classes": [
            {
                "class_name": "GenericWorker",
                "methods": [
                    "__init__",
                    "run"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "run": [
                "func",
                "emit",
                "pyqtSlot"
            ]
        }
    },
    "anylabeling/checks.py": {
        "file_name": "/anylabeling/checks.py",
        "imports": [
            "sys",
            "pathlib.Path",
            "logging",
            "pprint",
            "app_info.__appname__",
            "app_info.__version__",
            "app_info.__preferred_device__",
            "views.labeling.utils.general.collect_system_info",
            "views.labeling.utils.general.format_bold",
            "views.labeling.utils.general.format_color",
            "views.labeling.utils.general.indent_text"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/__init__.py": {
        "file_name": "/anylabeling/__init__.py",
        "imports": [
            "app_info.__appdescription__",
            "app_info.__appname__",
            "app_info.__version__"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/config.py": {
        "file_name": "/anylabeling/config.py",
        "imports": [
            "os.path",
            "shutil",
            "yaml",
            "importlib.resources",
            "anylabeling.configs",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [],
        "functions": {
            "update_dict": [
                "items",
                "validate_item",
                "warning",
                "isinstance",
                "update_dict"
            ],
            "save_config": [
                "join",
                "expanduser",
                "open",
                "safe_dump",
                "warning"
            ],
            "get_default_config": [
                "join",
                "expanduser",
                "exists",
                "copyfile",
                "open_text",
                "safe_load",
                "save_config"
            ],
            "validate_config_item": [
                "ValueError",
                "len",
                "set"
            ],
            "get_config": [
                "get_default_config",
                "safe_load",
                "isinstance",
                "open",
                "update_dict",
                "info"
            ]
        }
    },
    "anylabeling/app_info.py": {
        "file_name": "/anylabeling/app_info.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/configs/__init__.py": {
        "file_name": "/anylabeling/configs/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/configs/auto_labeling/__init__.py": {
        "file_name": "/anylabeling/configs/auto_labeling/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/resources/__init__.py": {
        "file_name": "/anylabeling/resources/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/resources/resources.py": {
        "file_name": "/anylabeling/resources/resources.py",
        "imports": [
            "PyQt5.QtCore"
        ],
        "classes": [],
        "functions": {
            "qInitResources": [
                "qRegisterResourceData"
            ],
            "qCleanupResources": [
                "qUnregisterResourceData"
            ]
        }
    },
    "anylabeling/services/__init__.py": {
        "file_name": "/anylabeling/services/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/rmbg.py": {
        "file_name": "/anylabeling/services/auto_labeling/rmbg.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "._THUMBNAIL_RENDER_MODELS"
        ],
        "classes": [
            {
                "class_name": "RMBG",
                "methods": [
                    "__init__",
                    "preprocess",
                    "forward",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "float",
                "get",
                "warning",
                "array",
                "get_input_shape"
            ],
            "preprocess": [
                "len",
                "expand_dims",
                "resize",
                "astype",
                "range",
                "transpose"
            ],
            "forward": [
                "get_ort_inference"
            ],
            "postprocess": [
                "resize",
                "squeeze",
                "max",
                "min",
                "astype"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "forward",
                "postprocess",
                "fromarray",
                "open",
                "convert",
                "new",
                "paste",
                "dirname",
                "join",
                "realpath",
                "makedirs",
                "basename",
                "splitext",
                "save",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov8_det_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_det_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Det_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/model_manager.py": {
        "file_name": "/anylabeling/services/auto_labeling/model_manager.py",
        "imports": [
            "os",
            "copy",
            "time",
            "yaml",
            "importlib.resources",
            "threading.Lock",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.pyqtSlot",
            "anylabeling.configs",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.config.get_config",
            "anylabeling.config.save_config",
            "anylabeling.services.auto_labeling.types.AutoLabelingResult",
            "anylabeling.services.auto_labeling.utils.TimeoutContext",
            "anylabeling.services.auto_labeling._CUSTOM_MODELS",
            "anylabeling.services.auto_labeling._CACHED_AUTO_LABELING_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_MARKS_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_API_TOKEN_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_RESET_TRACKER_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_CONF_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_IOU_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_MASK_FINENESS_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_PRESERVE_EXISTING_ANNOTATIONS_STATE_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_PROMPT_MODELS",
            "anylabeling.services.auto_labeling._ON_NEXT_FILES_CHANGED_MODELS",
            "yolov5.YOLOv5",
            "yolov6.YOLOv6",
            "yolov7.YOLOv7",
            "yolov5_sahi.YOLOv5_SAHI",
            "yolov8_sahi.YOLOv8_SAHI",
            "yolov8.YOLOv8",
            "yolov9.YOLOv9",
            "yolov10.YOLOv10",
            "yolo11.YOLO11",
            "yolow.YOLOW",
            "yolov5_seg.YOLOv5_Seg",
            "yolov5_ram.YOLOv5_RAM",
            "yolow_ram.YOLOW_RAM",
            "yolov8_seg.YOLOv8_Seg",
            "yolo11_seg.YOLO11_Seg",
            "yolov8_obb.YOLOv8_OBB",
            "yolo11_obb.YOLO11_OBB",
            "yolov8_pose.YOLOv8_Pose",
            "yolo11_pose.YOLO11_Pose",
            "yolox.YOLOX",
            "yolo_nas.YOLO_NAS",
            "damo_yolo.DAMO_YOLO",
            "gold_yolo.Gold_YOLO",
            "grounding_dino.Grounding_DINO",
            "grounding_dino_api.Grounding_DINO_API",
            "ram.RAM",
            "internimage_cls.InternImage_CLS",
            "pulc_attribute.PULC_Attribute",
            "yolov5_sam.YOLOv5SegmentAnything",
            "yolov8_sam2.YOLOv8SegmentAnything2",
            "grounding_sam.GroundingSAM",
            "grounding_sam2.GroundingSAM2",
            "open_vision.OpenVision",
            "doclayout_yolo.DocLayoutYOLO",
            "yolov5_obb.YOLOv5OBB",
            "segment_anything.SegmentAnything",
            "segment_anything_2.SegmentAnything2",
            "segment_anything_2_video.SegmentAnything2Video",
            "efficientvit_sam.EfficientViT_SAM",
            "sam_med2d.SAM_Med2D",
            "edge_sam.EdgeSAM",
            "sam_hq.SAM_HQ",
            "yolov5_resnet.YOLOv5_ResNet",
            "rtdetr.RTDETR",
            "rtdetrv2.RTDETRv2",
            "yolov6_face.YOLOv6Face",
            "yolox_dwpose.YOLOX_DWPose",
            "rtmdet_pose.RTMDet_Pose",
            "clrnet.CLRNet",
            "ppocr_v4.PPOCRv4",
            "ppocr_v5.PPOCRv5",
            "yolov5_cls.YOLOv5_CLS",
            "yolov5_car_plate.YOLOv5CarPlateDetRec",
            "yolov8_cls.YOLOv8_CLS",
            "yolo11_cls.YOLO11_CLS",
            "yolov5_det_track.YOLOv5_Det_Tracker",
            "yolov8_det_track.YOLOv8_Det_Tracker",
            "yolo11_det_track.YOLO11_Det_Tracker",
            "yolov8_seg_track.YOLOv8_Seg_Tracker",
            "yolo11_seg_track.YOLO11_Seg_Tracker",
            "yolov8_obb_track.YOLOv8_Obb_Tracker",
            "yolo11_obb_track.YOLO11_Obb_Tracker",
            "yolov8_pose_track.YOLOv8_Pose_Tracker",
            "yolo11_pose_track.YOLO11_Pose_Tracker",
            "rmbg.RMBG",
            "depth_anything.DepthAnything",
            "depth_anything_v2.DepthAnythingV2",
            "upn.UPN",
            "florence2.Florence2",
            "geco.GeCo",
            "rfdetr.RFDETR",
            "dfine.DFINE",
            "yolo12.YOLO12",
            "yoloe.YOLOE",
            "u_rtdetr.U_RTDETR"
        ],
        "classes": [
            {
                "class_name": "ModelManager",
                "methods": [
                    "__init__",
                    "load_model_configs",
                    "get_model_configs",
                    "set_output_mode",
                    "on_model_download_finished",
                    "load_custom_model",
                    "load_model",
                    "_load_model",
                    "set_cache_auto_label",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_api_token",
                    "set_auto_labeling_reset_tracker",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "set_auto_labeling_prompt",
                    "unload_model",
                    "predict_shapes",
                    "predict_shapes_threading",
                    "on_next_files_changed",
                    "set_upn_mode",
                    "set_groundingdino_mode",
                    "set_florence2_mode",
                    "set_mask_fineness"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "Lock",
                "load_model_configs"
            ],
            "load_model_configs": [
                "open_text",
                "safe_load",
                "get",
                "get_config",
                "isfile",
                "save_config",
                "startswith",
                "joinpath",
                "files",
                "open",
                "str",
                "normpath",
                "abspath",
                "append",
                "enumerate",
                "time",
                "sort",
                "emit"
            ],
            "get_model_configs": [],
            "set_output_mode": [
                "set_output_mode"
            ],
            "on_model_download_finished": [
                "emit",
                "tr",
                "pyqtSlot"
            ],
            "load_custom_model": [
                "normpath",
                "abspath",
                "isRunning",
                "info",
                "isfile",
                "error",
                "emit",
                "tr",
                "open",
                "safe_load",
                "get",
                "get_config",
                "enumerate",
                "time",
                "len",
                "sort",
                "pop",
                "save_config",
                "load_model_configs",
                "load_model"
            ],
            "load_model": [
                "isRunning",
                "info",
                "disconnect",
                "unload_model",
                "emit",
                "tr",
                "enumerate",
                "error",
                "QThread",
                "format",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ],
            "_load_model": [
                "unload",
                "emit",
                "deepcopy",
                "YOLOv5",
                "info",
                "tr",
                "format",
                "str",
                "error",
                "YOLOv6",
                "YOLOv7",
                "YOLOv5_SAHI",
                "YOLOv8_SAHI",
                "YOLOv8",
                "YOLOv9",
                "YOLOv10",
                "YOLO11",
                "YOLOW",
                "YOLOv5_Seg",
                "YOLOv5_RAM",
                "YOLOW_RAM",
                "YOLOv8_Seg",
                "YOLO11_Seg",
                "YOLOv8_OBB",
                "YOLO11_OBB",
                "YOLOv8_Pose",
                "YOLO11_Pose",
                "YOLOX",
                "YOLO_NAS",
                "DAMO_YOLO",
                "Gold_YOLO",
                "Grounding_DINO",
                "Grounding_DINO_API",
                "RAM",
                "InternImage_CLS",
                "PULC_Attribute",
                "YOLOv5SegmentAnything",
                "YOLOv8SegmentAnything2",
                "GroundingSAM",
                "GroundingSAM2",
                "OpenVision",
                "DocLayoutYOLO",
                "YOLOv5OBB",
                "SegmentAnything",
                "SegmentAnything2",
                "SegmentAnything2Video",
                "EfficientViT_SAM",
                "SAM_Med2D",
                "EdgeSAM",
                "SAM_HQ",
                "YOLOv5_ResNet",
                "RTDETR",
                "RTDETRv2",
                "YOLOv6Face",
                "YOLOX_DWPose",
                "RTMDet_Pose",
                "CLRNet",
                "PPOCRv4",
                "PPOCRv5",
                "YOLOv5_CLS",
                "YOLOv5CarPlateDetRec",
                "YOLOv8_CLS",
                "YOLO11_CLS",
                "YOLOv5_Det_Tracker",
                "YOLOv8_Det_Tracker",
                "YOLO11_Det_Tracker",
                "YOLOv8_Seg_Tracker",
                "YOLO11_Seg_Tracker",
                "YOLOv8_Obb_Tracker",
                "YOLO11_Obb_Tracker",
                "YOLOv8_Pose_Tracker",
                "YOLO11_Pose_Tracker",
                "RMBG",
                "DepthAnything",
                "DepthAnythingV2",
                "UPN",
                "TimeoutContext",
                "run",
                "RFDETR",
                "DFINE",
                "YOLO12",
                "YOLOE",
                "U_RTDETR",
                "Exception"
            ],
            "_load_florence2": [
                "info",
                "Florence2",
                "emit"
            ],
            "_load_geco": [
                "info",
                "GeCo",
                "emit"
            ],
            "set_cache_auto_label": [
                "set_cache_auto_label"
            ],
            "set_auto_labeling_marks": [
                "set_auto_labeling_marks"
            ],
            "set_auto_labeling_api_token": [
                "set_auto_labeling_api_token"
            ],
            "set_auto_labeling_reset_tracker": [
                "set_auto_labeling_reset_tracker"
            ],
            "set_auto_labeling_conf": [
                "set_auto_labeling_conf"
            ],
            "set_auto_labeling_iou": [
                "set_auto_labeling_iou"
            ],
            "set_auto_labeling_preserve_existing_annotations_state": [
                "set_auto_labeling_preserve_existing_annotations_state"
            ],
            "set_auto_labeling_prompt": [
                "set_auto_labeling_prompt"
            ],
            "unload_model": [
                "unload"
            ],
            "predict_shapes": [
                "emit",
                "tr",
                "predict_shapes",
                "error",
                "format",
                "str"
            ],
            "predict_shapes_threading": [
                "emit",
                "tr",
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start",
                "pyqtSlot"
            ],
            "on_next_files_changed": [
                "on_next_files_changed"
            ],
            "set_upn_mode": [
                "set_upn_mode"
            ],
            "set_groundingdino_mode": [
                "set_groundingdino_mode"
            ],
            "set_florence2_mode": [
                "set_florence2_mode"
            ],
            "set_mask_fineness": [
                "set_mask_fineness"
            ]
        }
    },
    "anylabeling/services/auto_labeling/rtdetrv2.py": {
        "file_name": "/anylabeling/services/auto_labeling/rtdetrv2.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "RTDETRv2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "resize",
                "transpose",
                "astype",
                "ascontiguousarray",
                "len",
                "array"
            ],
            "postprocess": [],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "zip",
                "int",
                "Shape",
                "str",
                "float",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov8_sam2.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_sam2.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "engines.build_onnx_engine.OnnxBaseModel",
            "lru_cache.LRUCache",
            "types.AutoLabelingResult",
            "__base__.sam2.SegmentAnything2ONNX",
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8SegmentAnything2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "isinstance",
                "get",
                "len",
                "zeros",
                "array",
                "reshape",
                "asarray",
                "enumerate",
                "SegmentAnything2ONNX",
                "LRUCache"
            ],
            "set_auto_labeling_marks": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "get",
                "AutoLabelingResult",
                "encode",
                "put",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "zip",
                "str",
                "int",
                "list",
                "map",
                "predict_masks",
                "len",
                "post_process",
                "append",
                "print_exc"
            ],
            "unload": [],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/segment_anything.py": {
        "file_name": "/anylabeling/services/auto_labeling/segment_anything.py",
        "imports": [
            "os",
            "traceback",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "sam_onnx.SegmentAnythingONNX",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SegmentAnythingONNX",
                "LRUCache",
                "get",
                "ChineseClipONNX"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "min",
                "max",
                "clip_net",
                "argmax",
                "get_bounding_boxes",
                "calculate_rotation_theta"
            ],
            "predict_shapes": [
                "AutoLabelingResult",
                "qt_img_to_rgb_cv_img",
                "get",
                "encode",
                "put",
                "predict_masks",
                "len",
                "post_process",
                "warning",
                "print_exc"
            ],
            "unload": [
                "quit"
            ],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/depth_anything.py": {
        "file_name": "/anylabeling/services/auto_labeling/depth_anything.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "._THUMBNAIL_RENDER_MODELS"
        ],
        "classes": [
            {
                "class_name": "Resize",
                "methods": [
                    "__init__",
                    "constrain_to_multiple_of",
                    "get_size",
                    "__call__"
                ]
            },
            {
                "class_name": "NormalizeImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "PrepareForNet",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "DepthAnything",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "get"
            ],
            "constrain_to_multiple_of": [
                "astype",
                "round",
                "floor",
                "ceil"
            ],
            "get_size": [
                "abs",
                "ValueError",
                "constrain_to_multiple_of"
            ],
            "__call__": [
                "get_size",
                "resize",
                "astype",
                "transpose",
                "ascontiguousarray"
            ],
            "preprocess": [
                "Resize",
                "resize_transform",
                "NormalizeImage",
                "normalize_transform",
                "PrepareForNet",
                "prepare_for_net_transform"
            ],
            "postprocess": [
                "resize",
                "min",
                "max",
                "astype",
                "applyColorMap"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "dirname",
                "join",
                "realpath",
                "makedirs",
                "basename",
                "splitext",
                "imwrite",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov8_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_cls.py",
        "imports": [
            "yolov5_cls.YOLOv5_CLS"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_CLS",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/types.py": {
        "file_name": "/anylabeling/services/auto_labeling/types.py",
        "imports": [],
        "classes": [
            {
                "class_name": "AutoLabelingResult",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "AutoLabelingMode",
                "methods": [
                    "__init__",
                    "get_default_mode",
                    "__eq__"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "get_default_mode": [
                "AutoLabelingMode"
            ],
            "__eq__": [
                "isinstance"
            ]
        }
    },
    "anylabeling/services/auto_labeling/gold_yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/gold_yolo.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "Gold_YOLO",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov8.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov9.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov9.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv9",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/dfine.py": {
        "file_name": "/anylabeling/services/auto_labeling/dfine.py",
        "imports": [
            "os",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "DFINE",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "min",
                "int",
                "resize",
                "new",
                "paste",
                "array",
                "astype",
                "transpose",
                "expand_dims"
            ],
            "postprocess": [
                "enumerate",
                "int",
                "len",
                "str",
                "max",
                "min",
                "float",
                "append"
            ],
            "predict_shapes": [
                "convert",
                "open",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolo11_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_cls.py",
        "imports": [
            "yolov5_cls.YOLOv5_CLS"
        ],
        "classes": [
            {
                "class_name": "YOLO11_CLS",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolo12.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo12.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO12",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolo11_seg.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_seg.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Seg",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/rtdetr.py": {
        "file_name": "/anylabeling/services/auto_labeling/rtdetr.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "utils.points_conversion.cxywh2xyxy"
        ],
        "classes": [
            {
                "class_name": "RTDETR",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "resize",
                "transpose",
                "astype",
                "ascontiguousarray",
                "len"
            ],
            "postprocess": [
                "all",
                "exp",
                "cxywh2xyxy",
                "max",
                "argmax",
                "astype",
                "floor",
                "minimum",
                "maximum",
                "ceil",
                "stack",
                "zip",
                "str",
                "float",
                "append"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/segment_anything_2.py": {
        "file_name": "/anylabeling/services/auto_labeling/segment_anything_2.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.clip.ChineseClipONNX",
            "__base__.sam2.SegmentAnything2ONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SegmentAnything2ONNX",
                "LRUCache",
                "get",
                "ChineseClipONNX"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "min",
                "max",
                "clip_net",
                "argmax",
                "get_bounding_boxes",
                "calculate_rotation_theta"
            ],
            "predict_shapes": [
                "AutoLabelingResult",
                "qt_img_to_rgb_cv_img",
                "get",
                "encode",
                "put",
                "predict_masks",
                "len",
                "post_process",
                "warning",
                "print_exc"
            ],
            "unload": [
                "quit"
            ],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/damo_yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/damo_yolo.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "DAMO_YOLO",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get",
                "get_input_shape"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_iou": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "ones",
                "min",
                "int",
                "resize",
                "transpose",
                "astype",
                "ascontiguousarray",
                "len"
            ],
            "postprocess": [
                "squeeze",
                "range",
                "len",
                "max",
                "argmax",
                "int",
                "astype",
                "append",
                "NMSBoxes",
                "str",
                "float"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "Shape",
                "QPointF",
                "add_point",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov5_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_cls.py",
        "imports": [
            "numpy",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "utils.softmax"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_CLS",
                "methods": [
                    "postprocess",
                    "predict_shapes"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "postprocess": [
                "tolist",
                "softmax",
                "array",
                "argmax",
                "str"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "AutoLabelingResult"
            ]
        }
    },
    "anylabeling/services/auto_labeling/yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolo11_pose_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_pose_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Pose_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov8_pose.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_pose.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Pose",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/sam_hq.py": {
        "file_name": "/anylabeling/services/auto_labeling/sam_hq.py",
        "imports": [
            "os",
            "gc",
            "cv2",
            "traceback",
            "onnxruntime",
            "numpy",
            "copy.deepcopy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks"
                ]
            },
            {
                "class_name": "SAM_HQ",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "get_available_providers",
                "SessionOptions",
                "InferenceSession",
                "get_inputs",
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SegmentAnythingONNX",
                "LRUCache",
                "get",
                "ChineseClipONNX"
            ],
            "get_input_points": [
                "append",
                "array"
            ],
            "run_encoder": [
                "InferenceSession",
                "get_inputs",
                "run",
                "stack",
                "collect"
            ],
            "get_preprocess_shape": [
                "max",
                "int"
            ],
            "apply_coords": [
                "get_preprocess_shape",
                "astype",
                "deepcopy"
            ],
            "run_decoder": [
                "get_input_points",
                "concatenate",
                "array",
                "astype",
                "apply_coords",
                "ones",
                "matmul",
                "zeros",
                "run",
                "inv",
                "transform_masks"
            ],
            "transform_masks": [
                "range",
                "warpAffine",
                "append",
                "array"
            ],
            "encode": [
                "min",
                "array",
                "warpAffine",
                "astype",
                "run_encoder"
            ],
            "predict_masks": [
                "run_decoder"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes",
                "calculate_rotation_theta",
                "clip_net",
                "argmax"
            ],
            "predict_shapes": [
                "AutoLabelingResult",
                "qt_img_to_rgb_cv_img",
                "get",
                "encode",
                "put",
                "predict_masks",
                "len",
                "post_process",
                "warning",
                "print_exc"
            ],
            "unload": [
                "quit"
            ],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/yolov5_det_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_det_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_Det_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/internimage_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/internimage_cls.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.softmax",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "InternImage_CLS",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "preprocess": [
                "resize",
                "transpose",
                "array",
                "astype",
                "zeros",
                "range",
                "reshape"
            ],
            "postprocess": [
                "tolist",
                "softmax",
                "array",
                "argmax",
                "str"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov5_car_plate.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_car_plate.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "utils.xywh2xyxy"
        ],
        "classes": [
            {
                "class_name": "YOLOv5CarPlateDetRec",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "rec_pre_processing",
                    "get_plate_result",
                    "rec_plate",
                    "predict_shapes",
                    "four_point_transform",
                    "decodePlate",
                    "get_split_merge",
                    "order_points",
                    "restore_box",
                    "_nms",
                    "_letterbox",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get",
                "get_input_shape"
            ],
            "preprocess": [
                "_letterbox",
                "astype",
                "transpose",
                "reshape"
            ],
            "postprocess": [
                "xywh2xyxy",
                "max",
                "reshape",
                "argmax",
                "concatenate",
                "_nms",
                "restore_box"
            ],
            "rec_pre_processing": [
                "resize",
                "astype",
                "transpose",
                "reshape"
            ],
            "get_plate_result": [
                "rec_pre_processing",
                "get_ort_inference",
                "argmax",
                "decodePlate"
            ],
            "rec_plate": [
                "tolist",
                "reshape",
                "four_point_transform",
                "int",
                "get_split_merge",
                "get_plate_result",
                "append"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "rec_plate",
                "enumerate",
                "list",
                "map",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "four_point_transform": [
                "order_points",
                "sqrt",
                "max",
                "int",
                "array",
                "getPerspectiveTransform",
                "warpPerspective"
            ],
            "decodePlate": [
                "range",
                "len",
                "append",
                "int"
            ],
            "get_split_merge": [
                "int",
                "resize",
                "hstack"
            ],
            "order_points": [
                "zeros",
                "sum",
                "argmin",
                "argmax",
                "diff"
            ],
            "restore_box": [],
            "_nms": [
                "argsort",
                "append",
                "maximum",
                "minimum",
                "where"
            ],
            "_letterbox": [
                "min",
                "int",
                "resize",
                "copyMakeBorder"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/rfdetr.py": {
        "file_name": "/anylabeling/services/auto_labeling/rfdetr.py",
        "imports": [
            "os",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "utils.general.sigmoid",
            "utils.points_conversion.cxcywh2xyxy"
        ],
        "classes": [
            {
                "class_name": "RFDETR",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "convert",
                "resize",
                "array",
                "astype",
                "transpose",
                "reshape",
                "expand_dims",
                "ascontiguousarray"
            ],
            "postprocess": [
                "sigmoid",
                "reshape",
                "argpartition",
                "take_along_axis",
                "argsort",
                "cxcywh2xyxy",
                "expand_dims",
                "tile",
                "array",
                "tolist"
            ],
            "predict_shapes": [
                "open",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "zip",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/open_vision.py": {
        "file_name": "/anylabeling/services/auto_labeling/open_vision.py",
        "imports": [
            "warnings",
            "os",
            "cv2",
            "argparse",
            "traceback",
            "numpy",
            "PIL.Image",
            "typing.List",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "lru_cache.LRUCache",
            "__base__.sam2.SegmentAnything2ONNX",
            "torch",
            "visualgd.datasets.transforms",
            "visualgd.registry.MODULE_BUILD_FUNCS",
            "visualgd.util.misc.nested_tensor_from_tensor_list",
            "visualgd.config.cfg_handler.ConfigurationHandler"
        ],
        "classes": [
            {
                "class_name": "OpenVision",
                "methods": [
                    "__init__",
                    "build_transforms",
                    "build_model",
                    "set_auto_labeling_marks",
                    "post_process",
                    "get_visual_prompt",
                    "get_boxes",
                    "predict_shapes",
                    "is_rectangle_mode",
                    "rescale_boxes",
                    "get_ind_to_filter",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "ImportError",
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "is_available",
                "get",
                "dict",
                "build_model",
                "to",
                "build_transforms",
                "SegmentAnything2ONNX",
                "LRUCache"
            ],
            "build_transforms": [
                "Compose",
                "ToTensor",
                "Normalize",
                "RandomResize"
            ],
            "build_model": [
                "Namespace",
                "items",
                "setattr",
                "get_config",
                "merge_from_dict",
                "to_dict",
                "vars",
                "ValueError",
                "get",
                "build_func",
                "load",
                "load_state_dict",
                "eval"
            ],
            "set_auto_labeling_marks": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes",
                "calculate_rotation_theta"
            ],
            "get_visual_prompt": [
                "append"
            ],
            "get_boxes": [
                "fromarray",
                "get_visual_prompt",
                "transform",
                "tensor",
                "to",
                "unsqueeze",
                "no_grad",
                "net",
                "nested_tensor_from_tensor_list",
                "range",
                "len",
                "get_ind_to_filter",
                "sigmoid",
                "strip",
                "sum",
                "max",
                "numpy",
                "cpu",
                "rescale_boxes"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "get",
                "AutoLabelingResult",
                "encode",
                "put",
                "is_rectangle_mode",
                "get_boxes",
                "debug",
                "predict_masks",
                "len",
                "post_process",
                "append",
                "print_exc"
            ],
            "is_rectangle_mode": [],
            "rescale_boxes": [
                "append",
                "array"
            ],
            "get_ind_to_filter": [
                "len",
                "list",
                "range",
                "split",
                "strip",
                "index",
                "append",
                "Exception"
            ],
            "unload": [],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/segment_anything_2_video.py": {
        "file_name": "/anylabeling/services/auto_labeling/segment_anything_2_video.py",
        "imports": [
            "warnings",
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "torch",
            "sam2.build_sam.build_sam2",
            "sam2.build_sam.build_sam2_camera_predictor",
            "sam2.sam2_image_predictor.SAM2ImagePredictor"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything2Video",
                "methods": [
                    "__init__",
                    "set_mask_fineness",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "set_cache_auto_label",
                    "set_auto_labeling_reset_tracker",
                    "set_auto_labeling_prompt",
                    "marks_to_prompts",
                    "post_process",
                    "image_process",
                    "video_process",
                    "predict_shapes",
                    "get_ann_frame_idx",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "ImportError",
                "__init__",
                "super",
                "get",
                "is_available",
                "device",
                "info",
                "__enter__",
                "autocast",
                "get_device_properties",
                "warning",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "build_sam2",
                "SAM2ImagePredictor",
                "build_sam2_camera_predictor"
            ],
            "set_mask_fineness": [],
            "set_auto_labeling_marks": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "set_cache_auto_label": [
                "append"
            ],
            "set_auto_labeling_reset_tracker": [
                "reset_state",
                "info"
            ],
            "set_auto_labeling_prompt": [
                "marks_to_prompts",
                "array",
                "append"
            ],
            "marks_to_prompts": [
                "append"
            ],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "min",
                "max",
                "get_bounding_boxes",
                "calculate_rotation_theta"
            ],
            "image_process": [
                "set_image",
                "marks_to_prompts",
                "predict",
                "len",
                "post_process"
            ],
            "video_process": [
                "any",
                "endswith",
                "warning",
                "load_first_frame",
                "enumerate",
                "add_new_prompt",
                "track",
                "range",
                "len",
                "numpy",
                "cpu",
                "extend",
                "post_process"
            ],
            "predict_shapes": [
                "AutoLabelingResult",
                "qt_img_to_rgb_cv_img",
                "video_process",
                "image_process",
                "warning",
                "print_exc"
            ],
            "get_ann_frame_idx": [
                "listdir",
                "dirname",
                "splitext",
                "sort",
                "int",
                "index",
                "basename"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov8_seg_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_seg_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Seg_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/ppocr_v4.py": {
        "file_name": "/anylabeling/services/auto_labeling/ppocr_v4.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "onnxruntime",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.ppocr_utils.text_system.TextSystem",
            "views.labeling.utils.general.is_possible_rectangle"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "PPOCRv4",
                "methods": [
                    "load_model",
                    "__init__",
                    "parse_args",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "update",
                "__init__",
                "super",
                "load_model",
                "get",
                "dirname",
                "parse_args",
                "TextSystem"
            ],
            "load_model": [
                "get_model_abs_path",
                "splitext",
                "basename",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SessionOptions",
                "int",
                "InferenceSession"
            ],
            "parse_args": [
                "Args",
                "join"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "cvtColor",
                "warning",
                "int",
                "x",
                "y",
                "append",
                "text_sys",
                "range",
                "len",
                "Shape",
                "add_point",
                "hasattr",
                "AutoLabelingResult",
                "tolist",
                "astype",
                "array",
                "float",
                "enumerate",
                "is_possible_rectangle",
                "QPointF"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov10.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov10.py",
        "imports": [
            "PyQt5.QtCore.QCoreApplication",
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv10",
                "methods": []
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov5_sahi.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_sahi.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.sahi.predict.get_sliced_prediction",
            "utils.sahi.models.yolov5_onnx.Yolov5OnnxDetectionModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_SAHI",
                "methods": [
                    "__init__",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "str",
                "enumerate",
                "Yolov5OnnxDetectionModel"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "get_sliced_prediction",
                "Shape",
                "str",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/rtmdet_pose.py": {
        "file_name": "/anylabeling/services/auto_labeling/rtmdet_pose.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.rtmdet.RTMDet",
            "pose.rtmo_onnx.RTMO"
        ],
        "classes": [
            {
                "class_name": "RTMDet_Pose",
                "methods": [
                    "__init__",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "get",
                "RTMDet",
                "RTMO"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "rtmdet",
                "enumerate",
                "list",
                "map",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "append",
                "pose",
                "len",
                "range",
                "str",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/grounding_dino_api.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_dino_api.py",
        "imports": [
            "base64",
            "cv2",
            "json",
            "os",
            "re",
            "requests",
            "time",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "Grounding_DINO_API",
                "methods": [
                    "__init__",
                    "set_auto_labeling_api_token",
                    "set_groundingdino_mode",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "rstrip",
                "getenv"
            ],
            "set_auto_labeling_api_token": [],
            "set_groundingdino_mode": [
                "get"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_iou": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "predict_shapes": [
                "warning",
                "AutoLabelingResult",
                "ValueError",
                "rstrip",
                "match",
                "qt_img_to_rgb_cv_img",
                "imencode",
                "decode",
                "b64encode",
                "info",
                "time",
                "post",
                "raise_for_status",
                "json",
                "debug",
                "get",
                "error",
                "format",
                "sleep",
                "len",
                "map",
                "Shape",
                "str",
                "float",
                "add_point",
                "QPointF",
                "append"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/sam_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/sam_onnx.py",
        "imports": [
            "gc",
            "copy.deepcopy",
            "cv2",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "get_available_providers",
                "InferenceSession",
                "get_inputs"
            ],
            "get_input_points": [
                "append",
                "array"
            ],
            "run_encoder": [
                "InferenceSession",
                "get_inputs",
                "run",
                "collect"
            ],
            "get_preprocess_shape": [
                "max",
                "int"
            ],
            "apply_coords": [
                "get_preprocess_shape",
                "astype",
                "deepcopy"
            ],
            "run_decoder": [
                "get_input_points",
                "concatenate",
                "array",
                "astype",
                "apply_coords",
                "ones",
                "matmul",
                "zeros",
                "run",
                "inv",
                "transform_masks"
            ],
            "transform_masks": [
                "range",
                "warpAffine",
                "append",
                "array"
            ],
            "encode": [
                "min",
                "array",
                "warpAffine",
                "astype",
                "run_encoder"
            ],
            "predict_masks": [
                "run_decoder"
            ]
        }
    },
    "anylabeling/services/auto_labeling/edge_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/edge_sam.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.sam.EdgeSAMONNX",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "EdgeSAM",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "get",
                "EdgeSAMONNX",
                "LRUCache",
                "ChineseClipONNX"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes",
                "calculate_rotation_theta",
                "clip_net",
                "argmax"
            ],
            "predict_shapes": [
                "AutoLabelingResult",
                "qt_img_to_rgb_cv_img",
                "get",
                "encode",
                "put",
                "predict_masks",
                "post_process",
                "warning",
                "print_exc"
            ],
            "unload": [
                "quit"
            ],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/clrnet.py": {
        "file_name": "/anylabeling/services/auto_labeling/clrnet.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "onnxruntime",
            "scipy.interpolate.InterpolatedUnivariateSpline",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "CLRNet",
                "methods": [
                    "__init__",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "pre_process",
                    "post_process",
                    "predict_shapes",
                    "softmax",
                    "land_iou",
                    "numpy_land_nms",
                    "convert_outputs",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SessionOptions",
                "int",
                "InferenceSession",
                "linspace"
            ],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "pre_process": [
                "resize",
                "cvtColor",
                "transpose",
                "astype",
                "len",
                "get_inputs",
                "run"
            ],
            "post_process": [
                "softmax",
                "concatenate",
                "numpy_land_nms",
                "round",
                "convert_outputs",
                "int",
                "append",
                "sort"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "pre_process",
                "post_process",
                "enumerate",
                "str",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "softmax": [
                "max",
                "exp",
                "sum"
            ],
            "land_iou": [
                "int",
                "max",
                "min",
                "sum",
                "abs"
            ],
            "numpy_land_nms": [
                "argsort",
                "len",
                "append",
                "land_iou",
                "array"
            ],
            "convert_outputs": [
                "min",
                "max",
                "int",
                "round",
                "item",
                "len",
                "astype",
                "cumprod",
                "double",
                "flip",
                "squeeze",
                "stack",
                "reshape",
                "InterpolatedUnivariateSpline",
                "range",
                "array",
                "float",
                "spline",
                "concatenate",
                "append"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov6.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov6.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv6",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/u_rtdetr.py": {
        "file_name": "/anylabeling/services/auto_labeling/u_rtdetr.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "U_RTDETR",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/grounding_sam2.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_sam2.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "typing.Dict",
            "tokenizers.Tokenizer",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "lru_cache.LRUCache",
            "utils.general.Args",
            "engines.build_onnx_engine.OnnxBaseModel",
            "__base__.sam2.SegmentAnything2ONNX",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "GroundingSAM2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "preprocess",
                    "postprocess",
                    "post_process",
                    "predict_shapes",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenlizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_configs",
                "get_tokenlizer",
                "SegmentAnything2ONNX",
                "LRUCache"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "preprocess": [
                "resize",
                "astype",
                "array",
                "transpose",
                "expand_dims",
                "get_caption",
                "str",
                "encode",
                "generate_masks_with_special_tokens_and_transfer_map"
            ],
            "postprocess": [
                "squeeze",
                "max",
                "encode",
                "array",
                "get_phrases_from_posmap",
                "append"
            ],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes",
                "calculate_rotation_theta"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "get",
                "AutoLabelingResult",
                "encode",
                "put",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "rescale_boxes",
                "zip",
                "predict_masks",
                "len",
                "post_process",
                "append",
                "print_exc"
            ],
            "sig": [
                "exp"
            ],
            "rescale_boxes": [
                "array",
                "append"
            ],
            "get_configs": [
                "Args",
                "ValueError",
                "translate"
            ],
            "get_caption": [
                "lower",
                "strip",
                "endswith"
            ],
            "get_tokenlizer": [
                "replace",
                "path",
                "from_file",
                "str",
                "error"
            ],
            "get_phrases_from_posmap": [
                "isinstance",
                "where",
                "decode",
                "NotImplementedError"
            ],
            "generate_masks_with_special_tokens_and_transfer_map": [
                "zeros",
                "argwhere",
                "reshape",
                "eye",
                "tile",
                "range",
                "arange",
                "append",
                "stack"
            ],
            "unload": [],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/ppocr_v5.py": {
        "file_name": "/anylabeling/services/auto_labeling/ppocr_v5.py",
        "imports": [
            "ppocr_v4.PPOCRv4"
        ],
        "classes": [
            {
                "class_name": "PPOCRv5",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/grounding_dino.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_dino.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "typing.Dict",
            "tokenizers.Tokenizer",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.general.Args",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "Grounding_DINO",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenlizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_configs",
                "get_tokenlizer"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "resize",
                "astype",
                "array",
                "transpose",
                "expand_dims",
                "get_caption",
                "str",
                "encode",
                "generate_masks_with_special_tokens_and_transfer_map"
            ],
            "postprocess": [
                "squeeze",
                "sig",
                "max",
                "encode",
                "array",
                "get_phrases_from_posmap",
                "append"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "rescale_boxes",
                "zip",
                "Shape",
                "str",
                "float",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "sig": [
                "exp"
            ],
            "rescale_boxes": [
                "array",
                "append"
            ],
            "get_configs": [
                "Args",
                "ValueError",
                "translate"
            ],
            "get_caption": [
                "lower",
                "strip",
                "endswith"
            ],
            "get_tokenlizer": [
                "replace",
                "path",
                "from_file",
                "str",
                "error"
            ],
            "get_phrases_from_posmap": [
                "isinstance",
                "where",
                "decode",
                "NotImplementedError"
            ],
            "generate_masks_with_special_tokens_and_transfer_map": [
                "zeros",
                "argwhere",
                "reshape",
                "eye",
                "tile",
                "range",
                "arange",
                "append",
                "stack"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov5_obb.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_obb.py",
        "imports": [
            "os",
            "cv2",
            "math",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.general.letterbox",
            "utils.points_conversion.rbox2poly",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5OBB",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "calculate_rotation_theta",
                    "scale_polys",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_iou": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "letterbox",
                "transpose",
                "astype",
                "ascontiguousarray",
                "len"
            ],
            "postprocess": [
                "argmax",
                "append",
                "NMSBoxesRotated",
                "array",
                "flatten",
                "rbox2poly",
                "scale_polys",
                "concatenate"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "reversed",
                "str",
                "int",
                "calculate_rotation_theta",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "calculate_rotation_theta": [
                "atan2",
                "degrees"
            ],
            "scale_polys": [
                "min"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/florence2.py": {
        "file_name": "/anylabeling/services/auto_labeling/florence2.py",
        "imports": [
            "warnings",
            "gc",
            "PIL.Image",
            "unittest.mock.patch",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "types.AutoLabelingMode",
            "torch",
            "transformers.AutoModelForCausalLM",
            "transformers.AutoProcessor",
            "transformers.dynamic_module_utils.get_imports"
        ],
        "classes": [
            {
                "class_name": "Florence2",
                "methods": [
                    "__init__",
                    "set_florence2_mode",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "_forward",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "ImportError",
                "__init__",
                "super",
                "get",
                "is_available",
                "patch",
                "from_pretrained"
            ],
            "fixed_get_imports": [
                "get_imports",
                "is_available",
                "remove"
            ],
            "set_florence2_mode": [],
            "set_auto_labeling_marks": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "len",
                "int",
                "debug",
                "processor",
                "next",
                "parameters",
                "is_floating_point",
                "to",
                "items"
            ],
            "_forward": [
                "generate",
                "batch_decode"
            ],
            "postprocess": [
                "post_process_generation"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "convert",
                "fromarray",
                "preprocess",
                "_forward",
                "postprocess",
                "debug",
                "AutoLabelingResult",
                "get",
                "zip",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "range",
                "len",
                "startswith",
                "split",
                "int"
            ],
            "unload": [
                "collect",
                "empty_cache"
            ]
        }
    },
    "anylabeling/services/auto_labeling/yolo_nas.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo_nas.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "Preprocessing",
                "methods": [
                    "__init__",
                    "__rescale_img",
                    "_standarize",
                    "_det_rescale",
                    "_det_long_max_rescale",
                    "_bot_right_pad",
                    "_center_pad",
                    "_normalize",
                    "_call_fn",
                    "__call__"
                ]
            },
            {
                "class_name": "Postprocessing",
                "methods": [
                    "__init__",
                    "_rescale_boxes",
                    "_shift_bboxes",
                    "_call_fn",
                    "__call__"
                ]
            },
            {
                "class_name": "YOLO_NAS",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "Preprocessing",
                "Postprocessing",
                "get"
            ],
            "__rescale_img": [
                "astype",
                "resize"
            ],
            "_standarize": [
                "astype"
            ],
            "_det_rescale": [
                "__rescale_img"
            ],
            "_det_long_max_rescale": [
                "min",
                "round",
                "__rescale_img"
            ],
            "_bot_right_pad": [
                "copyMakeBorder"
            ],
            "_center_pad": [
                "copyMakeBorder"
            ],
            "_normalize": [
                "asarray"
            ],
            "_call_fn": [],
            "__call__": [
                "copy",
                "list",
                "items",
                "_call_fn",
                "append",
                "blobFromImage",
                "squeeze",
                "reversed",
                "pop",
                "flatten",
                "max",
                "argmax"
            ],
            "_rescale_boxes": [],
            "_shift_bboxes": [],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_iou": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "NMSBoxes",
                "float",
                "str",
                "flatten",
                "astype",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolox_dwpose.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolox_dwpose.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "onnxruntime",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "pose.dwpose_onnx.inference_pose"
        ],
        "classes": [
            {
                "class_name": "YOLOX_DWPose",
                "methods": [
                    "__init__",
                    "det_pre_process",
                    "det_post_process",
                    "predict_shapes",
                    "pose_rescale",
                    "det_rescale",
                    "multiclass_nms_class_agnostic",
                    "nms",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SessionOptions",
                "int",
                "InferenceSession",
                "readNetFromONNX",
                "setPreferableBackend",
                "setPreferableTarget"
            ],
            "det_pre_process": [
                "len",
                "ones",
                "min",
                "astype",
                "resize",
                "int",
                "transpose",
                "ascontiguousarray",
                "get_inputs",
                "run"
            ],
            "det_post_process": [
                "zip",
                "meshgrid",
                "arange",
                "reshape",
                "stack",
                "append",
                "full",
                "concatenate",
                "exp"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "det_pre_process",
                "det_post_process",
                "det_rescale",
                "zip",
                "inference_pose",
                "cvtColor",
                "pose_rescale",
                "Shape",
                "str",
                "int",
                "add_point",
                "QPointF",
                "append",
                "len",
                "range",
                "AutoLabelingResult"
            ],
            "pose_rescale": [
                "concatenate",
                "mean",
                "astype",
                "logical_and",
                "insert"
            ],
            "det_rescale": [
                "ones_like",
                "multiclass_nms_class_agnostic"
            ],
            "multiclass_nms_class_agnostic": [
                "argmax",
                "arange",
                "len",
                "sum",
                "nms",
                "concatenate"
            ],
            "nms": [
                "argsort",
                "append",
                "maximum",
                "minimum",
                "where"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolo11_pose.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_pose.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Pose",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov8_pose_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_pose_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Pose_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov5_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_sam.py",
        "imports": [
            "os",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "__base__.sam.SegmentAnythingONNX",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5SegmentAnything",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "get_sam_results",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "isinstance",
                "get",
                "len",
                "zeros",
                "array",
                "reshape",
                "asarray",
                "enumerate",
                "SegmentAnythingONNX"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "get_sam_results": [
                "reshape",
                "tolist",
                "len",
                "append",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "encode",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "zip",
                "str",
                "int",
                "list",
                "map",
                "array",
                "predict_masks",
                "len",
                "get_approx_contours",
                "get_sam_results",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/pulc_attribute.py": {
        "file_name": "/anylabeling/services/auto_labeling/pulc_attribute.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "PULC_Attribute",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "preprocess": [
                "resize",
                "astype",
                "reshape",
                "array",
                "float32",
                "transpose",
                "expand_dims"
            ],
            "postprocess": [
                "tolist",
                "items",
                "len",
                "argmax"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolo11_obb.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_obb.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_OBB",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/upn.py": {
        "file_name": "/anylabeling/services/auto_labeling/upn.py",
        "imports": [
            "warnings",
            "os",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.upn.UPNWrapper"
        ],
        "classes": [
            {
                "class_name": "UPN",
                "methods": [
                    "__init__",
                    "_check_prompt_type",
                    "set_upn_mode",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "ImportError",
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "UPNWrapper",
                "get",
                "_check_prompt_type"
            ],
            "_check_prompt_type": [
                "warning"
            ],
            "set_upn_mode": [],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_iou": [],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "inference",
                "fromarray",
                "filter",
                "AutoLabelingResult",
                "zip",
                "map",
                "Shape",
                "float",
                "add_point",
                "QPointF",
                "append"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/depth_anything_v2.py": {
        "file_name": "/anylabeling/services/auto_labeling/depth_anything_v2.py",
        "imports": [
            "os",
            "cv2",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "._THUMBNAIL_RENDER_MODELS"
        ],
        "classes": [
            {
                "class_name": "DepthAnythingV2",
                "methods": [
                    "__init__",
                    "preprocess",
                    "forward",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "get"
            ],
            "preprocess": [
                "resize",
                "astype",
                "transpose"
            ],
            "forward": [
                "get_ort_inference"
            ],
            "postprocess": [
                "min",
                "max",
                "astype",
                "transpose",
                "resize",
                "applyColorMap"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "forward",
                "postprocess",
                "dirname",
                "join",
                "realpath",
                "makedirs",
                "basename",
                "splitext",
                "imwrite",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov8_sahi.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_sahi.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.sahi.predict.get_sliced_prediction",
            "utils.sahi.models.yolov8_onnx.Yolov8OnnxDetectionModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_SAHI",
                "methods": [
                    "__init__",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "str",
                "enumerate",
                "Yolov8OnnxDetectionModel"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "get_sliced_prediction",
                "Shape",
                "str",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov7.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov7.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv7",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/doclayout_yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/doclayout_yolo.py",
        "imports": [
            "yolov10.YOLOv10"
        ],
        "classes": [
            {
                "class_name": "DocLayoutYOLO",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yoloe.py": {
        "file_name": "/anylabeling/services/auto_labeling/yoloe.py",
        "imports": [
            "os",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "model.Model",
            "types.AutoLabelingResult",
            "torch",
            "supervision",
            "supervision.detection.utils.converters.mask_to_polygons",
            "supervision.detection.utils.mask_to_polygons",
            "ultralytics.YOLOE",
            "ultralytics.models.yolo.yoloe.predict_vp.YOLOEVPSegPredictor",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs.ram"
        ],
        "classes": [
            {
                "class_name": "YOLOE",
                "methods": [
                    "__init__",
                    "build_model",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "postprocess",
                    "_get_text_model",
                    "_get_visual_model",
                    "_get_prompt_free_model",
                    "predict_shapes",
                    "load_tag_list",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "ImportError",
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "basename",
                "get",
                "isinstance",
                "open",
                "strip",
                "list",
                "values",
                "load_tag_list",
                "exists",
                "symlink"
            ],
            "build_model": [
                "info",
                "_YOLOE",
                "eval",
                "to",
                "is_available"
            ],
            "set_auto_labeling_marks": [],
            "set_auto_labeling_iou": [],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "postprocess": [
                "from_ultralytics",
                "debug",
                "zip",
                "Shape",
                "add_point",
                "QPointF",
                "float",
                "str",
                "append",
                "mask_to_polygons",
                "tolist"
            ],
            "_get_text_model": [
                "build_model",
                "set_classes",
                "get_text_pe"
            ],
            "_get_visual_model": [
                "build_model"
            ],
            "_get_prompt_free_model": [
                "build_model",
                "get_vocab",
                "set_vocab"
            ],
            "predict_shapes": [
                "open",
                "warning",
                "debug",
                "append",
                "array",
                "len",
                "dict",
                "_get_visual_model",
                "predict",
                "strip",
                "replace",
                "endswith",
                "split",
                "_get_text_model",
                "_get_prompt_free_model",
                "postprocess",
                "AutoLabelingResult"
            ],
            "load_tag_list": [
                "path",
                "splitlines",
                "read_text"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov6_face.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov6_face.py",
        "imports": [
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "utils.numpy_nms",
            "utils.xywh2xyxy",
            "utils.rescale_box_and_landmark"
        ],
        "classes": [
            {
                "class_name": "YOLOv6Face",
                "methods": [
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "postprocess": [
                "logical_and",
                "max",
                "zeros",
                "enumerate",
                "xywh2xyxy",
                "nonzero",
                "concatenate",
                "astype",
                "argmax",
                "ravel",
                "any",
                "array",
                "argsort",
                "numpy_nms"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "len",
                "AutoLabelingResult",
                "rescale_box_and_landmark",
                "enumerate",
                "reversed",
                "list",
                "map",
                "str",
                "int",
                "Shape",
                "float",
                "add_point",
                "QPointF",
                "append",
                "range"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolo11.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/lru_cache.py": {
        "file_name": "/anylabeling/services/auto_labeling/lru_cache.py",
        "imports": [
            "collections.OrderedDict",
            "threading"
        ],
        "classes": [
            {
                "class_name": "LRUCache",
                "methods": [
                    "__init__",
                    "get",
                    "put",
                    "find"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Lock",
                "OrderedDict"
            ],
            "get": [
                "move_to_end"
            ],
            "put": [
                "move_to_end",
                "len",
                "popitem"
            ],
            "find": []
        }
    },
    "anylabeling/services/auto_labeling/yolov8_obb.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_obb.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_OBB",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov8_seg.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_seg.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Seg",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/ram.py",
        "imports": [
            "__base__.ram.RecognizeAnything"
        ],
        "classes": [
            {
                "class_name": "RAM",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolo11_obb_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_obb_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Obb_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolo11_seg_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_seg_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Seg_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/grounding_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_sam.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "onnxruntime",
            "numpy",
            "typing.Dict",
            "copy.deepcopy",
            "tokenizers.Tokenizer",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "lru_cache.LRUCache",
            "utils.general.Args",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks"
                ]
            },
            {
                "class_name": "GroundingSAM",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "preprocess",
                    "postprocess",
                    "post_process",
                    "predict_shapes",
                    "get_input_points",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenlizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "get_available_providers",
                "InferenceSession",
                "get_inputs",
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_configs",
                "get_tokenlizer",
                "SegmentAnythingONNX",
                "LRUCache"
            ],
            "run_encoder": [
                "run",
                "stack"
            ],
            "get_preprocess_shape": [
                "max",
                "int"
            ],
            "apply_coords": [
                "get_preprocess_shape",
                "astype",
                "deepcopy"
            ],
            "run_decoder": [
                "concatenate",
                "array",
                "astype",
                "apply_coords",
                "ones",
                "matmul",
                "zeros",
                "run",
                "inv",
                "transform_masks"
            ],
            "transform_masks": [
                "range",
                "warpAffine",
                "append",
                "array"
            ],
            "encode": [
                "min",
                "array",
                "warpAffine",
                "astype",
                "run_encoder"
            ],
            "predict_masks": [
                "run_decoder"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "preprocess": [
                "resize",
                "astype",
                "array",
                "transpose",
                "expand_dims",
                "get_caption",
                "str",
                "encode",
                "generate_masks_with_special_tokens_and_transfer_map",
                "zeros"
            ],
            "postprocess": [
                "squeeze",
                "max",
                "encode",
                "array",
                "get_phrases_from_posmap",
                "append"
            ],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes",
                "calculate_rotation_theta"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "get",
                "AutoLabelingResult",
                "encode",
                "put",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "rescale_boxes",
                "zip",
                "array",
                "predict_masks",
                "len",
                "post_process",
                "append",
                "get_input_points",
                "print_exc"
            ],
            "get_input_points": [
                "append",
                "astype",
                "array"
            ],
            "sig": [
                "exp"
            ],
            "rescale_boxes": [
                "array",
                "append"
            ],
            "get_configs": [
                "Args",
                "ValueError",
                "translate"
            ],
            "get_caption": [
                "lower",
                "strip",
                "endswith"
            ],
            "get_tokenlizer": [
                "replace",
                "path",
                "from_file",
                "str",
                "error"
            ],
            "get_phrases_from_posmap": [
                "isinstance",
                "where",
                "decode",
                "NotImplementedError"
            ],
            "generate_masks_with_special_tokens_and_transfer_map": [
                "zeros",
                "argwhere",
                "reshape",
                "eye",
                "tile",
                "range",
                "arange",
                "append",
                "stack"
            ],
            "unload": [],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/geco.py": {
        "file_name": "/anylabeling/services/auto_labeling/geco.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "onnxruntime",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "GeCoONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "run_decoder",
                    "encode",
                    "predict_bboxes"
                ]
            },
            {
                "class_name": "GeCo",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed",
                    "post_process"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "get_available_providers",
                "SessionOptions",
                "InferenceSession",
                "get_inputs",
                "__init__",
                "super",
                "get",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "GeCoONNX",
                "LRUCache"
            ],
            "get_input_points": [
                "append",
                "array"
            ],
            "run_encoder": [
                "run"
            ],
            "run_decoder": [
                "get_input_points",
                "array",
                "astype",
                "run",
                "max",
                "copy",
                "NMSBoxes",
                "tolist",
                "clip"
            ],
            "encode": [
                "min",
                "int",
                "resize",
                "copyMakeBorder",
                "transpose",
                "astype",
                "run_encoder"
            ],
            "predict_bboxes": [
                "run_decoder"
            ],
            "set_auto_labeling_marks": [],
            "predict_shapes": [
                "AutoLabelingResult",
                "qt_img_to_rgb_cv_img",
                "get",
                "encode",
                "put",
                "predict_bboxes",
                "append",
                "post_process",
                "warning",
                "print_exc"
            ],
            "unload": [
                "quit"
            ],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ],
            "post_process": [
                "min",
                "max",
                "Shape",
                "add_point",
                "QPointF"
            ]
        }
    },
    "anylabeling/services/auto_labeling/yolov8_obb_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_obb_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Obb_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov5_resnet.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_resnet.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "utils.softmax",
            "__base__.yolo.YOLO",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_ResNet",
                "methods": [
                    "__init__",
                    "cls_preprocess",
                    "cls_postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "isinstance",
                "get",
                "len",
                "zeros",
                "array",
                "reshape",
                "asarray",
                "enumerate"
            ],
            "cls_preprocess": [
                "resize",
                "transpose",
                "array",
                "astype",
                "zeros",
                "range",
                "reshape"
            ],
            "cls_postprocess": [
                "tolist",
                "softmax",
                "array",
                "argmax",
                "str"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "list",
                "map",
                "cls_preprocess",
                "cls_postprocess",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/model.py": {
        "file_name": "/anylabeling/services/auto_labeling/model.py",
        "imports": [
            "os",
            "pathlib",
            "yaml",
            "onnx",
            "urllib.request",
            "time",
            "urllib.parse.urlparse",
            "urllib.error.URLError",
            "ssl",
            "socket",
            "abc.abstractmethod",
            "PyQt5.QtCore.QCoreApplication",
            "PyQt5.QtCore.QFile",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtGui.QImage",
            "types.AutoLabelingResult",
            "anylabeling.config.get_config",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.label_file.LabelFile",
            "anylabeling.views.labeling.label_file.LabelFileError"
        ],
        "classes": [
            {
                "class_name": "Model",
                "methods": [
                    "__init__",
                    "get_required_widgets",
                    "allow_migrate_data",
                    "download_with_retry",
                    "get_model_abs_path",
                    "check_missing_config",
                    "predict_shapes",
                    "unload",
                    "load_image_from_filename",
                    "on_next_files_changed",
                    "set_output_mode"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "isinstance",
                "isfile",
                "FileNotFoundError",
                "format",
                "translate",
                "open",
                "safe_load",
                "ValueError",
                "type",
                "check_missing_config",
                "get_config"
            ],
            "get_required_widgets": [],
            "allow_migrate_data": [
                "expanduser",
                "join",
                "exists",
                "access",
                "rename",
                "error",
                "str"
            ],
            "download_with_retry": [
                "range",
                "warning",
                "urlretrieve",
                "on_message",
                "sleep"
            ],
            "get_model_abs_path": [
                "startswith",
                "abspath",
                "exists",
                "dirname",
                "join",
                "format",
                "translate",
                "on_message",
                "get_filename_from_url",
                "allow_migrate_data",
                "expanduser",
                "endswith",
                "lower",
                "check_model",
                "error",
                "str",
                "warning",
                "remove",
                "sleep",
                "mkdir",
                "Path",
                "getenv",
                "get",
                "split",
                "basename",
                "len",
                "info",
                "download_with_retry"
            ],
            "get_filename_from_url": [
                "urlparse",
                "basename"
            ],
            "_progress": [
                "int",
                "on_message",
                "format",
                "translate"
            ],
            "check_missing_config": [
                "Exception"
            ],
            "predict_shapes": [],
            "unload": [],
            "load_image_from_filename": [
                "splitext",
                "exists",
                "is_label_file",
                "LabelFile",
                "error",
                "format",
                "load_image_file",
                "fromData",
                "isNull"
            ],
            "on_next_files_changed": [],
            "set_output_mode": []
        }
    },
    "anylabeling/services/auto_labeling/yolox.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolox.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOX",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "rescale",
                    "multiclass_nms_class_agnostic",
                    "nms",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_iou": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "preprocess": [
                "len",
                "ones",
                "min",
                "astype",
                "resize",
                "int",
                "transpose",
                "ascontiguousarray"
            ],
            "postprocess": [
                "zip",
                "meshgrid",
                "arange",
                "reshape",
                "stack",
                "append",
                "full",
                "concatenate",
                "exp"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "rescale",
                "zip",
                "float",
                "str",
                "int",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "rescale": [
                "ones_like",
                "multiclass_nms_class_agnostic"
            ],
            "multiclass_nms_class_agnostic": [
                "argmax",
                "arange",
                "len",
                "sum",
                "nms",
                "concatenate"
            ],
            "nms": [
                "argsort",
                "append",
                "maximum",
                "minimum",
                "where"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/yolov5_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolov5_ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_ram.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs.ram"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_RAM",
                "methods": [
                    "__init__",
                    "ram_preprocess",
                    "ram_postprocess",
                    "predict_shapes",
                    "load_tag_list",
                    "get_results",
                    "get_attributes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "get",
                "load_tag_list",
                "index",
                "tolist",
                "enumerate",
                "isinstance",
                "len",
                "zeros",
                "array",
                "reshape",
                "asarray"
            ],
            "ram_preprocess": [
                "resize",
                "array",
                "transpose",
                "astype",
                "expand_dims"
            ],
            "ram_postprocess": [
                "range",
                "argwhere",
                "squeeze",
                "append",
                "join"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "get_attributes",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ],
            "load_tag_list": [
                "path",
                "splitlines",
                "read_text",
                "array"
            ],
            "get_results": [],
            "get_attributes": [
                "zip",
                "list",
                "map",
                "ram_preprocess",
                "get_ort_inference",
                "ram_postprocess",
                "get_results",
                "append",
                "int"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/sam_med2d.py": {
        "file_name": "/anylabeling/services/auto_labeling/sam_med2d.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "onnxruntime",
            "copy.deepcopy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "run_encoder",
                    "transform",
                    "encode",
                    "get_input_points",
                    "apply_coords",
                    "run_decoder",
                    "predict_masks"
                ]
            },
            {
                "class_name": "SAM_Med2D",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "array",
                "get_available_providers",
                "InferenceSession",
                "get_inputs",
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SegmentAnythingONNX",
                "LRUCache",
                "get",
                "ChineseClipONNX"
            ],
            "run_encoder": [
                "run"
            ],
            "transform": [
                "resize",
                "transpose",
                "astype",
                "expand_dims"
            ],
            "encode": [
                "transform",
                "run_encoder"
            ],
            "get_input_points": [
                "append",
                "astype",
                "array"
            ],
            "apply_coords": [
                "astype",
                "deepcopy"
            ],
            "run_decoder": [
                "get_input_points",
                "ValueError",
                "int",
                "zeros",
                "isinstance",
                "array",
                "astype",
                "apply_coords",
                "expand_dims",
                "run"
            ],
            "predict_masks": [
                "run_decoder"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes",
                "calculate_rotation_theta",
                "clip_net",
                "argmax"
            ],
            "predict_shapes": [
                "AutoLabelingResult",
                "qt_img_to_rgb_cv_img",
                "get",
                "encode",
                "put",
                "predict_masks",
                "len",
                "post_process",
                "warning",
                "print_exc"
            ],
            "unload": [
                "quit"
            ],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encode",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/yolov5_seg.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_seg.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_Seg",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolow.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolow.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOW",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/yolow_ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolow_ram.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "__base__.ram.RecognizeAnything",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOW_RAM",
                "methods": [
                    "__init__",
                    "predict_shapes"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "get",
                "load_tag_list",
                "index",
                "tolist",
                "enumerate"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "inference",
                "postprocess",
                "zip",
                "int",
                "list",
                "map",
                "get_ort_inference",
                "get_results",
                "Shape",
                "add_point",
                "QPointF",
                "append",
                "AutoLabelingResult"
            ]
        }
    },
    "anylabeling/services/auto_labeling/efficientvit_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/efficientvit_sam.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "onnxruntime",
            "copy.deepcopy",
            "typing.Any",
            "typing.Union",
            "typing.Tuple",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "SamEncoder",
                "methods": [
                    "__init__",
                    "_extract_feature",
                    "__call__"
                ]
            },
            {
                "class_name": "SamDecoder",
                "methods": [
                    "__init__",
                    "get_preprocess_shape",
                    "run",
                    "apply_coords",
                    "apply_boxes"
                ]
            },
            {
                "class_name": "EfficientViT_SAM",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "get_input_points",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "get_available_providers",
                "InferenceSession",
                "get_inputs",
                "get_outputs",
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "SamEncoder",
                "SamDecoder",
                "LRUCache"
            ],
            "_extract_feature": [
                "run"
            ],
            "__call__": [
                "_extract_feature"
            ],
            "get_preprocess_shape": [
                "max",
                "int"
            ],
            "run": [
                "get_preprocess_shape",
                "ValueError",
                "zeros",
                "expand_dims",
                "ones",
                "isinstance",
                "array",
                "astype",
                "apply_coords",
                "run"
            ],
            "apply_coords": [
                "astype",
                "deepcopy"
            ],
            "apply_boxes": [
                "apply_coords",
                "reshape"
            ],
            "set_auto_labeling_marks": [],
            "set_mask_fineness": [],
            "post_process": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean",
                "reshape",
                "tolist",
                "Shape",
                "int",
                "add_point",
                "QPointF",
                "get_bounding_boxes",
                "calculate_rotation_theta",
                "clip_net",
                "argmax"
            ],
            "get_input_points": [
                "append",
                "astype",
                "array"
            ],
            "predict_shapes": [
                "AutoLabelingResult",
                "get",
                "qt_img_to_rgb_cv_img",
                "encoder_model",
                "put",
                "get_input_points",
                "run",
                "len",
                "post_process",
                "warning",
                "print_exc"
            ],
            "unload": [
                "quit"
            ],
            "preload_worker": [
                "find",
                "load_image_from_filename",
                "qt_img_to_rgb_cv_img",
                "encoder_model",
                "put"
            ],
            "on_next_files_changed": [
                "isRunning",
                "QThread",
                "GenericWorker",
                "connect",
                "moveToThread",
                "start"
            ]
        }
    },
    "anylabeling/services/auto_labeling/yolo11_det_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_det_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Det_Tracker",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/configs/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/__init__.py",
        "imports": [
            ".bert",
            ".clip",
            ".ppocr",
            ".ram"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/configs/bert/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/bert/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/configs/clip/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/clip/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/configs/ppocr/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/ppocr/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/configs/chatrex/upn_large.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/chatrex/upn_large.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/configs/ram/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/ram/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/__init__.py",
        "imports": [
            "model.build_groundingdino"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/registry.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/registry.py",
        "imports": [
            "inspect",
            "functools.partial"
        ],
        "classes": [
            {
                "class_name": "Registry",
                "methods": [
                    "__init__",
                    "__repr__",
                    "__len__",
                    "name",
                    "module_dict",
                    "get",
                    "registe_with_name",
                    "register"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "dict"
            ],
            "__repr__": [
                "format",
                "list",
                "keys"
            ],
            "__len__": [
                "len"
            ],
            "name": [],
            "module_dict": [],
            "get": [
                "get"
            ],
            "registe_with_name": [
                "partial"
            ],
            "register": [
                "isfunction",
                "TypeError",
                "format",
                "type",
                "KeyError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/box_ops.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/box_ops.py",
        "imports": [
            "torch",
            "torchvision.ops.boxes.box_area",
            "ipdb"
        ],
        "classes": [],
        "functions": {
            "box_cxcywh_to_xyxy": [
                "unbind",
                "stack"
            ],
            "box_xyxy_to_cxcywh": [
                "unbind",
                "stack"
            ],
            "box_iou": [
                "box_area",
                "max",
                "min",
                "clamp"
            ],
            "generalized_box_iou": [
                "all",
                "box_iou",
                "min",
                "max",
                "clamp"
            ],
            "box_iou_pairwise": [
                "box_area",
                "max",
                "min",
                "clamp"
            ],
            "generalized_box_iou_pairwise": [
                "all",
                "box_iou_pairwise",
                "min",
                "max",
                "clamp"
            ],
            "masks_to_boxes": [
                "numel",
                "zeros",
                "arange",
                "meshgrid",
                "unsqueeze",
                "max",
                "flatten",
                "min",
                "masked_fill",
                "bool",
                "stack"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/slconfig.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/slconfig.py",
        "imports": [
            "ast",
            "os",
            "os.path",
            "shutil",
            "sys",
            "tempfile",
            "argparse.Action",
            "importlib.import_module",
            "addict.Dict",
            "yapf.yapflib.yapf_api.FormatCode",
            "slio.slload"
        ],
        "classes": [
            {
                "class_name": "ConfigDict",
                "methods": [
                    "__missing__",
                    "__getattr__"
                ]
            },
            {
                "class_name": "SLConfig",
                "methods": [
                    "_validate_py_syntax",
                    "_file2dict",
                    "_merge_a_into_b",
                    "fromfile",
                    "__init__",
                    "filename",
                    "text",
                    "pretty_text",
                    "__repr__",
                    "__len__",
                    "__getattr__",
                    "__getitem__",
                    "__setattr__",
                    "__setitem__",
                    "__iter__",
                    "dump",
                    "merge_from_dict",
                    "__setstate__",
                    "copy",
                    "deepcopy"
                ]
            },
            {
                "class_name": "DictAction",
                "methods": [
                    "_parse_int_float_bool",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "check_file_exist": [
                "isfile",
                "FileNotFoundError",
                "format"
            ],
            "__missing__": [
                "KeyError"
            ],
            "__getattr__": [
                "__getattr__",
                "super",
                "AttributeError",
                "getattr"
            ],
            "_validate_py_syntax": [
                "open",
                "read",
                "parse",
                "SyntaxError"
            ],
            "_file2dict": [
                "abspath",
                "expanduser",
                "check_file_exist",
                "endswith",
                "lower",
                "TemporaryDirectory",
                "NamedTemporaryFile",
                "basename",
                "close",
                "copyfile",
                "join",
                "splitext",
                "insert",
                "_validate_py_syntax",
                "import_module",
                "pop",
                "items",
                "startswith",
                "slload",
                "IOError",
                "open",
                "read",
                "dirname",
                "isinstance",
                "list",
                "_file2dict",
                "append",
                "dict",
                "len",
                "keys",
                "KeyError",
                "update",
                "_merge_a_into_b"
            ],
            "_merge_a_into_b": [
                "isinstance",
                "copy",
                "items",
                "pop",
                "TypeError",
                "type",
                "_merge_a_into_b",
                "int"
            ],
            "fromfile": [
                "_file2dict",
                "SLConfig"
            ],
            "__init__": [
                "dict",
                "isinstance",
                "TypeError",
                "type",
                "KeyError",
                "__setattr__",
                "super",
                "ConfigDict",
                "open",
                "read"
            ],
            "filename": [],
            "text": [],
            "pretty_text": [
                "to_dict",
                "_format_dict",
                "dict",
                "FormatCode"
            ],
            "_indent": [
                "split",
                "len",
                "pop",
                "join"
            ],
            "_format_basic_types": [
                "isinstance",
                "str",
                "_indent"
            ],
            "_format_list": [
                "all",
                "isinstance",
                "rstrip",
                "join",
                "_indent",
                "_format_dict",
                "str",
                "_format_basic_types"
            ],
            "_contain_invalid_identifier": [
                "isidentifier",
                "str"
            ],
            "_format_dict": [
                "_contain_invalid_identifier",
                "enumerate",
                "items",
                "len",
                "isinstance",
                "_format_dict",
                "str",
                "_indent",
                "_format_list",
                "_format_basic_types",
                "append",
                "join"
            ],
            "__repr__": [
                "__repr__"
            ],
            "__len__": [
                "len"
            ],
            "__getitem__": [
                "__getitem__"
            ],
            "__setattr__": [
                "isinstance",
                "ConfigDict",
                "__setattr__"
            ],
            "__setitem__": [
                "isinstance",
                "ConfigDict",
                "__setitem__"
            ],
            "__iter__": [
                "iter"
            ],
            "dump": [
                "open",
                "write"
            ],
            "merge_from_dict": [
                "items",
                "split",
                "setdefault",
                "ConfigDict",
                "__getattribute__",
                "super",
                "__setattr__",
                "_merge_a_into_b"
            ],
            "__setstate__": [
                "__init__"
            ],
            "copy": [
                "SLConfig",
                "copy"
            ],
            "deepcopy": [
                "SLConfig",
                "deepcopy"
            ],
            "_parse_int_float_bool": [
                "int",
                "float",
                "lower"
            ],
            "__call__": [
                "split",
                "_parse_int_float_bool",
                "len",
                "setattr"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/utils.py",
        "imports": [
            "argparse",
            "json",
            "warnings",
            "collections.OrderedDict",
            "copy.deepcopy",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "numpy",
            "torch",
            "transformers.AutoTokenizer",
            "slconfig.SLConfig",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "CocoClassMapper",
                "methods": [
                    "__init__",
                    "origin2compact",
                    "compact2origin"
                ]
            },
            {
                "class_name": "Embedder",
                "methods": [
                    "__init__",
                    "create_embedding_fn",
                    "embed"
                ]
            },
            {
                "class_name": "APOPMeter",
                "methods": [
                    "__init__",
                    "update",
                    "update_cm"
                ]
            },
            {
                "class_name": "NiceRepr",
                "methods": [
                    "__nice__",
                    "__repr__",
                    "__str__"
                ]
            },
            {
                "class_name": "ModelEma",
                "methods": [
                    "__init__",
                    "_update",
                    "update",
                    "set"
                ]
            },
            {
                "class_name": "BestMetricSingle",
                "methods": [
                    "__init__",
                    "isbetter",
                    "update",
                    "__str__",
                    "__repr__",
                    "summary"
                ]
            },
            {
                "class_name": "BestMetricHolder",
                "methods": [
                    "__init__",
                    "update",
                    "summary",
                    "__repr__",
                    "__str__"
                ]
            }
        ],
        "functions": {
            "slprint": [
                "isinstance",
                "print",
                "type",
                "range",
                "min",
                "len",
                "slprint",
                "items"
            ],
            "clean_state_dict": [
                "OrderedDict",
                "items"
            ],
            "renorm": [
                "dim",
                "size",
                "str",
                "permute",
                "Tensor"
            ],
            "__init__": [
                "int",
                "items",
                "create_embedding_fn",
                "__init__",
                "super",
                "deepcopy",
                "eval",
                "to",
                "BestMetricSingle"
            ],
            "origin2compact": [
                "int"
            ],
            "compact2origin": [
                "int"
            ],
            "to_device": [
                "isinstance",
                "to",
                "to_device",
                "items",
                "NotImplementedError",
                "format",
                "type"
            ],
            "get_gaussian_mean": [
                "sum",
                "softmax",
                "to",
                "linspace",
                "repeat"
            ],
            "get_expected_points_from_map": [
                "get_gaussian_mean",
                "stack"
            ],
            "create_embedding_fn": [
                "append",
                "linspace",
                "p_fn"
            ],
            "embed": [
                "cat",
                "fn"
            ],
            "get_embedder": [
                "Identity",
                "Embedder",
                "embed"
            ],
            "update": [
                "item",
                "sum",
                "logical_and",
                "_update",
                "isbetter",
                "update"
            ],
            "update_cm": [],
            "inverse_sigmoid": [
                "clamp",
                "log"
            ],
            "get_raw_dict": [
                "isinstance",
                "vars",
                "NotImplementedError",
                "format",
                "type"
            ],
            "stat_tensors": [
                "dim",
                "softmax",
                "sum",
                "log",
                "max",
                "min",
                "mean",
                "var"
            ],
            "__nice__": [
                "hasattr",
                "str",
                "len",
                "NotImplementedError"
            ],
            "__repr__": [
                "__nice__",
                "hex",
                "id",
                "warn",
                "str",
                "__repr__",
                "__str__",
                "dumps",
                "summary"
            ],
            "__str__": [
                "__nice__",
                "warn",
                "str",
                "__repr__",
                "format"
            ],
            "ensure_rng": [
                "isinstance",
                "RandomState"
            ],
            "random_boxes": [
                "ensure_rng",
                "astype",
                "rand",
                "minimum",
                "maximum",
                "from_numpy"
            ],
            "_update": [
                "no_grad",
                "zip",
                "values",
                "state_dict",
                "to",
                "copy_",
                "update_fn"
            ],
            "set": [
                "_update"
            ],
            "isbetter": [],
            "summary": [
                "summary",
                "update",
                "items"
            ],
            "targets_to": [
                "to",
                "items"
            ],
            "get_phrases_from_posmap": [
                "isinstance",
                "dim",
                "tolist",
                "nonzero",
                "decode",
                "NotImplementedError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/get_tokenlizer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/get_tokenlizer.py",
        "imports": [
            "transformers.AutoTokenizer",
            "transformers.BertModel",
            "transformers.BertTokenizer",
            "transformers.RobertaModel",
            "transformers.RobertaTokenizerFast",
            "os"
        ],
        "classes": [],
        "functions": {
            "get_tokenlizer": [
                "isinstance",
                "hasattr",
                "get",
                "isdir",
                "exists",
                "ValueError",
                "format",
                "type",
                "from_pretrained"
            ],
            "get_pretrained_language_model": [
                "isdir",
                "exists",
                "from_pretrained",
                "ValueError",
                "format"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/time_counter.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/time_counter.py",
        "imports": [
            "json",
            "time"
        ],
        "classes": [
            {
                "class_name": "TimeCounter",
                "methods": [
                    "__init__",
                    "clear",
                    "timeit"
                ]
            },
            {
                "class_name": "TimeHolder",
                "methods": [
                    "__init__",
                    "update",
                    "final_res",
                    "__str__"
                ]
            },
            {
                "class_name": "AverageMeter",
                "methods": [
                    "__init__",
                    "reset",
                    "update",
                    "__str__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "reset"
            ],
            "clear": [
                "perf_counter"
            ],
            "timeit": [
                "perf_counter"
            ],
            "update": [
                "items",
                "AverageMeter",
                "update"
            ],
            "final_res": [
                "items"
            ],
            "__str__": [
                "dumps",
                "final_res",
                "format"
            ],
            "reset": []
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/inference.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/inference.py",
        "imports": [
            "typing.Tuple",
            "typing.List",
            "cv2",
            "numpy",
            "supervision",
            "torch",
            "PIL.Image",
            "torchvision.ops.box_convert",
            "bisect",
            "groundingdino.datasets.transforms",
            "groundingdino.models.build_model",
            "util.misc.clean_state_dict",
            "util.slconfig.SLConfig",
            "util.utils.get_phrases_from_posmap"
        ],
        "classes": [
            {
                "class_name": "Model",
                "methods": [
                    "__init__",
                    "predict_with_caption",
                    "predict_with_classes",
                    "preprocess_image",
                    "post_process_result",
                    "phrases2classes"
                ]
            }
        ],
        "functions": {
            "preprocess_caption": [
                "strip",
                "lower",
                "endswith"
            ],
            "load_model": [
                "fromfile",
                "build_model",
                "load",
                "load_state_dict",
                "clean_state_dict",
                "eval"
            ],
            "load_image": [
                "Compose",
                "RandomResize",
                "ToTensor",
                "Normalize",
                "convert",
                "open",
                "asarray",
                "transform"
            ],
            "predict": [
                "preprocess_caption",
                "to",
                "no_grad",
                "model",
                "sigmoid",
                "cpu",
                "max",
                "tokenizer",
                "range",
                "len",
                "argmax",
                "bisect_left",
                "append",
                "replace",
                "get_phrases_from_posmap"
            ],
            "annotate": [
                "Tensor",
                "numpy",
                "box_convert",
                "Detections",
                "zip",
                "BoxAnnotator",
                "cvtColor",
                "annotate"
            ],
            "__init__": [
                "to",
                "load_model"
            ],
            "predict_with_caption": [
                "to",
                "preprocess_image",
                "predict",
                "post_process_result"
            ],
            "predict_with_classes": [
                "join",
                "to",
                "preprocess_image",
                "predict",
                "post_process_result",
                "phrases2classes"
            ],
            "preprocess_image": [
                "Compose",
                "RandomResize",
                "ToTensor",
                "Normalize",
                "fromarray",
                "cvtColor",
                "transform"
            ],
            "post_process_result": [
                "Tensor",
                "numpy",
                "box_convert",
                "Detections"
            ],
            "phrases2classes": [
                "append",
                "index",
                "array"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/util/misc.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/misc.py",
        "imports": [
            "colorsys",
            "datetime",
            "functools",
            "io",
            "json",
            "os",
            "pickle",
            "subprocess",
            "time",
            "collections.OrderedDict",
            "collections.defaultdict",
            "collections.deque",
            "typing.List",
            "typing.Optional",
            "numpy",
            "torch",
            "torch.distributed",
            "torchvision",
            "torch.Tensor",
            "torchvision.ops._new_empty_tensor",
            "torchvision.ops.misc._output_size",
            "builtins"
        ],
        "classes": [
            {
                "class_name": "SmoothedValue",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "median",
                    "avg",
                    "global_avg",
                    "max",
                    "value",
                    "__str__"
                ]
            },
            {
                "class_name": "MetricLogger",
                "methods": [
                    "__init__",
                    "update",
                    "__getattr__",
                    "__str__",
                    "synchronize_between_processes",
                    "add_meter",
                    "log_every"
                ]
            },
            {
                "class_name": "NestedTensor",
                "methods": [
                    "__init__",
                    "imgsize",
                    "to",
                    "to_img_list_single",
                    "to_img_list",
                    "device",
                    "decompose",
                    "__repr__",
                    "shape"
                ]
            },
            {
                "class_name": "color_sys",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "deque",
                "defaultdict",
                "to",
                "zeros_like",
                "dim",
                "sum",
                "ValueError",
                "format",
                "arange",
                "rand",
                "append",
                "tuple",
                "int",
                "hls_to_rgb"
            ],
            "update": [
                "append",
                "items",
                "isinstance",
                "item",
                "update"
            ],
            "synchronize_between_processes": [
                "is_dist_avail_and_initialized",
                "tensor",
                "barrier",
                "all_reduce",
                "tolist",
                "int",
                "values",
                "synchronize_between_processes"
            ],
            "median": [
                "tensor",
                "list",
                "item",
                "median"
            ],
            "avg": [
                "tensor",
                "list",
                "item",
                "mean"
            ],
            "global_avg": [
                "get"
            ],
            "max": [
                "max"
            ],
            "value": [],
            "__str__": [
                "format",
                "items",
                "append",
                "str",
                "join"
            ],
            "_get_global_gloo_group": [
                "get_backend",
                "new_group",
                "lru_cache"
            ],
            "all_gather_cpu": [
                "get_world_size",
                "_get_global_gloo_group",
                "BytesIO",
                "save",
                "getbuffer",
                "to",
                "ByteTensor",
                "tensor",
                "numel",
                "range",
                "all_gather",
                "print",
                "int",
                "item",
                "max",
                "isinstance",
                "append",
                "empty",
                "cat",
                "zip",
                "split",
                "numpy",
                "cpu",
                "load"
            ],
            "all_gather": [
                "getenv",
                "all_gather_cpu",
                "get_world_size",
                "dumps",
                "from_buffer",
                "to",
                "ByteTensor",
                "tensor",
                "numel",
                "range",
                "all_gather",
                "int",
                "item",
                "max",
                "append",
                "empty",
                "cat",
                "zip",
                "tobytes",
                "numpy",
                "cpu",
                "loads"
            ],
            "reduce_dict": [
                "get_world_size",
                "no_grad",
                "sorted",
                "keys",
                "append",
                "stack",
                "all_reduce",
                "zip"
            ],
            "__getattr__": [
                "AttributeError",
                "format",
                "type"
            ],
            "add_meter": [],
            "log_every": [
                "time",
                "SmoothedValue",
                "str",
                "len",
                "is_available",
                "join",
                "update",
                "timedelta",
                "int",
                "print_func",
                "format",
                "max_memory_allocated"
            ],
            "get_sha": [
                "dirname",
                "abspath",
                "_run",
                "check_output"
            ],
            "_run": [
                "strip",
                "decode",
                "check_output"
            ],
            "collate_fn": [
                "list",
                "zip",
                "nested_tensor_from_tensor_list",
                "tuple"
            ],
            "_max_by_axis": [
                "enumerate",
                "max"
            ],
            "imgsize": [
                "range",
                "max",
                "sum",
                "append",
                "Tensor"
            ],
            "to": [
                "to",
                "NestedTensor"
            ],
            "to_img_list_single": [
                "dim",
                "format",
                "max",
                "sum"
            ],
            "to_img_list": [
                "dim",
                "to_img_list_single",
                "range",
                "append"
            ],
            "device": [],
            "decompose": [],
            "__repr__": [
                "str"
            ],
            "shape": [],
            "nested_tensor_from_tensor_list": [
                "_is_tracing",
                "_onnx_nested_tensor_from_tensor_list",
                "_max_by_axis",
                "list",
                "len",
                "zeros",
                "ones",
                "zip",
                "copy_",
                "ValueError",
                "NestedTensor"
            ],
            "_onnx_nested_tensor_from_tensor_list": [
                "range",
                "dim",
                "to",
                "max",
                "stack",
                "append",
                "tuple",
                "zip",
                "pad",
                "zeros_like",
                "NestedTensor"
            ],
            "setup_for_distributed": [],
            "print": [
                "pop",
                "builtin_print"
            ],
            "is_dist_avail_and_initialized": [
                "is_available",
                "is_initialized"
            ],
            "get_world_size": [
                "is_dist_avail_and_initialized",
                "get_world_size"
            ],
            "get_rank": [
                "is_dist_avail_and_initialized",
                "get_rank"
            ],
            "is_main_process": [
                "get_rank"
            ],
            "save_on_master": [
                "is_main_process",
                "save"
            ],
            "init_distributed_mode": [
                "int",
                "print",
                "format",
                "dumps",
                "dict",
                "device_count",
                "set_device",
                "init_process_group",
                "barrier",
                "setup_for_distributed"
            ],
            "accuracy": [
                "numel",
                "zeros",
                "max",
                "size",
                "topk",
                "t",
                "eq",
                "expand_as",
                "view",
                "sum",
                "float",
                "append",
                "mul_",
                "no_grad"
            ],
            "accuracy_onehot": [
                "sum",
                "float",
                "abs",
                "no_grad"
            ],
            "interpolate": [
                "numel",
                "interpolate",
                "_output_size",
                "list",
                "_new_empty_tensor"
            ],
            "__call__": [],
            "inverse_sigmoid": [
                "clamp",
                "log"
            ],
            "clean_state_dict": [
                "OrderedDict",
                "items"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/slio.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/slio.py",
        "imports": [
            "json",
            "pickle",
            "abc.ABCMeta",
            "abc.abstractmethod",
            "pathlib.Path",
            "yaml",
            "yaml.CLoader",
            "yaml.CDumper",
            "yaml.Loader",
            "yaml.Dumper"
        ],
        "classes": [
            {
                "class_name": "BaseFileHandler",
                "methods": [
                    "load_from_fileobj",
                    "dump_to_fileobj",
                    "dump_to_str",
                    "load_from_path",
                    "dump_to_path"
                ]
            },
            {
                "class_name": "JsonHandler",
                "methods": [
                    "load_from_fileobj",
                    "dump_to_fileobj",
                    "dump_to_str"
                ]
            },
            {
                "class_name": "PickleHandler",
                "methods": [
                    "load_from_fileobj",
                    "load_from_path",
                    "dump_to_str",
                    "dump_to_fileobj",
                    "dump_to_path"
                ]
            },
            {
                "class_name": "YamlHandler",
                "methods": [
                    "load_from_fileobj",
                    "dump_to_fileobj",
                    "dump_to_str"
                ]
            }
        ],
        "functions": {
            "load_from_fileobj": [
                "load",
                "setdefault"
            ],
            "dump_to_fileobj": [
                "dump",
                "setdefault"
            ],
            "dump_to_str": [
                "dumps",
                "setdefault",
                "dump"
            ],
            "load_from_path": [
                "open",
                "load_from_fileobj",
                "load_from_path",
                "super"
            ],
            "dump_to_path": [
                "open",
                "dump_to_fileobj",
                "dump_to_path",
                "super"
            ],
            "is_str": [
                "isinstance"
            ],
            "slload": [
                "isinstance",
                "str",
                "is_str",
                "split",
                "TypeError",
                "load_from_path",
                "hasattr",
                "load_from_fileobj"
            ],
            "sldump": [
                "isinstance",
                "str",
                "is_str",
                "split",
                "ValueError",
                "TypeError",
                "dump_to_str",
                "dump_to_path",
                "hasattr",
                "dump_to_fileobj"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/logger.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/logger.py",
        "imports": [
            "functools",
            "logging",
            "os",
            "sys",
            "termcolor.colored"
        ],
        "classes": [
            {
                "class_name": "_ColorfulFormatter",
                "methods": [
                    "__init__",
                    "formatMessage"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "pop",
                "len",
                "__init__",
                "super"
            ],
            "formatMessage": [
                "replace",
                "formatMessage",
                "super",
                "colored"
            ],
            "setup_logger": [
                "getLogger",
                "setLevel",
                "Formatter",
                "StreamHandler",
                "_ColorfulFormatter",
                "colored",
                "str",
                "setFormatter",
                "addHandler",
                "endswith",
                "join",
                "makedirs",
                "dirname",
                "_cached_log_stream",
                "lru_cache"
            ],
            "_cached_log_stream": [
                "open",
                "lru_cache"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/visualizer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/visualizer.py",
        "imports": [
            "datetime",
            "os",
            "cv2",
            "matplotlib.pyplot",
            "numpy",
            "torch",
            "matplotlib.transforms",
            "matplotlib.collections.PatchCollection",
            "matplotlib.patches.Polygon",
            "pycocotools.mask"
        ],
        "classes": [
            {
                "class_name": "ColorMap",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "COCOVisualizer",
                "methods": [
                    "__init__",
                    "visualize",
                    "addtgt",
                    "showAnns"
                ]
            }
        ],
        "functions": {
            "renorm": [
                "dim",
                "size",
                "str",
                "permute",
                "Tensor"
            ],
            "__init__": [
                "array"
            ],
            "__call__": [
                "copy",
                "repeat",
                "astype",
                "concatenate"
            ],
            "rainbow_text": [
                "gca",
                "gcf",
                "show",
                "zip",
                "text",
                "draw",
                "get_renderer",
                "get_window_extent",
                "offset_copy"
            ],
            "visualize": [
                "figure",
                "gca",
                "permute",
                "renorm",
                "imshow",
                "addtgt",
                "format",
                "int",
                "replace",
                "str",
                "now",
                "print",
                "makedirs",
                "dirname",
                "savefig",
                "close"
            ],
            "addtgt": [
                "gca",
                "set_title",
                "set_axis_off",
                "cpu",
                "Tensor",
                "tolist",
                "append",
                "reshape",
                "array",
                "Polygon",
                "random",
                "PatchCollection",
                "add_collection",
                "len",
                "enumerate",
                "int",
                "str",
                "join",
                "text",
                "isinstance",
                "min",
                "max",
                "astype",
                "ColorMap",
                "cm",
                "imshow"
            ],
            "showAnns": [
                "len",
                "Exception",
                "gca",
                "set_autoscale_on",
                "tolist",
                "random",
                "type",
                "reshape",
                "array",
                "int",
                "append",
                "Polygon",
                "frPyObjects",
                "decode",
                "ones",
                "range",
                "imshow",
                "dstack",
                "loadCats",
                "all",
                "plot",
                "PatchCollection",
                "add_collection",
                "print"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/util/vl_utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/vl_utils.py",
        "imports": [
            "os",
            "random",
            "typing.List",
            "torch"
        ],
        "classes": [],
        "functions": {
            "create_positive_map_from_span": [
                "zeros",
                "len",
                "enumerate",
                "char_to_token",
                "get",
                "fill_",
                "sum"
            ],
            "build_captions_and_token_span": [
                "lower",
                "split",
                "strip",
                "append",
                "choice",
                "len"
            ],
            "build_id2posspan_and_caption": [
                "lower",
                "build_captions_and_token_span",
                "items"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/transformer_vanilla.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/transformer_vanilla.py",
        "imports": [
            "typing.Optional",
            "torch",
            "torch.nn.functional",
            "torch.Tensor",
            "torch.nn",
            "utils.MLP",
            "utils._get_activation_fn",
            "utils._get_clones",
            "utils.gen_encoder_output_proposals",
            "utils.gen_sineembed_for_position",
            "utils.sigmoid_focal_loss"
        ],
        "classes": [
            {
                "class_name": "TextTransformer",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerEncoderLayer",
                "methods": [
                    "__init__",
                    "with_pos_embed",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "TransformerEncoderLayer",
                "_get_clones",
                "MultiheadAttention",
                "Linear",
                "Dropout",
                "LayerNorm",
                "_get_activation_fn"
            ],
            "forward": [
                "transpose",
                "layer",
                "norm",
                "dim",
                "repeat",
                "with_pos_embed",
                "self_attn",
                "dropout1",
                "norm1",
                "linear2",
                "dropout",
                "activation",
                "linear1",
                "dropout2",
                "norm2"
            ],
            "with_pos_embed": []
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/fuse_modules.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/fuse_modules.py",
        "imports": [
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "timm.models.layers.DropPath"
        ],
        "classes": [
            {
                "class_name": "FeatureResizer",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "BiMultiHeadAttention",
                "methods": [
                    "__init__",
                    "_shape",
                    "_reset_parameters",
                    "forward"
                ]
            },
            {
                "class_name": "BiAttentionBlock",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "Linear",
                "LayerNorm",
                "Dropout",
                "_reset_parameters",
                "BiMultiHeadAttention",
                "DropPath",
                "Identity",
                "Parameter",
                "ones"
            ],
            "forward": [
                "fc",
                "layer_norm",
                "dropout",
                "size",
                "v_proj",
                "_shape",
                "l_proj",
                "values_v_proj",
                "values_l_proj",
                "view",
                "bmm",
                "transpose",
                "ValueError",
                "max",
                "clamp",
                "flatten",
                "repeat",
                "masked_fill_",
                "float",
                "softmax",
                "reshape",
                "out_v_proj",
                "out_l_proj",
                "layer_norm_v",
                "layer_norm_l",
                "attn",
                "drop_path"
            ],
            "l1norm": [
                "sum",
                "abs",
                "div"
            ],
            "l2norm": [
                "sqrt",
                "sum",
                "pow",
                "div"
            ],
            "func_attention": [
                "size",
                "transpose",
                "bmm",
                "view",
                "Softmax",
                "l2norm",
                "LeakyReLU",
                "ValueError",
                "contiguous"
            ],
            "_shape": [
                "contiguous",
                "transpose",
                "view"
            ],
            "_reset_parameters": [
                "xavier_uniform_",
                "fill_"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/utils.py",
        "imports": [
            "copy",
            "math",
            "torch",
            "torch.nn.functional",
            "torch.Tensor",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "RandomBoxPerturber",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "MLP",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "ContrastiveEmbed",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": {
            "_get_clones": [
                "ModuleList",
                "range",
                "deepcopy"
            ],
            "get_sine_pos_embed": [
                "arange",
                "div",
                "sine_func",
                "split",
                "cat"
            ],
            "sine_func": [
                "flatten",
                "stack",
                "sin",
                "cos"
            ],
            "gen_encoder_output_proposals": [
                "enumerate",
                "view",
                "sum",
                "meshgrid",
                "linspace",
                "cat",
                "unsqueeze",
                "expand",
                "ones_like",
                "sigmoid",
                "append",
                "all",
                "log",
                "masked_fill",
                "float"
            ],
            "__init__": [
                "Tensor",
                "__init__",
                "super",
                "ModuleList",
                "Linear",
                "zip"
            ],
            "__call__": [
                "rand_like",
                "to",
                "clamp_"
            ],
            "sigmoid_focal_loss": [
                "sigmoid",
                "binary_cross_entropy_with_logits",
                "sum",
                "mean"
            ],
            "forward": [
                "enumerate",
                "relu",
                "layer",
                "isinstance",
                "transpose",
                "masked_fill_",
                "float",
                "full"
            ],
            "_get_activation_fn": [
                "PReLU",
                "RuntimeError"
            ],
            "gen_sineembed_for_position": [
                "arange",
                "div",
                "flatten",
                "stack",
                "sin",
                "cos",
                "size",
                "cat",
                "ValueError",
                "format"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/transformer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/transformer.py",
        "imports": [
            "typing.Optional",
            "torch",
            "torch.utils.checkpoint",
            "torch.Tensor",
            "torch.nn",
            "util.misc.inverse_sigmoid",
            "fuse_modules.BiAttentionBlock",
            "ms_deform_attn.MultiScaleDeformableAttention",
            "transformer_vanilla.TransformerEncoderLayer",
            "utils.MLP",
            "utils._get_activation_fn",
            "utils._get_clones",
            "utils.gen_encoder_output_proposals",
            "utils.gen_sineembed_for_position",
            "utils.get_sine_pos_embed"
        ],
        "classes": [
            {
                "class_name": "Transformer",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "get_valid_ratio",
                    "init_ref_points",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerEncoder",
                "methods": [
                    "__init__",
                    "get_reference_points",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerDecoder",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "DeformableTransformerEncoderLayer",
                "methods": [
                    "__init__",
                    "with_pos_embed",
                    "forward_ffn",
                    "forward"
                ]
            },
            {
                "class_name": "DeformableTransformerDecoderLayer",
                "methods": [
                    "__init__",
                    "rm_self_attn_modules",
                    "with_pos_embed",
                    "forward_ffn",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "DeformableTransformerEncoderLayer",
                "TransformerEncoderLayer",
                "BiAttentionBlock",
                "LayerNorm",
                "TransformerEncoder",
                "DeformableTransformerDecoderLayer",
                "TransformerDecoder",
                "isinstance",
                "Warning",
                "format",
                "type",
                "Parameter",
                "Tensor",
                "Embedding",
                "normal_",
                "Linear",
                "init_ref_points",
                "_reset_parameters",
                "_get_clones",
                "MLP",
                "MSDeformAttn",
                "Dropout",
                "_get_activation_fn",
                "Identity",
                "MultiheadAttention"
            ],
            "_reset_parameters": [
                "parameters",
                "dim",
                "xavier_uniform_",
                "modules",
                "isinstance",
                "_reset_parameters",
                "normal_"
            ],
            "get_valid_ratio": [
                "sum",
                "float",
                "stack"
            ],
            "init_ref_points": [
                "Embedding"
            ],
            "forward": [
                "enumerate",
                "zip",
                "append",
                "transpose",
                "flatten",
                "view",
                "cat",
                "as_tensor",
                "new_zeros",
                "cumsum",
                "prod",
                "stack",
                "get_valid_ratio",
                "encoder",
                "gen_encoder_output_proposals",
                "enc_output_norm",
                "enc_output",
                "enc_out_class_embed",
                "max",
                "enc_out_bbox_embed",
                "topk",
                "gather",
                "repeat",
                "unsqueeze",
                "detach",
                "sigmoid",
                "repeat_interleave",
                "NotImplementedError",
                "format",
                "decoder",
                "get_reference_points",
                "float",
                "arange",
                "get_sine_pos_embed",
                "checkpoint",
                "layer",
                "gen_sineembed_for_position",
                "ref_point_head",
                "query_scale",
                "any",
                "isnan",
                "isinf",
                "print",
                "item",
                "sum",
                "inverse_sigmoid",
                "norm",
                "self_attn",
                "with_pos_embed",
                "dropout1",
                "norm1",
                "forward_ffn",
                "dropout2",
                "norm2",
                "ca_text",
                "catext_dropout",
                "catext_norm",
                "cross_attn",
                "contiguous"
            ],
            "get_reference_points": [
                "enumerate",
                "meshgrid",
                "linspace",
                "reshape",
                "stack",
                "append",
                "cat"
            ],
            "with_pos_embed": [],
            "forward_ffn": [
                "linear2",
                "dropout2",
                "activation",
                "linear1",
                "dropout3",
                "norm2",
                "autocast",
                "dropout4",
                "norm3"
            ],
            "rm_self_attn_modules": [],
            "build_transformer": [
                "Transformer"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/mlp_loca.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/mlp_loca.py",
        "imports": [
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "MLP",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "Linear",
                "Dropout",
                "activation"
            ],
            "forward": [
                "linear2",
                "dropout",
                "activation",
                "linear1"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/__init__.py",
        "imports": [
            "groundingdino.build_groundingdino"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "math",
            "warnings",
            "typing.Optional",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "torch.nn.init.constant_",
            "torch.nn.init.xavier_uniform_",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MultiScaleDeformableAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            },
            {
                "class_name": "MultiScaleDeformableAttention",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "init_weights",
                    "freeze_sampling_offsets",
                    "freeze_attention_weights",
                    "forward"
                ]
            },
            {
                "class_name": "_DummyMetaClass",
                "methods": [
                    "__getattr__"
                ]
            },
            {
                "class_name": "_Dummy",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "_is_power_of_2": [
                "isinstance",
                "ValueError",
                "format",
                "type"
            ],
            "forward": [
                "ms_deform_attn_forward",
                "save_for_backward",
                "permute",
                "sum",
                "value_proj",
                "masked_fill",
                "float",
                "view",
                "sampling_offsets",
                "attention_weights",
                "softmax",
                "stack",
                "ValueError",
                "format",
                "is_available",
                "apply",
                "half",
                "multi_scale_deformable_attn_pytorch",
                "output_proj"
            ],
            "backward": [
                "ms_deform_attn_backward"
            ],
            "multi_scale_deformable_attn_pytorch": [
                "split",
                "enumerate",
                "reshape",
                "transpose",
                "flatten",
                "grid_sample",
                "append",
                "view",
                "sum",
                "stack",
                "contiguous"
            ],
            "__init__": [
                "__init__",
                "super",
                "ValueError",
                "format",
                "_is_power_of_2",
                "warn",
                "Linear",
                "init_weights",
                "ImportError"
            ],
            "_reset_parameters": [
                "init_weights"
            ],
            "init_weights": [
                "constant_",
                "arange",
                "stack",
                "cos",
                "sin",
                "repeat",
                "view",
                "max",
                "abs",
                "range",
                "no_grad",
                "Parameter",
                "xavier_uniform_"
            ],
            "freeze_sampling_offsets": [],
            "freeze_attention_weights": [],
            "create_dummy_class": [
                "format"
            ],
            "__getattr__": [
                "ImportError"
            ],
            "create_dummy_func": [
                "format",
                "isinstance",
                "join"
            ],
            "_dummy": [
                "ImportError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/positional_encoding_loca.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/positional_encoding_loca.py",
        "imports": [
            "torch",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "PositionalEncodingsFixed",
                "methods": [
                    "__init__",
                    "_1d_pos_enc",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "_1d_pos_enc": [
                "to",
                "float",
                "arange",
                "div",
                "unsqueeze",
                "cumsum",
                "flatten",
                "stack",
                "sin",
                "cos"
            ],
            "forward": [
                "zeros",
                "_1d_pos_enc",
                "permute",
                "cat"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/bertwarper.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/bertwarper.py",
        "imports": [
            "torch",
            "torch.nn.functional",
            "torch.utils.checkpoint",
            "torch.Tensor",
            "torch.nn",
            "torchvision.ops.boxes.nms",
            "transformers.BertConfig",
            "transformers.BertModel",
            "transformers.BertPreTrainedModel",
            "transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions"
        ],
        "classes": [
            {
                "class_name": "BertModelWarper",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "TextEncoderShell",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "forward": [
                "ValueError",
                "size",
                "ones",
                "zeros",
                "get_extended_attention_mask",
                "invert_attention_mask",
                "get_head_mask",
                "embeddings",
                "encoder",
                "pooler",
                "BaseModelOutputWithPoolingAndCrossAttentions",
                "text_encoder"
            ],
            "generate_masks_with_special_tokens": [
                "bool",
                "zeros",
                "nonzero",
                "repeat",
                "unsqueeze",
                "eye",
                "range",
                "arange",
                "to"
            ],
            "generate_masks_with_special_tokens_and_transfer_map": [
                "bool",
                "zeros",
                "nonzero",
                "repeat",
                "unsqueeze",
                "eye",
                "range",
                "arange",
                "append",
                "stack",
                "to"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/matcher.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/matcher.py",
        "imports": [
            "torch",
            "os",
            "torch.nn",
            "scipy.optimize.linear_sum_assignment",
            "util.box_ops.box_cxcywh_to_xyxy",
            "util.box_ops.generalized_box_iou"
        ],
        "classes": [
            {
                "class_name": "HungarianMatcher",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "SimpleMinsumMatcher",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "forward": [
                "sigmoid",
                "flatten",
                "cat",
                "cpu",
                "log",
                "to",
                "cdist",
                "sum",
                "append",
                "stack",
                "zeros_like",
                "generalized_box_iou",
                "box_cxcywh_to_xyxy",
                "view",
                "isnan",
                "isinf",
                "len",
                "linear_sum_assignment",
                "enumerate",
                "split",
                "print",
                "zip",
                "min",
                "arange",
                "as_tensor",
                "no_grad"
            ],
            "build_matcher": [
                "format",
                "HungarianMatcher",
                "SimpleMinsumMatcher",
                "NotImplementedError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/groundingdino.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/groundingdino.py",
        "imports": [
            "copy",
            "typing.List",
            "torchvision.transforms.functional",
            "torchvision.transforms.InterpolationMode",
            "torch",
            "torch.nn.functional",
            "torch.nn",
            "torchvision.ops.boxes.nms",
            "torchvision.ops.roi_align",
            "transformers.AutoTokenizer",
            "transformers.BertModel",
            "transformers.BertTokenizer",
            "transformers.RobertaModel",
            "transformers.RobertaTokenizerFast",
            "transformers.logging",
            "util.box_ops",
            "util.get_tokenlizer",
            "util.misc.NestedTensor",
            "util.misc.accuracy",
            "util.misc.get_world_size",
            "util.misc.interpolate",
            "util.misc.inverse_sigmoid",
            "util.misc.is_dist_avail_and_initialized",
            "util.misc.nested_tensor_from_tensor_list",
            "util.utils.get_phrases_from_posmap",
            "util.visualizer.COCOVisualizer",
            "util.vl_utils.create_positive_map_from_span",
            "registry.MODULE_BUILD_FUNCS",
            "backbone.build_backbone",
            "bertwarper.BertModelWarper",
            "bertwarper.generate_masks_with_special_tokens",
            "bertwarper.generate_masks_with_special_tokens_and_transfer_map",
            "transformer.build_transformer",
            "utils.MLP",
            "utils.ContrastiveEmbed",
            "utils.sigmoid_focal_loss",
            "matcher.build_matcher",
            "numpy",
            "matplotlib.pyplot",
            "matplotlib.patches.Rectangle",
            "util.visualizer.renorm",
            "pycocotools.coco.COCO"
        ],
        "classes": [
            {
                "class_name": "GroundingDINO",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "init_ref_points",
                    "add_exemplar_tokens",
                    "combine_features",
                    "forward",
                    "_set_aux_loss"
                ]
            },
            {
                "class_name": "SetCriterion",
                "methods": [
                    "__init__",
                    "loss_cardinality",
                    "loss_boxes",
                    "token_sigmoid_binary_focal_loss",
                    "_get_src_permutation_idx",
                    "_get_tgt_permutation_idx",
                    "get_loss",
                    "forward"
                ]
            },
            {
                "class_name": "PostProcess",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": {
            "numpy_2_cv2": [
                "min",
                "Exception",
                "str",
                "max",
                "astype",
                "asarray"
            ],
            "vis_exemps": [
                "imshow",
                "add_patch",
                "gca",
                "Rectangle",
                "savefig",
                "close"
            ],
            "__init__": [
                "__init__",
                "super",
                "Conv2d",
                "get_tokenlizer",
                "get_pretrained_language_model",
                "requires_grad_",
                "BertModelWarper",
                "Linear",
                "constant_",
                "xavier_uniform_",
                "convert_tokens_to_ids",
                "len",
                "range",
                "append",
                "Sequential",
                "GroupNorm",
                "ModuleList",
                "ContrastiveEmbed",
                "MLP",
                "deepcopy",
                "format",
                "_reset_parameters",
                "COCO",
                "loadCats",
                "getCatIds",
                "join",
                "tokenizer",
                "arange",
                "create_positive_map",
                "zeros",
                "items"
            ],
            "_reset_parameters": [
                "xavier_uniform_",
                "constant_"
            ],
            "init_ref_points": [
                "Embedding"
            ],
            "add_exemplar_tokens": [
                "range",
                "len",
                "append",
                "cat",
                "to",
                "tensor",
                "full",
                "stack",
                "generate_masks_with_special_tokens_and_transfer_map"
            ],
            "combine_features": [
                "decompose",
                "cat",
                "interpolate",
                "feature_map_proj"
            ],
            "forward": [
                "to",
                "tokenizer",
                "generate_masks_with_special_tokens_and_transfer_map",
                "items",
                "bert",
                "feat_map",
                "bool",
                "isinstance",
                "nested_tensor_from_tensor_list",
                "backbone",
                "combine_features",
                "len",
                "reshape",
                "squeeze",
                "roi_align",
                "decompose",
                "max",
                "int",
                "min",
                "append",
                "resize",
                "vis_exemps",
                "numpy",
                "permute",
                "renorm",
                "cpu",
                "item",
                "str",
                "unsqueeze",
                "tensor",
                "stack",
                "add_exemplar_tokens",
                "enumerate",
                "range",
                "interpolate",
                "float",
                "NestedTensor",
                "transformer",
                "zip",
                "layer_bbox_embed",
                "inverse_sigmoid",
                "sigmoid",
                "layer_cls_embed",
                "zeros",
                "_set_aux_loss",
                "enc_out_class_embed",
                "next",
                "iter",
                "values",
                "size",
                "create_positive_map_exemplar",
                "matcher",
                "extend",
                "sum",
                "as_tensor",
                "is_dist_avail_and_initialized",
                "all_reduce",
                "clamp",
                "get_world_size",
                "update",
                "get_loss",
                "topk",
                "view",
                "div",
                "box_cxcywh_to_xyxy",
                "gather",
                "repeat",
                "unbind",
                "nms",
                "no_grad"
            ],
            "_set_aux_loss": [
                "zip"
            ],
            "loss_cardinality": [
                "as_tensor",
                "len",
                "sum",
                "argmax",
                "l1_loss",
                "float",
                "no_grad"
            ],
            "loss_boxes": [
                "_get_src_permutation_idx",
                "cat",
                "zip",
                "l1_loss",
                "sum",
                "diag",
                "generalized_box_iou",
                "box_cxcywh_to_xyxy",
                "no_grad"
            ],
            "token_sigmoid_binary_focal_loss": [
                "to",
                "dim",
                "view",
                "repeat",
                "size",
                "masked_select",
                "float",
                "sigmoid",
                "binary_cross_entropy_with_logits",
                "len",
                "max",
                "sum"
            ],
            "_get_src_permutation_idx": [
                "cat",
                "full_like",
                "enumerate"
            ],
            "_get_tgt_permutation_idx": [
                "cat",
                "full_like",
                "enumerate"
            ],
            "get_loss": [],
            "build_groundingdino": [
                "device",
                "build_backbone",
                "build_transformer",
                "GroundingDINO",
                "build_matcher",
                "deepcopy",
                "range",
                "update",
                "items",
                "SetCriterion",
                "to",
                "PostProcess",
                "registe_with_name"
            ],
            "create_positive_map": [
                "zeros",
                "len",
                "enumerate",
                "find",
                "char_to_token",
                "fill_"
            ],
            "create_positive_map_exemplar": [
                "zeros",
                "range",
                "len"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/transformer_loca.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/transformer_loca.py",
        "imports": [
            "mlp_loca.MLP",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "TransformerEncoder",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerEncoderLayer",
                "methods": [
                    "__init__",
                    "with_emb",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "ModuleList",
                "TransformerEncoderLayer",
                "range",
                "LayerNorm",
                "Identity",
                "Dropout",
                "MultiheadAttention",
                "MLP"
            ],
            "forward": [
                "layer",
                "norm",
                "norm1",
                "dropout1",
                "self_attn",
                "norm2",
                "dropout2",
                "mlp"
            ],
            "with_emb": []
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/setup.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/setup.py",
        "imports": [
            "os",
            "glob",
            "torch",
            "spaces",
            "torch.utils.cpp_extension.CUDA_HOME",
            "torch.utils.cpp_extension.CppExtension",
            "torch.utils.cpp_extension.CUDAExtension",
            "setuptools.find_packages",
            "setuptools.setup"
        ],
        "classes": [],
        "functions": {
            "get_extensions": [
                "dirname",
                "abspath",
                "join",
                "glob",
                "print",
                "is_available",
                "NotImplementedError",
                "extension"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/test.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/test.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "time",
            "torch",
            "torch.nn",
            "torch.autograd.gradcheck",
            "functions.ms_deform_attn_func.MSDeformAttnFunction",
            "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch"
        ],
        "classes": [],
        "functions": {
            "check_forward_equal_with_pytorch_double": [
                "cuda",
                "rand",
                "sum",
                "cpu",
                "detach",
                "ms_deform_attn_core_pytorch",
                "double",
                "apply",
                "allclose",
                "max",
                "abs",
                "print",
                "no_grad"
            ],
            "check_forward_equal_with_pytorch_float": [
                "cuda",
                "rand",
                "sum",
                "cpu",
                "detach",
                "ms_deform_attn_core_pytorch",
                "apply",
                "allclose",
                "max",
                "abs",
                "print",
                "no_grad"
            ],
            "check_gradient_numerical": [
                "cuda",
                "rand",
                "sum",
                "gradcheck",
                "double",
                "print"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/modules/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/modules/__init__.py",
        "imports": [
            "ms_deform_attn.MSDeformAttn"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/modules/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/modules/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "warnings",
            "math",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.nn.init.xavier_uniform_",
            "torch.nn.init.constant_",
            "functions.MSDeformAttnFunction"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttn",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": {
            "_is_power_of_2": [
                "isinstance",
                "ValueError",
                "format",
                "type"
            ],
            "__init__": [
                "__init__",
                "super",
                "ValueError",
                "format",
                "_is_power_of_2",
                "warn",
                "Linear",
                "_reset_parameters"
            ],
            "_reset_parameters": [
                "constant_",
                "arange",
                "stack",
                "cos",
                "sin",
                "repeat",
                "view",
                "max",
                "abs",
                "range",
                "no_grad",
                "Parameter",
                "xavier_uniform_"
            ],
            "forward": [
                "sum",
                "value_proj",
                "masked_fill",
                "float",
                "view",
                "sampling_offsets",
                "attention_weights",
                "softmax",
                "stack",
                "ValueError",
                "format",
                "apply",
                "to",
                "output_proj"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/__init__.py",
        "imports": [
            "ms_deform_attn.MSDeformAttn"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "warnings",
            "math",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.nn.init.xavier_uniform_",
            "torch.nn.init.constant_",
            "functions.MSDeformAttnFunction"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttn",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": {
            "_is_power_of_2": [
                "isinstance",
                "ValueError",
                "format",
                "type"
            ],
            "__init__": [
                "__init__",
                "super",
                "ValueError",
                "format",
                "_is_power_of_2",
                "warn",
                "Linear",
                "_reset_parameters"
            ],
            "_reset_parameters": [
                "constant_",
                "arange",
                "stack",
                "cos",
                "sin",
                "repeat",
                "view",
                "max",
                "abs",
                "range",
                "no_grad",
                "Parameter",
                "xavier_uniform_"
            ],
            "forward": [
                "sum",
                "value_proj",
                "masked_fill",
                "float",
                "view",
                "sampling_offsets",
                "attention_weights",
                "softmax",
                "stack",
                "ValueError",
                "format",
                "apply",
                "to",
                "output_proj"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/__init__.py",
        "imports": [
            "ms_deform_attn_func.MSDeformAttnFunction"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/ms_deform_attn_func.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/ms_deform_attn_func.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "torch",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            }
        ],
        "functions": {
            "forward": [
                "ms_deform_attn_forward",
                "save_for_backward"
            ],
            "backward": [
                "ms_deform_attn_backward"
            ],
            "ms_deform_attn_core_pytorch": [
                "split",
                "enumerate",
                "reshape",
                "transpose",
                "flatten",
                "grid_sample",
                "append",
                "view",
                "sum",
                "stack",
                "contiguous"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/__init__.py",
        "imports": [
            "ms_deform_attn.MSDeformAttn"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "warnings",
            "math",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.nn.init.xavier_uniform_",
            "torch.nn.init.constant_",
            "functions.MSDeformAttnFunction"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttn",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": {
            "_is_power_of_2": [
                "isinstance",
                "ValueError",
                "format",
                "type"
            ],
            "__init__": [
                "__init__",
                "super",
                "ValueError",
                "format",
                "_is_power_of_2",
                "warn",
                "Linear",
                "_reset_parameters"
            ],
            "_reset_parameters": [
                "constant_",
                "arange",
                "stack",
                "cos",
                "sin",
                "repeat",
                "view",
                "max",
                "abs",
                "range",
                "no_grad",
                "Parameter",
                "xavier_uniform_"
            ],
            "forward": [
                "sum",
                "value_proj",
                "masked_fill",
                "float",
                "view",
                "sampling_offsets",
                "attention_weights",
                "softmax",
                "stack",
                "ValueError",
                "format",
                "apply",
                "to",
                "output_proj"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/__init__.py",
        "imports": [
            "ms_deform_attn_func.MSDeformAttnFunction"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/ms_deform_attn_func.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/ms_deform_attn_func.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "torch",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            }
        ],
        "functions": {
            "forward": [
                "ms_deform_attn_forward",
                "save_for_backward"
            ],
            "backward": [
                "ms_deform_attn_backward"
            ],
            "ms_deform_attn_core_pytorch": [
                "split",
                "enumerate",
                "reshape",
                "transpose",
                "flatten",
                "grid_sample",
                "append",
                "view",
                "sum",
                "stack",
                "contiguous"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/functions/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/functions/__init__.py",
        "imports": [
            "ms_deform_attn_func.MSDeformAttnFunction"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/functions/ms_deform_attn_func.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/functions/ms_deform_attn_func.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "torch",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            }
        ],
        "functions": {
            "forward": [
                "ms_deform_attn_forward",
                "save_for_backward"
            ],
            "backward": [
                "ms_deform_attn_backward"
            ],
            "ms_deform_attn_core_pytorch": [
                "split",
                "enumerate",
                "reshape",
                "transpose",
                "flatten",
                "grid_sample",
                "append",
                "view",
                "sum",
                "stack",
                "contiguous"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/position_encoding.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/position_encoding.py",
        "imports": [
            "math",
            "torch",
            "torch.nn",
            "util.misc.NestedTensor"
        ],
        "classes": [
            {
                "class_name": "PositionEmbeddingSine",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PositionEmbeddingSineHW",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PositionEmbeddingLearned",
                "methods": [
                    "__init__",
                    "reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "ValueError",
                "Embedding",
                "reset_parameters"
            ],
            "forward": [
                "cumsum",
                "arange",
                "flatten",
                "stack",
                "sin",
                "cos",
                "permute",
                "cat",
                "div",
                "col_embed",
                "row_embed",
                "repeat",
                "unsqueeze"
            ],
            "reset_parameters": [
                "uniform_"
            ],
            "build_position_encoding": [
                "PositionEmbeddingSineHW",
                "PositionEmbeddingLearned",
                "ValueError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/__init__.py",
        "imports": [
            "backbone.build_backbone"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/backbone.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/backbone.py",
        "imports": [
            "typing.Dict",
            "typing.List",
            "torch",
            "torch.nn.functional",
            "torchvision",
            "torch.nn",
            "torchvision.models._utils.IntermediateLayerGetter",
            "util.misc.NestedTensor",
            "util.misc.clean_state_dict",
            "util.misc.is_main_process",
            "position_encoding.build_position_encoding",
            "swin_transformer.build_swin_transformer"
        ],
        "classes": [
            {
                "class_name": "FrozenBatchNorm2d",
                "methods": [
                    "__init__",
                    "_load_from_state_dict",
                    "forward"
                ]
            },
            {
                "class_name": "BackboneBase",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "Backbone",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "Joiner",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "register_buffer",
                "ones",
                "zeros",
                "named_parameters",
                "requires_grad_",
                "enumerate",
                "update",
                "format",
                "len",
                "IntermediateLayerGetter",
                "getattr",
                "is_main_process",
                "NotImplementedError"
            ],
            "_load_from_state_dict": [
                "_load_from_state_dict",
                "super"
            ],
            "forward": [
                "reshape",
                "rsqrt",
                "body",
                "items",
                "to",
                "interpolate",
                "float",
                "NestedTensor",
                "append"
            ],
            "build_backbone": [
                "build_position_encoding",
                "ValueError",
                "getattr",
                "Backbone",
                "int",
                "split",
                "build_swin_transformer",
                "tuple",
                "len",
                "NotImplementedError",
                "format",
                "Joiner",
                "isinstance",
                "type"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/swin_transformer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/swin_transformer.py",
        "imports": [
            "numpy",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.utils.checkpoint",
            "timm.models.layers.DropPath",
            "timm.models.layers.to_2tuple",
            "timm.models.layers.trunc_normal_",
            "util.misc.NestedTensor",
            "ipdb"
        ],
        "classes": [
            {
                "class_name": "Mlp",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "WindowAttention",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "SwinTransformerBlock",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PatchMerging",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "BasicLayer",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PatchEmbed",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "SwinTransformer",
                "methods": [
                    "__init__",
                    "_freeze_stages",
                    "forward_raw",
                    "forward",
                    "train"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "Linear",
                "act_layer",
                "Dropout",
                "Parameter",
                "zeros",
                "arange",
                "stack",
                "meshgrid",
                "flatten",
                "contiguous",
                "permute",
                "sum",
                "register_buffer",
                "trunc_normal_",
                "Softmax",
                "norm_layer",
                "WindowAttention",
                "to_2tuple",
                "DropPath",
                "Identity",
                "int",
                "Mlp",
                "ModuleList",
                "SwinTransformerBlock",
                "isinstance",
                "range",
                "downsample",
                "Conv2d",
                "len",
                "PatchEmbed",
                "item",
                "linspace",
                "BasicLayer",
                "append",
                "add_module",
                "_freeze_stages"
            ],
            "forward": [
                "fc1",
                "act",
                "drop",
                "fc2",
                "permute",
                "reshape",
                "qkv",
                "transpose",
                "view",
                "contiguous",
                "unsqueeze",
                "softmax",
                "attn_drop",
                "proj",
                "proj_drop",
                "norm1",
                "pad",
                "roll",
                "window_partition",
                "attn",
                "window_reverse",
                "drop_path",
                "mlp",
                "norm2",
                "cat",
                "norm",
                "reduction",
                "int",
                "ceil",
                "zeros",
                "slice",
                "masked_fill",
                "float",
                "checkpoint",
                "blk",
                "downsample",
                "size",
                "flatten",
                "patch_embed",
                "interpolate",
                "pos_drop",
                "range",
                "layer",
                "getattr",
                "norm_layer",
                "append",
                "enumerate",
                "to",
                "NestedTensor"
            ],
            "window_partition": [
                "view",
                "contiguous",
                "permute"
            ],
            "window_reverse": [
                "int",
                "view",
                "contiguous",
                "permute"
            ],
            "_freeze_stages": [
                "eval",
                "parameters",
                "range"
            ],
            "forward_raw": [
                "patch_embed",
                "size",
                "interpolate",
                "transpose",
                "flatten",
                "pos_drop",
                "range",
                "layer",
                "getattr",
                "norm_layer",
                "contiguous",
                "permute",
                "view",
                "append",
                "tuple"
            ],
            "train": [
                "train",
                "super",
                "_freeze_stages"
            ],
            "build_swin_transformer": [
                "dict",
                "update",
                "SwinTransformer"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/coco_eval.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/coco_eval.py",
        "imports": [
            "os",
            "contextlib",
            "copy",
            "numpy",
            "torch",
            "pycocotools.cocoeval.COCOeval",
            "pycocotools.coco.COCO",
            "pycocotools.mask",
            "util.misc.all_gather",
            "ipdb"
        ],
        "classes": [
            {
                "class_name": "CocoEvaluator",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "accumulate",
                    "summarize",
                    "prepare",
                    "prepare_for_coco_detection",
                    "prepare_for_coco_segmentation",
                    "prepare_for_coco_keypoint"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "isinstance",
                "deepcopy",
                "COCOeval"
            ],
            "update": [
                "list",
                "unique",
                "keys",
                "extend",
                "prepare",
                "open",
                "redirect_stdout",
                "loadRes",
                "COCO",
                "evaluate",
                "append"
            ],
            "synchronize_between_processes": [
                "concatenate",
                "create_common_coco_eval"
            ],
            "accumulate": [
                "values",
                "accumulate"
            ],
            "summarize": [
                "items",
                "print",
                "format",
                "summarize"
            ],
            "prepare": [
                "prepare_for_coco_detection",
                "prepare_for_coco_segmentation",
                "prepare_for_coco_keypoint",
                "ValueError",
                "format"
            ],
            "prepare_for_coco_detection": [
                "items",
                "len",
                "tolist",
                "convert_to_xywh",
                "isinstance",
                "extend",
                "enumerate",
                "set_trace"
            ],
            "prepare_for_coco_segmentation": [
                "items",
                "len",
                "tolist",
                "encode",
                "array",
                "decode",
                "extend",
                "enumerate"
            ],
            "prepare_for_coco_keypoint": [
                "items",
                "len",
                "tolist",
                "convert_to_xywh",
                "flatten",
                "extend",
                "enumerate"
            ],
            "convert_to_xywh": [
                "unbind",
                "stack"
            ],
            "merge": [
                "all_gather",
                "extend",
                "append",
                "array",
                "concatenate",
                "unique"
            ],
            "create_common_coco_eval": [
                "merge",
                "list",
                "flatten",
                "deepcopy"
            ],
            "evaluate": [
                "print",
                "format",
                "list",
                "unique",
                "sorted",
                "_prepare",
                "computeIoU",
                "evaluateImg",
                "reshape",
                "asarray",
                "len",
                "deepcopy"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/dataset.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/dataset.py",
        "imports": [
            "__future__.print_function",
            "torch",
            "torchvision.datasets",
            "torch.utils.data.Dataset",
            "PIL.Image",
            "tsv_io.TSVFile",
            "numpy",
            "base64",
            "io"
        ],
        "classes": [
            {
                "class_name": "TSVDataset",
                "methods": [
                    "__init__",
                    "__getitem__",
                    "__len__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "TSVFile"
            ],
            "__getitem__": [
                "seek",
                "b64decode",
                "open",
                "BytesIO",
                "convert",
                "int",
                "transform",
                "target_transform"
            ],
            "__len__": [
                "num_rows"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/random_crop.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/random_crop.py",
        "imports": [
            "PIL",
            "torch",
            "os",
            "torchvision.transforms.functional",
            "numpy",
            "random"
        ],
        "classes": [],
        "functions": {
            "intersect": [
                "size",
                "min",
                "expand",
                "unsqueeze",
                "max",
                "clamp"
            ],
            "find_IoU": [
                "intersect",
                "expand_as",
                "unsqueeze"
            ],
            "random_crop": [
                "type",
                "to_tensor",
                "size",
                "choice",
                "to_pil_image",
                "range",
                "uniform",
                "FloatTensor",
                "int",
                "find_IoU",
                "unsqueeze",
                "squeeze",
                "item",
                "max",
                "any",
                "min"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/odvg.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/odvg.py",
        "imports": [
            "torchvision.datasets.vision.VisionDataset",
            "os.path",
            "typing.Callable",
            "typing.Optional",
            "json",
            "PIL.Image",
            "torch",
            "random",
            "os",
            "sys",
            "datasets.transforms",
            "datasets.sltransform"
        ],
        "classes": [
            {
                "class_name": "ODVGDataset",
                "methods": [
                    "__init__",
                    "load_label_map",
                    "_load_metas",
                    "get_dataset_info",
                    "__getitem__",
                    "__len__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "load_label_map",
                "_load_metas",
                "get_dataset_info"
            ],
            "load_label_map": [
                "open",
                "load",
                "set",
                "keys"
            ],
            "_load_metas": [
                "open",
                "loads"
            ],
            "get_dataset_info": [
                "print",
                "len"
            ],
            "__getitem__": [
                "join",
                "exists",
                "FileNotFoundError",
                "convert",
                "open",
                "tensor",
                "str",
                "set",
                "difference",
                "list",
                "min",
                "len",
                "extend",
                "sample",
                "range",
                "randint",
                "enumerate",
                "reshape",
                "as_tensor",
                "zip",
                "shuffle",
                "int",
                "clone",
                "transforms",
                "print"
            ],
            "__len__": [
                "len"
            ],
            "make_coco_transforms": [
                "Compose",
                "ToTensor",
                "Normalize",
                "getattr",
                "float",
                "int",
                "RandomHorizontalFlip",
                "RandomResize",
                "max",
                "RandomSelect",
                "RandomSizeCrop",
                "RandomSelectMulti",
                "RandomCrop",
                "LightingNoise",
                "AdjustBrightness",
                "AdjustContrast",
                "get",
                "print",
                "ResizeDebug",
                "ValueError"
            ],
            "build_odvg": [
                "print",
                "ODVGDataset",
                "make_coco_transforms"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/data_util.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/data_util.py",
        "imports": [
            "os",
            "os.path",
            "shutil",
            "time",
            "datetime",
            "torch",
            "util.slconfig.SLConfig",
            "zipfile"
        ],
        "classes": [
            {
                "class_name": "Error",
                "methods": []
            }
        ],
        "functions": {
            "slcopytree": [
                "isdir",
                "listdir",
                "ignore",
                "set",
                "makedirs",
                "join",
                "islink",
                "readlink",
                "symlink",
                "exists",
                "slcopytree",
                "copy_function",
                "extend",
                "append",
                "str",
                "Error"
            ],
            "check_and_copy": [
                "exists",
                "slcopytree"
            ],
            "remove": [
                "isdir",
                "rmtree",
                "remove"
            ],
            "preparing_dataset": [
                "time",
                "fromfile",
                "items",
                "exists",
                "print",
                "format",
                "remove",
                "isinstance",
                "endswith",
                "dirname",
                "basename",
                "join",
                "makedirs",
                "check_and_copy",
                "ZipFile",
                "extractall",
                "append",
                "len",
                "barrier",
                "str",
                "timedelta",
                "int"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/__init__.py",
        "imports": [
            "torch.utils.data",
            "torchvision",
            "coco.build",
            "odvg.build_odvg"
        ],
        "classes": [],
        "functions": {
            "get_coco_api_from_dataset": [
                "range",
                "isinstance"
            ],
            "build_dataset": [
                "build_coco",
                "build_odvg",
                "ValueError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/coco_panoptic.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/coco_panoptic.py",
        "imports": [
            "json",
            "pathlib.Path",
            "numpy",
            "torch",
            "PIL.Image",
            "panopticapi.utils.rgb2id",
            "util.box_ops.masks_to_boxes",
            "coco.make_coco_transforms"
        ],
        "classes": [
            {
                "class_name": "CocoPanoptic",
                "methods": [
                    "__init__",
                    "__getitem__",
                    "__len__",
                    "get_height_and_width"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "open",
                "load",
                "sorted",
                "zip"
            ],
            "__getitem__": [
                "Path",
                "replace",
                "convert",
                "open",
                "asarray",
                "rgb2id",
                "array",
                "as_tensor",
                "tensor",
                "masks_to_boxes",
                "int",
                "transforms"
            ],
            "__len__": [
                "len"
            ],
            "get_height_and_width": [],
            "build": [
                "Path",
                "exists",
                "CocoPanoptic",
                "make_coco_transforms"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/sltransform.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/sltransform.py",
        "imports": [
            "PIL",
            "PIL.Image",
            "torch",
            "os",
            "torchvision.transforms.functional",
            "numpy",
            "random",
            "random_crop.random_crop",
            "util.box_ops.box_cxcywh_to_xyxy",
            "util.box_ops.box_xyxy_to_cxcywh",
            "albumentations"
        ],
        "classes": [
            {
                "class_name": "AdjustContrast",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "AdjustBrightness",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "LightingNoise",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Rotate",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCropDebug",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelectMulti",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Albumentations",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Compose",
                "Blur",
                "MedianBlur",
                "ToGray",
                "CLAHE",
                "RandomBrightnessContrast",
                "RandomGamma",
                "ImageCompression",
                "BboxParams"
            ],
            "__call__": [
                "random",
                "adjust_contrast",
                "adjust_brightness",
                "lighting_noise",
                "Tensor",
                "box_cxcywh_to_xyxy",
                "rotate",
                "to",
                "box_xyxy_to_cxcywh",
                "random_crop",
                "clone",
                "choice",
                "array",
                "transform",
                "reshape_as",
                "fromarray"
            ],
            "lighting_noise": [
                "randint",
                "len",
                "to_tensor",
                "to_pil_image"
            ],
            "rotate": [
                "copy",
                "clone",
                "rotate",
                "radians",
                "cos",
                "sin",
                "tensor",
                "reshape",
                "stack",
                "cat",
                "ones",
                "abs",
                "int",
                "t",
                "mm",
                "to",
                "min",
                "max",
                "resize",
                "Tensor",
                "clamp"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/panoptic_eval.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/panoptic_eval.py",
        "imports": [
            "json",
            "os",
            "util.misc",
            "panopticapi.evaluation.pq_compute"
        ],
        "classes": [
            {
                "class_name": "PanopticEvaluator",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "summarize"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "is_main_process",
                "exists",
                "mkdir"
            ],
            "update": [
                "open",
                "join",
                "write",
                "pop"
            ],
            "synchronize_between_processes": [
                "all_gather"
            ],
            "summarize": [
                "is_main_process",
                "join",
                "open",
                "write",
                "dumps",
                "pq_compute"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/transforms.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/transforms.py",
        "imports": [
            "random",
            "PIL",
            "torch",
            "torchvision.transforms",
            "torchvision.transforms.functional",
            "util.box_ops.box_xyxy_to_cxcywh",
            "util.misc.interpolate"
        ],
        "classes": [
            {
                "class_name": "ResizeDebug",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSizeCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "CenterCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomHorizontalFlip",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomResize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomPad",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelect",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "ToTensor",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "RandomErasing",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Normalize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Compose",
                "methods": [
                    "__init__",
                    "__call__",
                    "__repr__"
                ]
            }
        ],
        "functions": {
            "crop": [
                "crop",
                "copy",
                "tensor",
                "as_tensor",
                "min",
                "reshape",
                "clamp",
                "prod",
                "append",
                "all",
                "any",
                "flatten"
            ],
            "hflip": [
                "hflip",
                "copy",
                "as_tensor",
                "flip"
            ],
            "resize": [
                "get_size",
                "resize",
                "tuple",
                "float",
                "zip",
                "copy",
                "as_tensor",
                "tensor",
                "interpolate"
            ],
            "get_size_with_aspect_ratio": [
                "float",
                "min",
                "max",
                "int",
                "round"
            ],
            "get_size": [
                "isinstance",
                "get_size_with_aspect_ratio"
            ],
            "pad": [
                "pad",
                "copy",
                "tensor"
            ],
            "__init__": [
                "isinstance",
                "RandomErasing"
            ],
            "__call__": [
                "resize",
                "get_params",
                "crop",
                "randint",
                "min",
                "int",
                "round",
                "random",
                "hflip",
                "choice",
                "pad",
                "transforms1",
                "transforms2",
                "to_tensor",
                "eraser",
                "normalize",
                "copy",
                "box_xyxy_to_cxcywh",
                "tensor",
                "t"
            ],
            "__repr__": [
                "format"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/coco.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/coco.py",
        "imports": [
            "os",
            "sys",
            "torchvision.datasets.vision.VisionDataset",
            "json",
            "pathlib.Path",
            "random",
            "os",
            "typing.Any",
            "typing.Callable",
            "typing.List",
            "typing.Optional",
            "typing.Tuple",
            "PIL.Image",
            "torch",
            "torch.utils.data",
            "torchvision",
            "pycocotools.mask",
            "data_util.preparing_dataset",
            ".transforms",
            "util.box_ops.box_cxcywh_to_xyxy",
            "util.box_ops.box_iou",
            "torch",
            "datasets.sltransform"
        ],
        "classes": [
            {
                "class_name": "label2compat",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "label_compat2onehot",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "box_label_catter",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelectBoxlabels",
                "methods": [
                    "__init__",
                    "get_state",
                    "set_state",
                    "sample_for_pred_first_item",
                    "sample_for_pred_random_item",
                    "sample_for_pred_last_item",
                    "sample_for_pred_stop_sign",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomDrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "BboxPertuber",
                "methods": [
                    "__init__",
                    "generate_pertube_samples",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCutout",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelectBoxes",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "MaskCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "CocoDetection",
                "methods": [
                    "__init__",
                    "change_hack_attr",
                    "get_hack",
                    "_load_image",
                    "__getitem__"
                ]
            },
            {
                "class_name": "ConvertCocoPolysToMask",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "int",
                "items",
                "DeprecationWarning",
                "set_state",
                "generate_pertube_samples",
                "Warning",
                "__init__",
                "super",
                "ConvertCocoPolysToMask"
            ],
            "__call__": [
                "zeros",
                "enumerate",
                "item",
                "range",
                "cat",
                "unsqueeze",
                "random",
                "sample_for_pred_first_item",
                "sample_for_pred_random_item",
                "sample_for_pred_last_item",
                "sample_for_pred_stop_sign",
                "label2onehot",
                "size",
                "rand",
                "diag",
                "box_iou",
                "box_cxcywh_to_xyxy",
                "copy_",
                "uniform_",
                "append",
                "len",
                "stack",
                "Tensor",
                "int",
                "randperm",
                "tolist",
                "tensor",
                "reshape",
                "as_tensor",
                "clamp_",
                "convert_coco_poly_to_mask",
                "view"
            ],
            "get_state": [],
            "set_state": [],
            "sample_for_pred_first_item": [
                "Tensor"
            ],
            "sample_for_pred_random_item": [
                "int",
                "random",
                "randperm"
            ],
            "sample_for_pred_last_item": [
                "randperm",
                "item",
                "append",
                "len",
                "stack",
                "Tensor"
            ],
            "sample_for_pred_stop_sign": [
                "Tensor"
            ],
            "generate_pertube_samples": [
                "rand"
            ],
            "label2onehot": [
                "zeros",
                "int",
                "item"
            ],
            "change_hack_attr": [
                "isinstance",
                "items",
                "setattr"
            ],
            "get_hack": [
                "isinstance"
            ],
            "_load_image": [
                "loadImgs",
                "join",
                "convert",
                "open"
            ],
            "__getitem__": [
                "__getitem__",
                "super",
                "print",
                "format",
                "prepare",
                "tensor",
                "clone",
                "_transforms",
                "hack_runner"
            ],
            "convert_coco_poly_to_mask": [
                "frPyObjects",
                "decode",
                "len",
                "as_tensor",
                "any",
                "append",
                "stack",
                "zeros"
            ],
            "make_coco_transforms": [
                "Compose",
                "ToTensor",
                "Normalize",
                "getattr",
                "float",
                "int",
                "RandomHorizontalFlip",
                "RandomResize",
                "max",
                "RandomSelect",
                "RandomSizeCrop",
                "RandomSelectMulti",
                "RandomCrop",
                "LightingNoise",
                "AdjustBrightness",
                "AdjustContrast",
                "get",
                "print",
                "ResizeDebug",
                "str",
                "ValueError"
            ],
            "get_aux_target_hacks_list": [
                "label2compat",
                "label_compat2onehot",
                "RandomSelectBoxes",
                "append",
                "MaskCrop",
                "box_label_catter",
                "RandomSelectBoxlabels",
                "BboxPertuber",
                "RandomDrop",
                "RandomCutout"
            ],
            "build": [
                "get",
                "preparing_dataset",
                "dict",
                "print",
                "CocoDetection",
                "make_coco_transforms"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/cocogrounding_eval.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/cocogrounding_eval.py",
        "imports": [
            "contextlib",
            "copy",
            "os",
            "numpy",
            "pycocotools.mask",
            "torch",
            "pycocotools.coco.COCO",
            "pycocotools.cocoeval.COCOeval",
            "groundingdino.util.misc.all_gather"
        ],
        "classes": [
            {
                "class_name": "CocoGroundingEvaluator",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "accumulate",
                    "summarize",
                    "prepare",
                    "prepare_for_coco_detection",
                    "prepare_for_coco_segmentation",
                    "prepare_for_coco_keypoint"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "isinstance",
                "deepcopy",
                "COCOeval"
            ],
            "update": [
                "list",
                "unique",
                "keys",
                "extend",
                "prepare",
                "open",
                "redirect_stdout",
                "loadRes",
                "COCO",
                "evaluate",
                "append"
            ],
            "synchronize_between_processes": [
                "concatenate",
                "create_common_coco_eval"
            ],
            "accumulate": [
                "values",
                "accumulate"
            ],
            "summarize": [
                "items",
                "print",
                "format",
                "summarize"
            ],
            "prepare": [
                "prepare_for_coco_detection",
                "prepare_for_coco_segmentation",
                "prepare_for_coco_keypoint",
                "ValueError",
                "format"
            ],
            "prepare_for_coco_detection": [
                "items",
                "len",
                "tolist",
                "convert_to_xywh",
                "extend",
                "enumerate"
            ],
            "prepare_for_coco_segmentation": [
                "items",
                "len",
                "tolist",
                "encode",
                "array",
                "decode",
                "extend",
                "enumerate"
            ],
            "prepare_for_coco_keypoint": [
                "items",
                "len",
                "tolist",
                "convert_to_xywh",
                "flatten",
                "extend",
                "enumerate"
            ],
            "convert_to_xywh": [
                "unbind",
                "stack"
            ],
            "merge": [
                "all_gather",
                "extend",
                "append",
                "array",
                "concatenate",
                "unique"
            ],
            "create_common_coco_eval": [
                "merge",
                "list",
                "flatten",
                "deepcopy"
            ],
            "evaluate": [
                "print",
                "format",
                "list",
                "unique",
                "sorted",
                "_prepare",
                "computeIoU",
                "evaluateImg",
                "reshape",
                "asarray",
                "len",
                "deepcopy"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/config/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/config/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/visualgd/config/cfg_handler.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/config/cfg_handler.py",
        "imports": [
            ".cfg_fsc147",
            "util.slconfig.SLConfig"
        ],
        "classes": [
            {
                "class_name": "ConfigurationHandler",
                "methods": [
                    "get_config",
                    "__get_default_cfg",
                    "__get_cfg_from_file"
                ]
            }
        ],
        "functions": {
            "get_config": [
                "__get_default_cfg",
                "__get_cfg_from_file"
            ],
            "__get_default_cfg": [
                "items",
                "vars",
                "startswith",
                "SLConfig"
            ],
            "__get_cfg_from_file": [
                "fromfile"
            ]
        }
    },
    "anylabeling/services/auto_labeling/visualgd/config/cfg_fsc147.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/config/cfg_fsc147.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/__init__.py",
        "imports": [
            "box.*",
            "general.*",
            "points_conversion.*",
            "queue",
            "threading",
            "time",
            "queue"
        ],
        "classes": [
            {
                "class_name": "TimeoutContext",
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "run"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Event"
            ],
            "__enter__": [
                "Queue"
            ],
            "__exit__": [
                "is_alive",
                "set",
                "join",
                "TimeoutError"
            ],
            "run": [
                "time",
                "Thread",
                "start",
                "join",
                "get_nowait",
                "TimeoutError"
            ],
            "wrapper": [
                "is_set",
                "target_func",
                "put"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/general.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/general.py",
        "imports": [
            "cv2",
            "math",
            "numpy"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "update"
            ],
            "calculate_rotation_theta": [
                "atan2",
                "degrees"
            ],
            "letterbox": [
                "isinstance",
                "min",
                "int",
                "round",
                "mod",
                "resize",
                "copyMakeBorder"
            ],
            "sigmoid": [
                "exp",
                "logaddexp"
            ],
            "softmax": [
                "reshape",
                "exp",
                "max",
                "sum"
            ],
            "refine_contours": [
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean"
            ],
            "point_in_bbox": []
        }
    },
    "anylabeling/services/auto_labeling/utils/box.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/box.py",
        "imports": [
            "numpy",
            "points_conversion.xywh2xyxy"
        ],
        "classes": [],
        "functions": {
            "box_area": [],
            "box_iou": [
                "box_area",
                "maximum",
                "minimum"
            ],
            "numpy_nms": [
                "argsort",
                "append",
                "box_iou",
                "array"
            ],
            "numpy_nms_rotated": [
                "len",
                "empty",
                "argsort",
                "batch_probiou",
                "triu",
                "nonzero",
                "max"
            ],
            "batch_probiou": [
                "split",
                "squeeze",
                "_get_covariance_matrix",
                "power",
                "log",
                "sqrt",
                "clip",
                "exp"
            ],
            "_get_covariance_matrix": [
                "concatenate",
                "power",
                "split",
                "cos",
                "sin"
            ],
            "non_max_suppression_v5": [
                "ValueError",
                "isinstance",
                "xywh2xyxy",
                "zeros",
                "enumerate",
                "len",
                "arange",
                "astype",
                "concatenate",
                "where",
                "max",
                "argmax",
                "flatten",
                "any",
                "array",
                "argsort",
                "numpy_nms",
                "box_iou",
                "dot",
                "sum"
            ],
            "non_max_suppression_v8": [
                "ValueError",
                "isinstance",
                "amax",
                "transpose",
                "xywh2xyxy",
                "zeros",
                "enumerate",
                "len",
                "arange",
                "astype",
                "concatenate",
                "where",
                "max",
                "argmax",
                "flatten",
                "any",
                "array",
                "argsort",
                "numpy_nms_rotated",
                "numpy_nms"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/points_conversion.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/points_conversion.py",
        "imports": [
            "cv2",
            "numpy",
            "general.refine_contours"
        ],
        "classes": [],
        "functions": {
            "cxcywh2xyxy": [
                "maximum",
                "stack"
            ],
            "xyxy2xywh": [
                "copy"
            ],
            "xywh2xyxy": [
                "copy"
            ],
            "xywhn2xyxy": [
                "copy"
            ],
            "xyxy2xywhn": [
                "clip_boxes",
                "copy"
            ],
            "xyn2xy": [
                "copy"
            ],
            "xywh2ltwh": [
                "copy"
            ],
            "xyxy2ltwh": [
                "copy"
            ],
            "ltwh2xywh": [
                "copy"
            ],
            "ltwh2xyxy": [
                "copy"
            ],
            "cxywh2xyxy": [
                "copy"
            ],
            "xywhr2xyxyxyxy": [
                "range",
                "cos",
                "sin",
                "concatenate",
                "stack"
            ],
            "rbox2poly": [
                "split",
                "cos",
                "sin",
                "concatenate",
                "reshape"
            ],
            "denormalize_bbox": [
                "int"
            ],
            "rescale_box": [
                "min",
                "clip",
                "range"
            ],
            "rescale_box_and_landmark": [
                "min",
                "clip",
                "round"
            ],
            "rescale_tlwh": [
                "min",
                "clip",
                "range"
            ],
            "scale_boxes": [
                "min",
                "round",
                "clip_boxes"
            ],
            "scale_masks": [
                "min",
                "int",
                "resize",
                "transpose"
            ],
            "scale_coords": [
                "min",
                "clip_coords"
            ],
            "clip_coords": [
                "clip"
            ],
            "clip_boxes": [
                "clip"
            ],
            "masks2segments": [
                "astype",
                "findContours",
                "refine_contours",
                "array",
                "concatenate",
                "zeros",
                "append"
            ],
            "tlwh_to_xyxy": [],
            "xyxy_to_tlwh": []
        }
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/rec_postprocess.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/rec_postprocess.py",
        "imports": [
            "numpy",
            "re"
        ],
        "classes": [
            {
                "class_name": "BaseRecLabelDecode",
                "methods": [
                    "__init__",
                    "pred_reverse",
                    "add_special_char",
                    "decode",
                    "get_ignored_tokens"
                ]
            },
            {
                "class_name": "CTCLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "DistillationCTCLabelDecode",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "AttnLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx"
                ]
            },
            {
                "class_name": "RFLLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx"
                ]
            },
            {
                "class_name": "SEEDLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx",
                    "decode",
                    "__call__"
                ]
            },
            {
                "class_name": "SRNLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "decode",
                    "add_special_char",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx"
                ]
            },
            {
                "class_name": "SARLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens"
                ]
            },
            {
                "class_name": "SATRNLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens"
                ]
            },
            {
                "class_name": "DistillationSARLabelDecode",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "PRENLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__"
                ]
            },
            {
                "class_name": "NRTRLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char",
                    "decode"
                ]
            },
            {
                "class_name": "ViTSTRLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "ABINetLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "SPINLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "CANLabelDecode",
                "methods": [
                    "__init__",
                    "decode",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "list",
                "open",
                "readlines",
                "strip",
                "decode",
                "append",
                "add_special_char",
                "enumerate",
                "__init__",
                "super",
                "isinstance",
                "get"
            ],
            "pred_reverse": [
                "bool",
                "search",
                "append",
                "join"
            ],
            "add_special_char": [
                "len"
            ],
            "decode": [
                "get_ignored_tokens",
                "len",
                "range",
                "ones",
                "join",
                "pred_reverse",
                "append",
                "tolist",
                "mean",
                "int",
                "compile",
                "lower",
                "sub",
                "argmin"
            ],
            "get_ignored_tokens": [
                "get_beg_end_flag_idx"
            ],
            "__call__": [
                "isinstance",
                "argmax",
                "max",
                "decode",
                "dict",
                "__call__",
                "super",
                "round",
                "sum",
                "append",
                "len",
                "reshape",
                "numpy"
            ],
            "get_beg_end_flag_idx": [
                "array"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/operators.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/operators.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.division",
            "__future__.print_function",
            "__future__.unicode_literals",
            "sys",
            "six",
            "cv2",
            "numpy",
            "math",
            "PIL.Image",
            "PIL.Image",
            "PIL.Image",
            "fasttext"
        ],
        "classes": [
            {
                "class_name": "DecodeImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "NormalizeImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "ToCHWImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Fasttext",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "KeepKeys",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Pad",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Resize",
                "methods": [
                    "__init__",
                    "resize_image",
                    "__call__"
                ]
            },
            {
                "class_name": "DetResizeForTest",
                "methods": [
                    "__init__",
                    "__call__",
                    "image_padding",
                    "resize_image_type1",
                    "resize_image_type0",
                    "resize_image_type2"
                ]
            },
            {
                "class_name": "E2EResizeForTest",
                "methods": [
                    "__init__",
                    "__call__",
                    "resize_image_for_totaltext",
                    "resize_image"
                ]
            },
            {
                "class_name": "KieResize",
                "methods": [
                    "__init__",
                    "__call__",
                    "resize_image",
                    "resize_boxes"
                ]
            },
            {
                "class_name": "SRResize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "ResizeNormalize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "GrayImageChannelFormat",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "isinstance",
                "eval",
                "float32",
                "astype",
                "reshape",
                "array",
                "load_model",
                "TypeError",
                "format",
                "type",
                "__init__",
                "super",
                "get"
            ],
            "__call__": [
                "type",
                "len",
                "frombuffer",
                "imdecode",
                "cvtColor",
                "transpose",
                "isinstance",
                "array",
                "astype",
                "append",
                "max",
                "int",
                "ceil",
                "copyMakeBorder",
                "resize_image",
                "sum",
                "image_padding",
                "resize_image_type0",
                "resize_image_type2",
                "resize_image_type1",
                "resize_image_for_totaltext",
                "resize_boxes",
                "ResizeNormalize",
                "transform2",
                "transform",
                "resize",
                "expand_dims",
                "abs"
            ],
            "resize_image": [
                "float",
                "resize",
                "int",
                "zeros",
                "max",
                "min",
                "array"
            ],
            "image_padding": [
                "zeros",
                "max"
            ],
            "resize_image_type1": [
                "ceil",
                "float",
                "resize",
                "int"
            ],
            "resize_image_type0": [
                "max",
                "float",
                "min",
                "Exception",
                "int",
                "round",
                "resize",
                "print",
                "exit"
            ],
            "resize_image_type2": [
                "float",
                "int",
                "resize"
            ],
            "resize_image_for_totaltext": [
                "float",
                "int",
                "resize"
            ],
            "resize_boxes": [
                "clip"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/text_system.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/text_system.py",
        "imports": [
            "os",
            "tkinter.N",
            "copy",
            "operators.*",
            "db_postprocess.*",
            "rec_postprocess.*",
            "cls_postprocess.*"
        ],
        "classes": [
            {
                "class_name": "TextDetector",
                "methods": [
                    "__init__",
                    "order_points_clockwise",
                    "clip_det_res",
                    "filter_tag_det_res",
                    "filter_tag_det_res_only_clip",
                    "transform",
                    "__call__"
                ]
            },
            {
                "class_name": "TextRecognizer",
                "methods": [
                    "__init__",
                    "resize_norm_img",
                    "resize_norm_img_vl",
                    "resize_norm_img_srn",
                    "srn_other_inputs",
                    "process_image_srn",
                    "resize_norm_img_sar",
                    "resize_norm_img_spin",
                    "resize_norm_img_svtr",
                    "resize_norm_img_abinet",
                    "norm_img_can",
                    "__call__"
                ]
            },
            {
                "class_name": "TextClassifier",
                "methods": [
                    "__init__",
                    "resize_norm_img",
                    "__call__"
                ]
            },
            {
                "class_name": "TextSystem",
                "methods": [
                    "__init__",
                    "draw_crop_rec_res",
                    "normalize_custom_detection_boxes",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "print",
                "format",
                "create_operators",
                "build_post_process",
                "create_predictor",
                "isinstance",
                "int",
                "split",
                "TextDetector",
                "TextRecognizer",
                "TextClassifier"
            ],
            "order_points_clockwise": [
                "zeros",
                "sum",
                "argmin",
                "argmax",
                "delete",
                "diff",
                "array"
            ],
            "clip_det_res": [
                "range",
                "int",
                "min",
                "max"
            ],
            "filter_tag_det_res": [
                "type",
                "array",
                "order_points_clockwise",
                "clip_det_res",
                "int",
                "norm",
                "append"
            ],
            "filter_tag_det_res_only_clip": [
                "type",
                "array",
                "clip_det_res",
                "append"
            ],
            "transform": [
                "op"
            ],
            "__call__": [
                "copy",
                "transform",
                "expand_dims",
                "run",
                "enumerate",
                "format",
                "postprocess_op",
                "filter_tag_det_res_only_clip",
                "filter_tag_det_res",
                "len",
                "append",
                "float",
                "argsort",
                "array",
                "range",
                "min",
                "max",
                "resize_norm_img_sar",
                "process_image_srn",
                "resize_norm_img_svtr",
                "resize_norm_img_vl",
                "resize_norm_img_spin",
                "resize_norm_img_abinet",
                "astype",
                "norm_img_can",
                "ones",
                "resize_norm_img",
                "concatenate",
                "get_input_names",
                "get_input_handle",
                "copy_from_cpu",
                "copy_to_cpu",
                "deepcopy",
                "try_shrink_memory",
                "rotate",
                "normalize_custom_detection_boxes",
                "text_detector",
                "sorted_boxes",
                "get_rotate_crop_image",
                "get_minarea_rect_crop",
                "text_classifier",
                "text_recognizer"
            ],
            "resize_norm_img": [
                "cvtColor",
                "fromarray",
                "uint8",
                "resize",
                "array",
                "expand_dims",
                "transpose",
                "astype",
                "int",
                "isinstance",
                "float",
                "ceil",
                "zeros"
            ],
            "resize_norm_img_vl": [
                "resize",
                "astype",
                "transpose"
            ],
            "resize_norm_img_srn": [
                "zeros",
                "resize",
                "asarray",
                "cvtColor",
                "astype",
                "reshape"
            ],
            "srn_other_inputs": [
                "int",
                "astype",
                "reshape",
                "array",
                "range",
                "ones",
                "triu",
                "tile",
                "tril"
            ],
            "process_image_srn": [
                "resize_norm_img_srn",
                "srn_other_inputs",
                "astype"
            ],
            "resize_norm_img_sar": [
                "int",
                "float",
                "ceil",
                "round",
                "max",
                "min",
                "resize",
                "astype",
                "transpose",
                "ones"
            ],
            "resize_norm_img_spin": [
                "cvtColor",
                "resize",
                "tuple",
                "array",
                "expand_dims",
                "transpose",
                "float32",
                "reshape"
            ],
            "resize_norm_img_svtr": [
                "resize",
                "astype",
                "transpose"
            ],
            "resize_norm_img_abinet": [
                "resize",
                "astype",
                "array",
                "transpose"
            ],
            "norm_img_can": [
                "cvtColor",
                "max",
                "pad",
                "expand_dims",
                "astype"
            ],
            "draw_crop_rec_res": [
                "makedirs",
                "len",
                "range",
                "imwrite",
                "join"
            ],
            "normalize_custom_detection_boxes": [
                "array",
                "len",
                "minAreaRect",
                "boxPoints",
                "lexsort",
                "argsort",
                "append"
            ],
            "build_post_process": [
                "append",
                "deepcopy",
                "pop",
                "update",
                "Exception",
                "format",
                "eval"
            ],
            "create_operators": [
                "isinstance",
                "len",
                "list",
                "update",
                "eval",
                "append"
            ],
            "create_predictor": [
                "get_inputs"
            ],
            "get_rotate_crop_image": [
                "len",
                "int",
                "max",
                "norm",
                "float32",
                "getPerspectiveTransform",
                "warpPerspective",
                "rot90"
            ],
            "get_minarea_rect_crop": [
                "minAreaRect",
                "astype",
                "array",
                "sorted",
                "list",
                "boxPoints",
                "get_rotate_crop_image"
            ],
            "sorted_boxes": [
                "range",
                "sorted",
                "abs"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/db_postprocess.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/db_postprocess.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.division",
            "__future__.print_function",
            "numpy",
            "cv2",
            "shapely.geometry.Polygon",
            "pyclipper"
        ],
        "classes": [
            {
                "class_name": "DBPostProcess",
                "methods": [
                    "__init__",
                    "polygons_from_bitmap",
                    "boxes_from_bitmap",
                    "unclip",
                    "get_mini_boxes",
                    "box_score_fast",
                    "box_score_slow",
                    "__call__"
                ]
            },
            {
                "class_name": "DistillationDBPostProcess",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "format",
                "array",
                "DBPostProcess"
            ],
            "polygons_from_bitmap": [
                "findContours",
                "astype",
                "arcLength",
                "approxPolyDP",
                "reshape",
                "box_score_fast",
                "unclip",
                "len",
                "get_mini_boxes",
                "array",
                "clip",
                "round",
                "append",
                "tolist"
            ],
            "boxes_from_bitmap": [
                "findContours",
                "astype",
                "len",
                "min",
                "range",
                "get_mini_boxes",
                "array",
                "box_score_fast",
                "reshape",
                "box_score_slow",
                "unclip",
                "clip",
                "round",
                "append"
            ],
            "unclip": [
                "Polygon",
                "PyclipperOffset",
                "AddPath",
                "array",
                "Execute"
            ],
            "get_mini_boxes": [
                "minAreaRect",
                "sorted",
                "list",
                "boxPoints",
                "min"
            ],
            "box_score_fast": [
                "copy",
                "clip",
                "astype",
                "floor",
                "min",
                "ceil",
                "max",
                "zeros",
                "fillPoly",
                "reshape",
                "mean"
            ],
            "box_score_slow": [
                "copy",
                "reshape",
                "clip",
                "min",
                "max",
                "zeros",
                "fillPoly",
                "astype",
                "mean"
            ],
            "__call__": [
                "range",
                "dilate",
                "astype",
                "array",
                "polygons_from_bitmap",
                "boxes_from_bitmap",
                "ValueError",
                "append",
                "post_process"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/cls_postprocess.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/cls_postprocess.py",
        "imports": [],
        "classes": [
            {
                "class_name": "ClsPostProcess",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "__call__": [
                "range",
                "argmax",
                "enumerate"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/prediction.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/prediction.py",
        "imports": [
            "copy",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Union",
            "numpy",
            "PIL.Image",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.ObjectAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.read_image_as_pil",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.visualize_object_predictions",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "fiftyone",
            "fiftyone"
        ],
        "classes": [
            {
                "class_name": "PredictionScore",
                "methods": [
                    "__init__",
                    "is_greater_than_threshold",
                    "__repr__"
                ]
            },
            {
                "class_name": "ObjectPrediction",
                "methods": [
                    "__init__",
                    "get_shifted_object_prediction",
                    "to_coco_prediction",
                    "to_fiftyone_detection",
                    "__repr__"
                ]
            },
            {
                "class_name": "PredictionResult",
                "methods": [
                    "__init__",
                    "export_visuals",
                    "to_coco_annotations",
                    "to_coco_predictions",
                    "to_imantics_annotations",
                    "to_fiftyone_detections"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "type",
                "tolist",
                "deepcopy",
                "PredictionScore",
                "__init__",
                "super",
                "read_image_as_pil"
            ],
            "is_greater_than_threshold": [],
            "__repr__": [],
            "get_shifted_object_prediction": [
                "ObjectPrediction",
                "to_xyxy",
                "get_shifted_box",
                "get_shifted_mask"
            ],
            "to_coco_prediction": [
                "from_coco_segmentation",
                "to_coco_segmentation",
                "from_coco_bbox",
                "to_xywh"
            ],
            "to_fiftyone_detection": [
                "ImportError",
                "to_xyxy",
                "Detection"
            ],
            "export_visuals": [
                "mkdir",
                "Path",
                "visualize_object_predictions",
                "ascontiguousarray"
            ],
            "to_coco_annotations": [
                "append",
                "to_coco_prediction"
            ],
            "to_coco_predictions": [
                "append",
                "to_coco_prediction"
            ],
            "to_imantics_annotations": [
                "append",
                "to_imantics_annotation"
            ],
            "to_fiftyone_detections": [
                "ImportError",
                "append",
                "to_fiftyone_detection"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/__init__.py",
        "imports": [
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Category",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.auto_model.AutoDetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/auto_model.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/auto_model.py",
        "imports": [
            "typing.Any",
            "typing.Dict",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.import_model_class"
        ],
        "classes": [
            {
                "class_name": "AutoDetectionModel",
                "methods": [
                    "from_pretrained"
                ]
            }
        ],
        "functions": {
            "from_pretrained": [
                "import_model_class",
                "DetectionModel"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/slicing.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/slicing.py",
        "imports": [
            "concurrent.futures",
            "logging",
            "os",
            "time",
            "pathlib.Path",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Sequence",
            "typing.Union",
            "numpy",
            "PIL.Image",
            "shapely.errors.TopologicalError",
            "tqdm.tqdm",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.Coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoImage",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.create_coco_dict",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.read_image_as_pil",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.load_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json"
        ],
        "classes": [
            {
                "class_name": "SlicedImage",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "SliceImageResult",
                "methods": [
                    "__init__",
                    "add_sliced_image",
                    "sliced_image_list",
                    "images",
                    "coco_images",
                    "starting_pixels",
                    "filenames",
                    "__getitem__",
                    "__len__"
                ]
            }
        ],
        "functions": {
            "get_slice_bboxes": [
                "int",
                "get_auto_slice_params",
                "ValueError",
                "min",
                "max",
                "append"
            ],
            "annotation_inside_slice": [],
            "process_coco_annotations": [
                "annotation_inside_slice",
                "get_sliced_coco_annotation",
                "append"
            ],
            "__init__": [],
            "add_sliced_image": [
                "isinstance",
                "TypeError",
                "append"
            ],
            "sliced_image_list": [],
            "images": [
                "append"
            ],
            "coco_images": [
                "append"
            ],
            "starting_pixels": [
                "append"
            ],
            "filenames": [
                "append"
            ],
            "__getitem__": [
                "isinstance",
                "tolist",
                "_prepare_ith_dict",
                "indices",
                "len",
                "range",
                "map",
                "list",
                "NotImplementedError",
                "type"
            ],
            "_prepare_ith_dict": [],
            "__len__": [
                "len"
            ],
            "slice_image": [
                "mkdir",
                "Path",
                "read_image_as_pil",
                "verboselog",
                "str",
                "RuntimeError",
                "get_slice_bboxes",
                "SliceImageResult",
                "asarray",
                "process_coco_annotations",
                "join",
                "map",
                "CocoImage",
                "add_annotation",
                "SlicedImage",
                "add_sliced_image",
                "ThreadPoolExecutor",
                "len"
            ],
            "_export_single_slice": [
                "read_image_as_pil",
                "str",
                "Path",
                "save",
                "close",
                "verboselog"
            ],
            "slice_coco": [
                "load_json",
                "from_coco_dict_or_path",
                "tqdm",
                "join",
                "slice_image",
                "Path",
                "extend",
                "warning",
                "create_coco_dict",
                "save_json"
            ],
            "calc_ratio_and_slice": [],
            "calc_resolution_factor": [
                "power"
            ],
            "calc_aspect_ratio_orientation": [],
            "calc_slice_and_overlap_params": [
                "calc_ratio_and_slice",
                "int"
            ],
            "get_resolution_selector": [
                "calc_aspect_ratio_orientation",
                "calc_slice_and_overlap_params"
            ],
            "get_auto_slice_params": [
                "calc_resolution_factor",
                "get_resolution_selector"
            ],
            "shift_bboxes": [
                "type",
                "isinstance",
                "tolist",
                "BoundingBox",
                "get_shifted_box",
                "append",
                "to_xyxy",
                "stack",
                "new_tensor"
            ],
            "shift_masks": [
                "Mask",
                "get_shifted_mask",
                "append",
                "stack"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/annotation.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/annotation.py",
        "imports": [
            "copy",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bbox_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bool_mask_from_coco_segmentation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_coco_segmentation_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.ShapelyAnnotation",
            "pycocotools.mask",
            "imantics"
        ],
        "classes": [
            {
                "class_name": "BoundingBox",
                "methods": [
                    "__init__",
                    "shift_amount",
                    "area",
                    "get_expanded_box",
                    "to_xywh",
                    "to_coco_bbox",
                    "to_xyxy",
                    "to_voc_bbox",
                    "get_shifted_box",
                    "__repr__"
                ]
            },
            {
                "class_name": "Category",
                "methods": [
                    "__init__",
                    "__repr__"
                ]
            },
            {
                "class_name": "Mask",
                "methods": [
                    "from_float_mask",
                    "from_coco_segmentation",
                    "__init__",
                    "encode_bool_mask",
                    "decode_bool_mask",
                    "bool_mask",
                    "shape",
                    "full_shape",
                    "shift_amount",
                    "get_shifted_mask",
                    "to_coco_segmentation"
                ]
            },
            {
                "class_name": "ObjectAnnotation",
                "methods": [
                    "from_bool_mask",
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "from_coco_annotation_dict",
                    "from_shapely_annotation",
                    "from_imantics_annotation",
                    "__init__",
                    "to_coco_annotation",
                    "to_coco_prediction",
                    "to_shapely_annotation",
                    "to_imantics_annotation",
                    "deepcopy",
                    "get_empty_mask",
                    "get_shifted_object_annotation",
                    "__repr__"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "Exception",
                "isinstance",
                "TypeError",
                "len",
                "encode_bool_mask",
                "ValueError",
                "Mask",
                "get_bbox_from_bool_mask",
                "type",
                "tolist",
                "deepcopy",
                "max",
                "min",
                "BoundingBox",
                "str",
                "Category"
            ],
            "shift_amount": [],
            "area": [],
            "get_expanded_box": [
                "int",
                "min",
                "max",
                "BoundingBox"
            ],
            "to_xywh": [],
            "to_coco_bbox": [
                "to_xywh"
            ],
            "to_xyxy": [],
            "to_voc_bbox": [
                "to_xyxy"
            ],
            "get_shifted_box": [
                "BoundingBox"
            ],
            "__repr__": [],
            "from_float_mask": [
                "cls"
            ],
            "from_coco_segmentation": [
                "ValueError",
                "get_bool_mask_from_coco_segmentation",
                "cls"
            ],
            "encode_bool_mask": [
                "encode",
                "asfortranarray",
                "astype"
            ],
            "decode_bool_mask": [
                "astype",
                "decode"
            ],
            "bool_mask": [
                "decode_bool_mask"
            ],
            "shape": [],
            "full_shape": [],
            "get_shifted_mask": [
                "ValueError",
                "full",
                "min",
                "Mask"
            ],
            "to_coco_segmentation": [
                "get_coco_segmentation_from_bool_mask"
            ],
            "from_bool_mask": [
                "cls"
            ],
            "from_coco_bbox": [
                "cls"
            ],
            "from_coco_annotation_dict": [
                "from_coco_segmentation",
                "from_coco_bbox"
            ],
            "from_shapely_annotation": [
                "get_bool_mask_from_coco_segmentation",
                "to_coco_segmentation",
                "cls"
            ],
            "from_imantics_annotation": [
                "cls"
            ],
            "to_coco_annotation": [
                "from_coco_segmentation",
                "to_coco_segmentation",
                "from_coco_bbox",
                "to_xywh"
            ],
            "to_coco_prediction": [
                "from_coco_segmentation",
                "to_coco_segmentation",
                "from_coco_bbox",
                "to_xywh"
            ],
            "to_shapely_annotation": [
                "from_coco_segmentation",
                "to_coco_segmentation",
                "from_coco_bbox",
                "to_xywh"
            ],
            "to_imantics_annotation": [
                "ImportError",
                "Category",
                "create",
                "from_mask",
                "to_xyxy",
                "from_bbox"
            ],
            "deepcopy": [
                "deepcopy"
            ],
            "get_empty_mask": [
                "Mask"
            ],
            "get_shifted_object_annotation": [
                "ObjectAnnotation",
                "to_xyxy",
                "get_shifted_box",
                "get_shifted_mask"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/cli.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/cli.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.__version__",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict_fiftyone",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco2fiftyone.main",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco2yolov5.main",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco_error_analysis.analyse",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco_evaluation.evaluate",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.slice_coco.slice",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.print_enviroment_info"
        ],
        "classes": [],
        "functions": {
            "app": [
                "Fire"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/predict.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/predict.py",
        "imports": [
            "logging",
            "os",
            "time",
            "typing.List",
            "typing.Optional",
            "functools.cmp_to_key",
            "numpy",
            "tqdm.tqdm",
            "anylabeling.services.auto_labeling.utils.sahi.auto_model.AutoDetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.GreedyNMMPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.LSNMSPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.NMMPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.NMSPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.PostprocessPredictions",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.PredictionResult",
            "anylabeling.services.auto_labeling.utils.sahi.slicing.slice_image",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.Coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoImage",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.IMAGE_EXTENSIONS",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.VIDEO_EXTENSIONS",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.crop_object_predictions",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.cv2",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_video_reader",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.read_image_as_pil",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.visualize_object_predictions",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.increment_path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.list_files",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_pickle",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "sahi.utils.fiftyone.create_fiftyone_dataset_from_coco_file",
            "sahi.utils.fiftyone.fo"
        ],
        "classes": [],
        "functions": {
            "get_prediction": [
                "dict",
                "read_image_as_pil",
                "time",
                "perform_inference",
                "ascontiguousarray",
                "convert_original_predictions",
                "postprocess",
                "print",
                "PredictionResult"
            ],
            "get_sliced_prediction": [
                "dict",
                "time",
                "slice_image",
                "len",
                "keys",
                "ValueError",
                "list",
                "postprocess_constructor",
                "int",
                "write",
                "range",
                "append",
                "get_prediction",
                "get_shifted_object_prediction",
                "postprocess",
                "extend",
                "print",
                "PredictionResult"
            ],
            "bbox_sort": [
                "abs"
            ],
            "agg_prediction": [
                "to_coco_annotations",
                "append",
                "sorted",
                "cmp_to_key",
                "bbox_sort",
                "range",
                "len",
                "index",
                "tuple"
            ],
            "predict": [
                "ValueError",
                "warning",
                "dict",
                "Path",
                "increment_path",
                "mkdir",
                "from_coco_dict_or_path",
                "str",
                "isdir",
                "list_files",
                "get_video_reader",
                "time",
                "from_pretrained",
                "load_model",
                "enumerate",
                "tqdm",
                "split",
                "read_image_as_pil",
                "get_sliced_prediction",
                "get_prediction",
                "write",
                "format",
                "NotImplementedError",
                "to_coco_prediction",
                "append",
                "from_coco_annotation_dict",
                "visualize_object_predictions",
                "ascontiguousarray",
                "crop_object_predictions",
                "save_pickle",
                "imshow",
                "waitKey",
                "save_json",
                "print"
            ],
            "predict_fiftyone": [
                "check_requirements",
                "ValueError",
                "dict",
                "create_fiftyone_dataset_from_coco_file",
                "time",
                "from_pretrained",
                "load_model",
                "ProgressBar",
                "pb",
                "get_sliced_prediction",
                "get_prediction",
                "Detections",
                "to_fiftyone_detections",
                "save",
                "print",
                "launch_app",
                "evaluate_detections",
                "count_values",
                "sorted",
                "print_report",
                "load_evaluation_view",
                "sort_by",
                "sleep"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco_evaluation.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco_evaluation.py",
        "imports": [
            "itertools",
            "json",
            "warnings",
            "collections.OrderedDict",
            "pathlib.Path",
            "typing.List",
            "typing.Union",
            "fire",
            "numpy",
            "terminaltables.AsciiTable",
            "pycocotools.coco.COCO",
            "pycocotools.cocoeval.COCOeval"
        ],
        "classes": [],
        "functions": {
            "_cocoeval_summarize": [
                "format",
                "enumerate",
                "where",
                "len",
                "mean",
                "print"
            ],
            "evaluate_core": [
                "isinstance",
                "KeyError",
                "linspace",
                "int",
                "round",
                "len",
                "ValueError",
                "OrderedDict",
                "COCO",
                "list",
                "keys",
                "print",
                "open",
                "load",
                "loadRes",
                "COCOeval",
                "evaluate",
                "accumulate",
                "_cocoeval_summarize",
                "append",
                "enumerate",
                "loadCats",
                "getImgIds",
                "float",
                "min",
                "chain",
                "zip_longest",
                "range",
                "AsciiTable",
                "Path",
                "mkdir",
                "str",
                "dump"
            ],
            "evaluate": [
                "ModuleNotFoundError",
                "evaluate_core"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco2yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco2yolov5.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.Coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.increment_path"
        ],
        "classes": [],
        "functions": {
            "main": [
                "Path",
                "increment_path",
                "from_coco_dict_or_path",
                "export_as_yolov5",
                "str",
                "print"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco2fiftyone.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco2fiftyone.py",
        "imports": [
            "time",
            "pathlib.Path",
            "typing.List",
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.load_json",
            "fiftyone.utils.coco.add_coco_labels",
            "sahi.utils.fiftyone.create_fiftyone_dataset_from_coco_file",
            "sahi.utils.fiftyone.fo"
        ],
        "classes": [],
        "functions": {
            "main": [
                "load_json",
                "append",
                "Path",
                "str",
                "create_fiftyone_dataset_from_coco_file",
                "zip",
                "add_coco_labels",
                "launch_app",
                "evaluate_detections",
                "load_evaluation_view",
                "sort_by",
                "print",
                "sleep"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/slice_coco.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/slice_coco.py",
        "imports": [
            "os",
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.slicing.slice_coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json"
        ],
        "classes": [],
        "functions": {
            "slice": [
                "isinstance",
                "print",
                "Path",
                "str",
                "replace",
                "slice_coco",
                "join",
                "save_json"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco_error_analysis.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco_error_analysis.py",
        "imports": [
            "copy",
            "os",
            "multiprocessing.Pool",
            "pathlib.Path",
            "typing.List",
            "fire",
            "numpy",
            "matplotlib.pyplot",
            "matplotlib.pyplot",
            "matplotlib.pyplot",
            "matplotlib.pyplot",
            "pycocotools.coco.COCO",
            "pycocotools.cocoeval.COCOeval",
            "matplotlib.pyplot"
        ],
        "classes": [],
        "functions": {
            "_makeplot": [
                "range",
                "len",
                "zeros",
                "enumerate",
                "mean",
                "append",
                "array",
                "insert",
                "figure",
                "subplot",
                "plot",
                "fill_between",
                "str",
                "xlabel",
                "ylabel",
                "xlim",
                "ylim",
                "title",
                "legend",
                "Path",
                "savefig",
                "close"
            ],
            "_autolabel": [
                "get_height",
                "format",
                "annotate",
                "get_x",
                "get_width"
            ],
            "_makebarplot": [
                "subplots",
                "arange",
                "len",
                "range",
                "mean",
                "array",
                "append",
                "bar",
                "set_ylabel",
                "set_title",
                "set_xticks",
                "set_xticklabels",
                "legend",
                "_autolabel",
                "str",
                "Path",
                "savefig",
                "close"
            ],
            "_get_gt_area_group_numbers": [
                "str",
                "dict",
                "zip",
                "fromkeys"
            ],
            "_make_gt_area_group_numbers_plot": [
                "_get_gt_area_group_numbers",
                "keys",
                "print",
                "subplots",
                "arange",
                "len",
                "bar",
                "values",
                "set_ylabel",
                "set_title",
                "set_xticks",
                "set_xticklabels",
                "_autolabel",
                "str",
                "Path",
                "tight_layout",
                "savefig",
                "close"
            ],
            "_make_gt_area_histogram_plot": [
                "values",
                "subplots",
                "hist",
                "sqrt",
                "set_xlabel",
                "set_ylabel",
                "set_title",
                "str",
                "Path",
                "tight_layout",
                "savefig",
                "close"
            ],
            "_analyze_individual_category": [
                "loadCats",
                "print",
                "deepcopy",
                "getImgIds",
                "append",
                "createIndex",
                "getCatIds",
                "enumerate",
                "COCOeval",
                "evaluate",
                "accumulate"
            ],
            "_analyse_results": [
                "ValueError",
                "len",
                "Path",
                "str",
                "dirname",
                "exists",
                "print",
                "makedirs",
                "COCO",
                "loadRes",
                "getImgIds",
                "COCOeval",
                "deepcopy",
                "evaluate",
                "accumulate",
                "getCatIds",
                "enumerate",
                "append",
                "list",
                "zeros",
                "vstack",
                "Pool",
                "starmap",
                "loadCats",
                "replace",
                "_makeplot",
                "_makebarplot",
                "_make_gt_area_group_numbers_plot",
                "_make_gt_area_histogram_plot"
            ],
            "analyse": [
                "ModuleNotFoundError",
                "_analyse_results"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/predict_fiftyone.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/predict_fiftyone.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict_fiftyone"
        ],
        "classes": [],
        "functions": {
            "main": [
                "Fire"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/predict.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/predict.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict"
        ],
        "classes": [],
        "functions": {
            "main": [
                "Fire"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/yolonas.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/yolonas.py",
        "imports": [
            "urllib.request",
            "os.path",
            "pathlib.Path",
            "typing.Optional"
        ],
        "classes": [
            {
                "class_name": "YoloNasTestConstants",
                "methods": []
            }
        ],
        "functions": {
            "download_yolonas_s_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "download_yolonas_m_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "download_yolonas_l_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/yolov8.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/yolov8.py",
        "imports": [
            "urllib.request",
            "os.path",
            "pathlib.Path",
            "typing.Optional"
        ],
        "classes": [
            {
                "class_name": "Yolov8TestConstants",
                "methods": []
            }
        ],
        "functions": {
            "download_yolov8n_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "download_yolov8s_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "download_yolov8m_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "download_yolov8l_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "download_yolov8x_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/mmdet.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/mmdet.py",
        "imports": [
            "shutil",
            "sys",
            "urllib.request",
            "importlib.import_module",
            "os.path",
            "pathlib.Path",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.download_from_url",
            "mmdet",
            "mmdet.__version__",
            "mmengine.Config"
        ],
        "classes": [
            {
                "class_name": "MmdetTestConstants",
                "methods": []
            }
        ],
        "functions": {
            "mmdet_version_as_integer": [
                "int",
                "replace"
            ],
            "download_mmdet_cascade_mask_rcnn_model": [
                "mkdir",
                "Path",
                "download_from_url"
            ],
            "download_mmdet_retinanet_model": [
                "mkdir",
                "Path",
                "download_from_url"
            ],
            "download_mmdet_yolox_tiny_model": [
                "mkdir",
                "Path",
                "download_from_url"
            ],
            "download_mmdet_config": [
                "Path",
                "mkdir",
                "str",
                "exists",
                "urlretrieve",
                "insert",
                "splitext",
                "import_module",
                "pop",
                "items",
                "startswith",
                "isinstance",
                "get",
                "fromfile",
                "dump",
                "print",
                "abspath",
                "rmtree"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/torch.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/torch.py",
        "imports": [
            "os",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.is_available",
            "torch"
        ],
        "classes": [],
        "functions": {
            "empty_cuda_cache": [
                "is_torch_cuda_available",
                "empty_cache"
            ],
            "to_float_tensor": [
                "transpose",
                "float",
                "from_numpy",
                "array",
                "max"
            ],
            "torch_to_numpy": [
                "numpy",
                "max",
                "transpose"
            ],
            "is_torch_cuda_available": [
                "is_available"
            ],
            "select_device": [
                "replace",
                "lower",
                "strip",
                "str",
                "is_torch_cuda_available",
                "getattr",
                "is_available",
                "device"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/versions.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/versions.py",
        "imports": [
            "sys",
            "importlib_metadata",
            "importlib.metadata"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/yolov5.py",
        "imports": [
            "urllib.request",
            "os.path",
            "pathlib.Path",
            "typing.Optional"
        ],
        "classes": [
            {
                "class_name": "Yolov5TestConstants",
                "methods": []
            }
        ],
        "functions": {
            "download_yolov5n_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "download_yolov5s6_model": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/shapely.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/shapely.py",
        "imports": [
            "typing.List",
            "shapely.geometry.CAP_STYLE",
            "shapely.geometry.JOIN_STYLE",
            "shapely.geometry.MultiPolygon",
            "shapely.geometry.Polygon",
            "shapely.geometry.box"
        ],
        "classes": [
            {
                "class_name": "ShapelyAnnotation",
                "methods": [
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "__init__",
                    "multipolygon",
                    "area",
                    "multipolygon",
                    "to_list",
                    "to_coco_segmentation",
                    "to_opencv_contours",
                    "to_xywh",
                    "to_coco_bbox",
                    "to_xyxy",
                    "to_voc_bbox",
                    "get_convex_hull_shapely_annotation",
                    "get_simplified_shapely_annotation",
                    "get_buffered_shapely_annotation",
                    "get_intersection"
                ]
            }
        ],
        "functions": {
            "get_shapely_box": [
                "box"
            ],
            "get_shapely_multipolygon": [
                "list",
                "zip",
                "Polygon",
                "append",
                "MultiPolygon"
            ],
            "get_bbox_from_shapely": [],
            "from_coco_segmentation": [
                "get_shapely_multipolygon",
                "cls"
            ],
            "from_coco_bbox": [
                "get_shapely_box",
                "MultiPolygon",
                "cls"
            ],
            "__init__": [],
            "multipolygon": [],
            "area": [
                "int"
            ],
            "to_list": [
                "list",
                "zip",
                "append"
            ],
            "to_coco_segmentation": [
                "len",
                "int",
                "append"
            ],
            "to_opencv_contours": [
                "int",
                "range",
                "len",
                "append"
            ],
            "to_xywh": [
                "get_bbox_from_shapely"
            ],
            "to_coco_bbox": [
                "to_xywh"
            ],
            "to_xyxy": [
                "get_bbox_from_shapely"
            ],
            "to_voc_bbox": [
                "to_xyxy"
            ],
            "get_convex_hull_shapely_annotation": [
                "MultiPolygon",
                "ShapelyAnnotation"
            ],
            "get_simplified_shapely_annotation": [
                "MultiPolygon",
                "simplify",
                "ShapelyAnnotation"
            ],
            "get_buffered_shapely_annotation": [
                "buffer",
                "ShapelyAnnotation",
                "MultiPolygon"
            ],
            "get_intersection": [
                "intersection",
                "len",
                "get_bbox_from_shapely",
                "MultiPolygon",
                "ShapelyAnnotation"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/sparseyolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/sparseyolov5.py",
        "imports": [],
        "classes": [
            {
                "class_name": "Yolov5TestConstants",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/detectron2.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/detectron2.py",
        "imports": [
            "pathlib.Path"
        ],
        "classes": [
            {
                "class_name": "Detectron2TestConstants",
                "methods": []
            }
        ],
        "functions": {
            "export_cfg_as_yaml": [
                "mkdir",
                "Path",
                "open",
                "write",
                "dump"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/import_utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/import_utils.py",
        "imports": [
            "importlib.util",
            "logging",
            "os",
            "importlib.metadata",
            "packaging.version",
            "packaging.version"
        ],
        "classes": [],
        "functions": {
            "get_package_info": [
                "is_available",
                "version",
                "import_module",
                "info"
            ],
            "print_enviroment_info": [
                "get_package_info"
            ],
            "is_available": [
                "find_spec"
            ],
            "check_requirements": [
                "find_spec",
                "append",
                "ImportError"
            ],
            "check_package_minimum_version": [
                "get_package_info",
                "warning",
                "parse"
            ],
            "ensure_package_minimum_version": [
                "get_package_info",
                "warning",
                "parse",
                "ImportError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/compatibility.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/compatibility.py",
        "imports": [],
        "classes": [],
        "functions": {
            "fix_shift_amount_list": [
                "isinstance"
            ],
            "fix_full_shape_list": [
                "isinstance"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/file.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/file.py",
        "imports": [
            "glob",
            "json",
            "ntpath",
            "os",
            "pickle",
            "re",
            "urllib.request",
            "zipfile",
            "pathlib.Path",
            "typing.Optional",
            "numpy",
            "sys"
        ],
        "classes": [
            {
                "class_name": "NumpyEncoder",
                "methods": [
                    "default"
                ]
            }
        ],
        "functions": {
            "unzip": [
                "ZipFile",
                "extractall"
            ],
            "save_json": [
                "mkdir",
                "Path",
                "open",
                "dump"
            ],
            "default": [
                "isinstance",
                "int",
                "float",
                "tolist",
                "default",
                "super"
            ],
            "load_json": [
                "open",
                "load"
            ],
            "list_files": [
                "listdir",
                "any",
                "lower",
                "join",
                "append",
                "len",
                "Path",
                "verboseprint",
                "str"
            ],
            "list_files_recursively": [
                "walk",
                "any",
                "lower",
                "join",
                "append",
                "split",
                "len",
                "verboseprint",
                "format"
            ],
            "get_base_filename": [
                "basename",
                "splitext"
            ],
            "get_file_extension": [
                "splitext"
            ],
            "load_pickle": [
                "open",
                "load"
            ],
            "save_pickle": [
                "mkdir",
                "Path",
                "open",
                "dump"
            ],
            "import_model_class": [
                "__import__",
                "getattr"
            ],
            "increment_path": [
                "Path",
                "exists",
                "str",
                "glob",
                "search",
                "int",
                "groups",
                "max"
            ],
            "download_from_url": [
                "mkdir",
                "Path",
                "exists",
                "urlretrieve"
            ],
            "is_colab": []
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/huggingface.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/huggingface.py",
        "imports": [],
        "classes": [
            {
                "class_name": "HuggingfaceTestConstants",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/coco.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/coco.py",
        "imports": [
            "copy",
            "logging",
            "os",
            "threading",
            "collections.Counter",
            "collections.defaultdict",
            "dataclasses.dataclass",
            "multiprocessing.Pool",
            "pathlib.Path",
            "threading.Lock",
            "threading.Thread",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Set",
            "typing.Union",
            "numpy",
            "tqdm.tqdm",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.is_colab",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.load_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.ShapelyAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.box",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.get_shapely_multipolygon",
            "yaml",
            "sahi.slicing.annotation_inside_slice",
            "shutil",
            "yaml",
            "yaml"
        ],
        "classes": [
            {
                "class_name": "CocoCategory",
                "methods": [
                    "__init__",
                    "from_coco_category",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoAnnotation",
                "methods": [
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "from_coco_annotation_dict",
                    "from_shapely_annotation",
                    "__init__",
                    "get_sliced_coco_annotation",
                    "area",
                    "bbox",
                    "segmentation",
                    "category_id",
                    "category_id",
                    "image_id",
                    "image_id",
                    "category_name",
                    "category_name",
                    "iscrowd",
                    "json",
                    "serialize",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoPrediction",
                "methods": [
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "from_coco_annotation_dict",
                    "__init__",
                    "json",
                    "serialize",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoVidAnnotation",
                "methods": [
                    "__init__",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoImage",
                "methods": [
                    "from_coco_image_dict",
                    "__init__",
                    "add_annotation",
                    "add_prediction",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoVidImage",
                "methods": [
                    "__init__",
                    "from_coco_image",
                    "add_annotation",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoVideo",
                "methods": [
                    "__init__",
                    "add_image",
                    "add_cocovidimage",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "Coco",
                "methods": [
                    "__init__",
                    "add_categories_from_coco_category_list",
                    "add_category",
                    "add_image",
                    "update_categories",
                    "merge",
                    "from_coco_dict_or_path",
                    "json_categories",
                    "category_mapping",
                    "json",
                    "prediction_array",
                    "stats",
                    "calculate_stats",
                    "split_coco_as_train_val",
                    "export_as_yolov5",
                    "get_subsampled_coco",
                    "get_upsampled_coco",
                    "get_area_filtered_coco",
                    "get_coco_with_clipped_bboxes"
                ]
            },
            {
                "class_name": "DatasetClassCounts",
                "methods": [
                    "frequencies",
                    "__add__"
                ]
            },
            {
                "class_name": "CocoVid",
                "methods": [
                    "__init__",
                    "add_categories_from_coco_category_list",
                    "add_category",
                    "json_categories",
                    "category_mapping",
                    "add_video",
                    "json"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "int",
                "ValueError",
                "from_coco_segmentation",
                "from_coco_bbox",
                "__init__",
                "super"
            ],
            "from_coco_category": [
                "cls"
            ],
            "json": [
                "create_coco_dict",
                "append",
                "set",
                "add",
                "deepcopy",
                "len"
            ],
            "__repr__": [],
            "from_coco_segmentation": [
                "cls"
            ],
            "from_coco_bbox": [
                "cls"
            ],
            "from_coco_annotation_dict": [
                "__contains__",
                "isinstance",
                "warning",
                "cls"
            ],
            "from_shapely_annotation": [
                "cls",
                "to_coco_segmentation"
            ],
            "get_sliced_coco_annotation": [
                "box",
                "get_intersection",
                "from_shapely_annotation"
            ],
            "area": [],
            "bbox": [
                "to_xywh"
            ],
            "segmentation": [
                "to_coco_segmentation"
            ],
            "category_id": [
                "isinstance",
                "Exception"
            ],
            "image_id": [
                "isinstance",
                "Exception"
            ],
            "category_name": [
                "isinstance",
                "Exception"
            ],
            "iscrowd": [],
            "serialize": [
                "print"
            ],
            "from_coco_image_dict": [
                "cls"
            ],
            "add_annotation": [
                "isinstance",
                "TypeError",
                "append"
            ],
            "add_prediction": [
                "isinstance",
                "TypeError",
                "append"
            ],
            "from_coco_image": [
                "cls"
            ],
            "add_image": [
                "isinstance",
                "TypeError",
                "append",
                "from_coco_image",
                "ValueError"
            ],
            "add_cocovidimage": [
                "isinstance",
                "TypeError",
                "append"
            ],
            "add_categories_from_coco_category_list": [
                "keys",
                "add_category",
                "from_coco_category"
            ],
            "add_category": [
                "isinstance",
                "TypeError",
                "append"
            ],
            "update_categories": [
                "Coco",
                "deepcopy",
                "keys",
                "CocoCategory",
                "add_category",
                "from_coco_image_dict",
                "abspath",
                "str",
                "Path",
                "add_annotation",
                "add_image",
                "append"
            ],
            "merge": [
                "ValueError",
                "print",
                "deepcopy",
                "update_categories",
                "extend",
                "max",
                "array",
                "append"
            ],
            "from_coco_dict_or_path": [
                "cls",
                "type",
                "TypeError",
                "isinstance",
                "load_json",
                "len",
                "add_categories_from_coco_category_list",
                "get_imageid2annotationlist_mapping",
                "set",
                "Lock",
                "range",
                "Thread",
                "start",
                "currentThread",
                "enumerate",
                "join",
                "tqdm",
                "from_coco_image_dict",
                "print",
                "add",
                "from_coco_annotation_dict",
                "add_annotation",
                "add_image",
                "get_coco_with_clipped_bboxes"
            ],
            "fill_image_id_set": [
                "tqdm",
                "from_coco_image_dict",
                "print",
                "acquire",
                "add",
                "release",
                "from_coco_annotation_dict",
                "add_annotation",
                "add_image"
            ],
            "json_categories": [
                "append"
            ],
            "category_mapping": [],
            "prediction_array": [
                "create_coco_prediction_array"
            ],
            "stats": [
                "calculate_stats"
            ],
            "calculate_stats": [
                "len",
                "float",
                "deepcopy",
                "dict",
                "Counter"
            ],
            "split_coco_as_train_val": [
                "seed",
                "len",
                "deepcopy",
                "shuffle",
                "int",
                "Coco"
            ],
            "export_as_yolov5": [
                "ImportError",
                "ValueError",
                "split_coco_as_train_val",
                "Path",
                "abspath",
                "mkdir",
                "export_yolov5_images_and_txts_from_coco_object",
                "str",
                "len",
                "list",
                "values",
                "open",
                "dump"
            ],
            "get_subsampled_coco": [
                "Coco",
                "add_categories_from_coco_category_list",
                "defaultdict",
                "len",
                "append",
                "range",
                "add_image"
            ],
            "get_upsampled_coco": [
                "Coco",
                "add_categories_from_coco_category_list",
                "range",
                "len",
                "defaultdict",
                "add_image"
            ],
            "get_area_filtered_coco": [
                "float",
                "Coco",
                "add_categories_from_coco_category_list",
                "keys",
                "add_image"
            ],
            "get_coco_with_clipped_bboxes": [
                "Coco",
                "add_categories_from_coco_category_list",
                "CocoImage",
                "annotation_inside_slice",
                "get_sliced_coco_annotation",
                "to_xywh",
                "CocoAnnotation",
                "add_annotation",
                "add_image"
            ],
            "export_yolov5_images_and_txts_from_coco_object": [
                "info",
                "is_colab",
                "warning",
                "Pool",
                "starmap",
                "tqdm",
                "len",
                "export_single_yolov5_image_and_corresponding_txt"
            ],
            "export_single_yolov5_image_and_corresponding_txt": [
                "len",
                "Path",
                "print",
                "is_file",
                "abspath",
                "ValueError",
                "str",
                "deepcopy",
                "copy",
                "symlink",
                "replace",
                "open",
                "write",
                "join"
            ],
            "update_categories_from_file": [
                "load_json",
                "update_categories",
                "save_json"
            ],
            "merge_from_list": [
                "print",
                "deepcopy",
                "enumerate",
                "merge"
            ],
            "merge_from_file": [
                "load_json",
                "merge",
                "save_json"
            ],
            "get_imageid2annotationlist_mapping": [
                "defaultdict",
                "print",
                "append"
            ],
            "create_coco_dict": [
                "ValueError",
                "dict",
                "len",
                "append"
            ],
            "create_coco_prediction_array": [
                "ValueError",
                "len",
                "enumerate",
                "append"
            ],
            "add_bbox_and_area_to_coco": [
                "load_json",
                "deepcopy",
                "enumerate",
                "extend",
                "list",
                "min",
                "max",
                "get_shapely_multipolygon",
                "save_json"
            ],
            "frequencies": [
                "items"
            ],
            "__add__": [
                "set",
                "keys",
                "items",
                "get",
                "DatasetClassCounts"
            ],
            "count_images_with_category": [
                "defaultdict",
                "load_json",
                "items",
                "dict",
                "len",
                "keys",
                "DatasetClassCounts"
            ],
            "add_video": [
                "isinstance",
                "TypeError",
                "append"
            ],
            "remove_invalid_coco_results": [
                "isinstance",
                "load_json",
                "TypeError",
                "print",
                "append"
            ],
            "export_coco_as_yolov5": [
                "ImportError",
                "ValueError",
                "split_coco_as_train_val",
                "Path",
                "abspath",
                "mkdir",
                "export_yolov5_images_and_txts_from_coco_object",
                "replace",
                "str",
                "len",
                "list",
                "values",
                "open",
                "dump"
            ],
            "export_coco_as_yolov5_via_yml": [
                "ImportError",
                "open",
                "safe_load",
                "ValueError",
                "from_coco_dict_or_path",
                "export_coco_as_yolov5"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/fiftyone.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/fiftyone.py",
        "imports": [
            "os",
            "subprocess",
            "sys",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.is_available",
            "fiftyone",
            "fiftyone.utils.coco.COCODetectionDatasetImporter",
            "fiftyone.utils.coco._get_matching_image_ids",
            "fiftyone.utils.coco.load_coco_detection_annotations"
        ],
        "classes": [
            {
                "class_name": "COCODetectionDatasetImporter",
                "methods": [
                    "setup"
                ]
            }
        ],
        "functions": {
            "setup": [
                "isfile",
                "load_coco_detection_annotations",
                "_get_matching_image_ids",
                "set",
                "items",
                "join",
                "values"
            ],
            "create_fiftyone_dataset_from_coco_file": [
                "COCODetectionDatasetImporter",
                "from_importer"
            ],
            "launch_fiftyone_app": [
                "create_fiftyone_dataset_from_coco_file",
                "launch_app"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/cv.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/cv.py",
        "imports": [
            "copy",
            "os",
            "random",
            "time",
            "typing.List",
            "typing.Optional",
            "typing.Union",
            "cv2",
            "numpy",
            "requests",
            "PIL.Image",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "skimage.io",
            "skimage.io",
            "IPython"
        ],
        "classes": [
            {
                "class_name": "Colors",
                "methods": [
                    "__init__",
                    "__call__",
                    "hex2rgb"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "hex2rgb",
                "len"
            ],
            "__call__": [
                "int"
            ],
            "hex2rgb": [
                "tuple",
                "int"
            ],
            "crop_object_predictions": [
                "mkdir",
                "Path",
                "enumerate",
                "deepcopy",
                "to_xyxy",
                "int",
                "join",
                "str",
                "imwrite",
                "cvtColor"
            ],
            "convert_image_to": [
                "imread",
                "splitext",
                "cvtColor",
                "imwrite"
            ],
            "read_large_image": [
                "imread",
                "cvtColor",
                "ImportError",
                "astype"
            ],
            "read_image": [
                "imread",
                "cvtColor"
            ],
            "read_image_as_pil": [
                "isinstance",
                "convert",
                "open",
                "startswith",
                "str",
                "get",
                "exif_transpose",
                "ImportError",
                "astype",
                "imread",
                "len",
                "fromarray",
                "TypeError"
            ],
            "select_random_color": [
                "randrange"
            ],
            "apply_color_mask": [
                "astype",
                "zeros_like",
                "stack"
            ],
            "get_video_reader": [
                "basename",
                "VideoCapture",
                "int",
                "get",
                "VideoWriter_fourcc",
                "VideoWriter",
                "join",
                "read_video_frame"
            ],
            "read_video_frame": [
                "imshow",
                "format",
                "str",
                "get",
                "set",
                "waitKey",
                "print",
                "exit",
                "read",
                "fromarray"
            ],
            "visualize_prediction": [
                "time",
                "deepcopy",
                "Colors",
                "max",
                "round",
                "sum",
                "apply_color_mask",
                "squeeze",
                "addWeighted",
                "range",
                "len",
                "colors",
                "int",
                "rectangle",
                "getTextSize",
                "putText",
                "mkdir",
                "Path",
                "join",
                "imwrite",
                "cvtColor"
            ],
            "visualize_object_predictions": [
                "time",
                "deepcopy",
                "Colors",
                "max",
                "round",
                "sum",
                "colors",
                "apply_color_mask",
                "addWeighted",
                "to_xyxy",
                "int",
                "rectangle",
                "getTextSize",
                "putText",
                "mkdir",
                "Path",
                "str",
                "imwrite",
                "cvtColor"
            ],
            "get_coco_segmentation_from_bool_mask": [
                "squeeze",
                "astype",
                "copyMakeBorder",
                "findContours",
                "len",
                "tolist",
                "flatten",
                "append"
            ],
            "get_bool_mask_from_coco_segmentation": [
                "astype",
                "round",
                "reshape",
                "array",
                "zeros",
                "fillPoly"
            ],
            "get_bbox_from_bool_mask": [
                "any",
                "where"
            ],
            "normalize_numpy_image": [
                "max"
            ],
            "ipython_display": [
                "cvtColor",
                "imencode",
                "Image",
                "display"
            ],
            "exif_transpose": [
                "getexif",
                "get",
                "transpose",
                "tobytes"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/torchvision.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/torchvision.py",
        "imports": [
            "packaging.version",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.get_package_info",
            "torchvision"
        ],
        "classes": [
            {
                "class_name": "TorchVisionTestConstants",
                "methods": []
            }
        ],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/utils.py",
        "imports": [
            "collections.abc.Sequence",
            "typing.List",
            "typing.Union",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Category",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "torch"
        ],
        "classes": [
            {
                "class_name": "ObjectPredictionList",
                "methods": [
                    "__init__",
                    "__getitem__",
                    "__setitem__",
                    "__len__",
                    "__str__",
                    "extend",
                    "totensor",
                    "tonumpy",
                    "tolist"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "__getitem__": [
                "isinstance",
                "tolist",
                "ObjectPredictionList",
                "map",
                "list",
                "NotImplementedError",
                "type"
            ],
            "__setitem__": [
                "isinstance",
                "tolist",
                "len",
                "ValueError",
                "enumerate",
                "NotImplementedError",
                "type"
            ],
            "__len__": [
                "len"
            ],
            "__str__": [
                "str"
            ],
            "extend": [
                "extend"
            ],
            "totensor": [
                "object_prediction_list_to_torch"
            ],
            "tonumpy": [
                "object_prediction_list_to_numpy"
            ],
            "tolist": [
                "len"
            ],
            "object_prediction_list_to_torch": [
                "len",
                "zeros",
                "enumerate",
                "tensor",
                "to_xyxy",
                "tolist"
            ],
            "object_prediction_list_to_numpy": [
                "len",
                "zeros",
                "enumerate",
                "array",
                "to_xyxy",
                "tolist"
            ],
            "calculate_box_union": [
                "array",
                "minimum",
                "maximum",
                "list",
                "concatenate"
            ],
            "calculate_area": [],
            "calculate_intersection_area": [
                "maximum",
                "minimum",
                "clip"
            ],
            "calculate_bbox_iou": [
                "array",
                "to_xyxy",
                "calculate_area",
                "calculate_intersection_area"
            ],
            "calculate_bbox_ios": [
                "array",
                "to_xyxy",
                "calculate_area",
                "calculate_intersection_area",
                "minimum"
            ],
            "has_match": [
                "calculate_bbox_iou",
                "calculate_bbox_ios",
                "ValueError"
            ],
            "get_merged_mask": [
                "logical_or",
                "Mask"
            ],
            "get_merged_score": [
                "max"
            ],
            "get_merged_bbox": [
                "to_xyxy",
                "BoundingBox",
                "calculate_box_union"
            ],
            "get_merged_category": [],
            "merge_object_prediction_pair": [
                "get_merged_bbox",
                "get_merged_score",
                "get_merged_category",
                "get_merged_mask",
                "ObjectPrediction",
                "to_xyxy"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/combine.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/combine.py",
        "imports": [
            "logging",
            "typing.List",
            "numpy",
            "collections.defaultdict",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.ObjectPredictionList",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.has_match",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.merge_object_prediction_pair",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "lsnms.nms"
        ],
        "classes": [
            {
                "class_name": "PostprocessPredictions",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "NMSPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "NMMPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "GreedyNMMPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "LSNMSPostprocess",
                "methods": [
                    "__call__"
                ]
            }
        ],
        "functions": {
            "batched_nms": [
                "squeeze",
                "zeros_like",
                "unique",
                "where",
                "nms",
                "argsort",
                "tolist"
            ],
            "nms": [
                "argsort",
                "len",
                "append",
                "maximum",
                "minimum",
                "ValueError"
            ],
            "batched_greedy_nmm": [
                "squeeze",
                "defaultdict",
                "unique",
                "where",
                "greedy_nmm",
                "tolist",
                "items",
                "dict"
            ],
            "greedy_nmm": [
                "argsort",
                "len",
                "append",
                "maximum",
                "minimum",
                "ValueError",
                "where",
                "tolist"
            ],
            "batched_nmm": [
                "squeeze",
                "unique",
                "where",
                "nmm",
                "tolist",
                "items"
            ],
            "nmm": [
                "argsort",
                "range",
                "len",
                "maximum",
                "minimum",
                "ValueError",
                "tolist",
                "append"
            ],
            "__init__": [],
            "__call__": [
                "NotImplementedError",
                "ObjectPredictionList",
                "totensor",
                "nms",
                "batched_nms",
                "tolist",
                "isinstance",
                "nmm",
                "batched_nmm",
                "items",
                "has_match",
                "merge_object_prediction_pair",
                "append",
                "tonumpy",
                "greedy_nmm",
                "batched_greedy_nmm",
                "ModuleNotFoundError",
                "warning",
                "astype"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/combine.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/combine.py",
        "imports": [
            "copy",
            "typing.List",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Category",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.calculate_area",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.calculate_box_union",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.calculate_intersection_area",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction"
        ],
        "classes": [
            {
                "class_name": "PostprocessPredictions",
                "methods": [
                    "__init__",
                    "_has_match",
                    "get_score_func",
                    "has_same_category_id",
                    "calculate_bbox_iou",
                    "calculate_bbox_ios",
                    "__call__"
                ]
            },
            {
                "class_name": "NMSPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "UnionMergePostprocess",
                "methods": [
                    "__call__",
                    "_merge_object_prediction_pair",
                    "_get_merged_category",
                    "_get_merged_bbox",
                    "_get_merged_score",
                    "_get_merged_mask"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "ValueError"
            ],
            "_has_match": [
                "calculate_match",
                "has_same_category_id"
            ],
            "get_score_func": [],
            "has_same_category_id": [],
            "calculate_bbox_iou": [
                "array",
                "to_xyxy",
                "calculate_area",
                "calculate_intersection_area"
            ],
            "calculate_bbox_ios": [
                "array",
                "to_xyxy",
                "calculate_area",
                "calculate_intersection_area",
                "minimum"
            ],
            "__call__": [
                "NotImplementedError",
                "deepcopy",
                "len",
                "sort",
                "_has_match",
                "append",
                "enumerate",
                "_merge_object_prediction_pair"
            ],
            "_merge_object_prediction_pair": [
                "_get_merged_bbox",
                "_get_merged_score",
                "_get_merged_category",
                "_get_merged_mask",
                "ObjectPrediction",
                "to_xyxy"
            ],
            "_get_merged_category": [],
            "_get_merged_bbox": [
                "to_xyxy",
                "BoundingBox",
                "calculate_box_union"
            ],
            "_get_merged_score": [
                "max"
            ],
            "_get_merged_mask": [
                "logical_or",
                "Mask"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov5_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov5_onnx.py",
        "imports": [
            "cv2",
            "numpy",
            "typing.List",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "anylabeling.services.auto_labeling.engines.build_onnx_engine.OnnxBaseModel",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Yolov5ONNX",
                "methods": [
                    "__init__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            },
            {
                "class_name": "Yolov5OnnxDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "OnnxBaseModel"
            ],
            "inference": [
                "preprocess",
                "get_ort_inference",
                "postprocess"
            ],
            "preprocess": [
                "get_input_shape",
                "resize",
                "transpose",
                "astype"
            ],
            "postprocess": [
                "get_input_shape",
                "range",
                "minMaxLoc",
                "append",
                "int",
                "array",
                "NMSBoxes"
            ],
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "Yolov5ONNX",
                "list",
                "values",
                "len"
            ],
            "perform_inference": [
                "inference"
            ],
            "num_categories": [],
            "has_mask": [],
            "category_names": [],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "enumerate",
                "zip",
                "int",
                "str",
                "max",
                "min",
                "warning",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolonas.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolonas.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "yaml.safe_load",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "super_gradients.training.models",
            "super_gradients.training.processing.processing.get_pretrained_processing_params"
        ],
        "classes": [
            {
                "class_name": "YoloNasDetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "isinstance",
                "TypeError",
                "ValueError",
                "open",
                "safe_load",
                "len",
                "__init__",
                "super"
            ],
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "to",
                "get",
                "set_model",
                "TypeError"
            ],
            "set_model": [
                "split",
                "Exception",
                "type",
                "get_pretrained_processing_params",
                "set_dataset_processing_params",
                "str",
                "enumerate"
            ],
            "perform_inference": [
                "ValueError",
                "list",
                "predict"
            ],
            "num_categories": [
                "len"
            ],
            "has_mask": [],
            "category_names": [],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "enumerate",
                "zip",
                "str",
                "int",
                "max",
                "min",
                "warning",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov8.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov8.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "ultralytics.YOLO"
        ],
        "classes": [
            {
                "class_name": "Yolov8DetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "category_names",
                    "num_categories",
                    "has_mask",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "YOLO",
                "to",
                "set_model",
                "TypeError"
            ],
            "set_model": [
                "str",
                "enumerate"
            ],
            "perform_inference": [
                "ValueError",
                "model"
            ],
            "category_names": [
                "values"
            ],
            "num_categories": [
                "len"
            ],
            "has_mask": [],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "enumerate",
                "numpy",
                "detach",
                "cpu",
                "int",
                "str",
                "max",
                "min",
                "warning",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/mmdet.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/mmdet.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Union",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bbox_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "mmdet.apis.det_inferencer.DetInferencer",
            "mmdet.utils.ConfigType",
            "mmengine.dataset.Compose",
            "mmengine.infer.infer.ModelType",
            "pycocotools.mask"
        ],
        "classes": [
            {
                "class_name": "DetInferencerWrapper",
                "methods": [
                    "__init__",
                    "__call__",
                    "_init_pipeline"
                ]
            },
            {
                "class_name": "MmdetDetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "ImportError"
            ],
            "__call__": [
                "preprocess",
                "forward",
                "postprocess",
                "extend"
            ],
            "_init_pipeline": [
                "tuple",
                "_get_transform_idx",
                "ValueError",
                "Compose"
            ],
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "DetInferencerWrapper",
                "set_model"
            ],
            "set_model": [
                "str",
                "enumerate"
            ],
            "perform_inference": [
                "ValueError",
                "isinstance",
                "model"
            ],
            "num_categories": [
                "len"
            ],
            "has_mask": [],
            "category_names": [
                "isinstance"
            ],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "enumerate",
                "len",
                "range",
                "str",
                "decode",
                "ValueError",
                "get_bbox_from_bool_mask",
                "max",
                "min",
                "warning",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/base.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/base.py",
        "imports": [
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Tuple",
            "typing.Union",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.is_available"
        ],
        "classes": [
            {
                "class_name": "DetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "set_device",
                    "unload_model",
                    "perform_inference",
                    "_create_object_prediction_list_from_original_predictions",
                    "_apply_category_remapping",
                    "convert_original_predictions",
                    "object_prediction_list",
                    "object_prediction_list_per_image",
                    "original_predictions"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "set_model",
                "load_model"
            ],
            "check_dependencies": [],
            "load_model": [
                "NotImplementedError"
            ],
            "set_model": [
                "NotImplementedError"
            ],
            "set_device": [
                "NotImplementedError"
            ],
            "unload_model": [],
            "perform_inference": [
                "NotImplementedError"
            ],
            "_create_object_prediction_list_from_original_predictions": [
                "NotImplementedError"
            ],
            "_apply_category_remapping": [
                "ValueError",
                "str"
            ],
            "convert_original_predictions": [
                "_create_object_prediction_list_from_original_predictions",
                "_apply_category_remapping"
            ],
            "object_prediction_list": [],
            "object_prediction_list_per_image": [],
            "original_predictions": []
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov5.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_package_minimum_version",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "yolov5",
            "yolov5",
            "packaging.version"
        ],
        "classes": [
            {
                "class_name": "Yolov5DetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "load",
                "set_model",
                "TypeError"
            ],
            "set_model": [
                "Exception",
                "type",
                "str",
                "enumerate"
            ],
            "perform_inference": [
                "ValueError",
                "model"
            ],
            "num_categories": [
                "len"
            ],
            "has_mask": [
                "parse"
            ],
            "category_names": [
                "check_package_minimum_version",
                "list",
                "values"
            ],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "enumerate",
                "numpy",
                "detach",
                "cpu",
                "int",
                "str",
                "max",
                "min",
                "warning",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/__init__.py",
        "imports": [
            ".base",
            ".detectron2",
            ".huggingface",
            ".mmdet",
            ".yolonas",
            ".yolov5"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov5sparse.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov5sparse.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_package_minimum_version",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "deepsparse.Pipeline"
        ],
        "classes": [
            {
                "class_name": "Yolov5SparseDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "create",
                "set_model",
                "TypeError"
            ],
            "set_model": [
                "str",
                "enumerate"
            ],
            "perform_inference": [
                "ValueError",
                "model"
            ],
            "num_categories": [],
            "category_names": [],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "enumerate",
                "zip",
                "int",
                "float",
                "str",
                "min",
                "warning",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/detectron2.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/detectron2.py",
        "imports": [
            "logging",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bbox_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "detectron2.config.get_cfg",
            "detectron2.data.MetadataCatalog",
            "detectron2.engine.DefaultPredictor",
            "detectron2.model_zoo.model_zoo"
        ],
        "classes": [
            {
                "class_name": "Detectron2DetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "perform_inference",
                    "num_categories",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "get_cfg",
                "get_config_file",
                "merge_from_file",
                "get_checkpoint_url",
                "print",
                "DefaultPredictor",
                "get",
                "str",
                "enumerate",
                "warning",
                "range",
                "list",
                "values"
            ],
            "perform_inference": [
                "RuntimeError",
                "isinstance",
                "model"
            ],
            "num_categories": [
                "len"
            ],
            "_create_object_prediction_list_from_original_predictions": [
                "isinstance",
                "ObjectPrediction",
                "tolist",
                "numpy",
                "cpu",
                "detach",
                "item",
                "str",
                "zip",
                "get_bbox_from_bool_mask"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov8_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov8_onnx.py",
        "imports": [
            "cv2",
            "numpy",
            "typing.List",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "anylabeling.services.auto_labeling.engines.build_onnx_engine.OnnxBaseModel",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Yolov8ONNX",
                "methods": [
                    "__init__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            },
            {
                "class_name": "Yolov8OnnxDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "OnnxBaseModel"
            ],
            "inference": [
                "preprocess",
                "get_ort_inference",
                "postprocess"
            ],
            "preprocess": [
                "get_input_shape",
                "resize",
                "transpose",
                "astype"
            ],
            "postprocess": [
                "transpose",
                "get_input_shape",
                "range",
                "minMaxLoc",
                "append",
                "int",
                "array",
                "NMSBoxes"
            ],
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "Yolov8ONNX",
                "list",
                "values",
                "len"
            ],
            "perform_inference": [
                "inference"
            ],
            "num_categories": [],
            "has_mask": [],
            "category_names": [],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "enumerate",
                "zip",
                "int",
                "str",
                "max",
                "min",
                "warning",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/huggingface.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/huggingface.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Tuple",
            "typing.Union",
            "numpy",
            "pybboxes.functional",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.ensure_package_minimum_version",
            "transformers.AutoModelForObjectDetection",
            "transformers.AutoProcessor",
            "torch",
            "torch"
        ],
        "classes": [
            {
                "class_name": "HuggingfaceDetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "processor",
                    "image_shapes",
                    "num_categories",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "get_valid_predictions",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "check_dependencies": [
                "check_requirements",
                "ensure_package_minimum_version"
            ],
            "processor": [],
            "image_shapes": [],
            "num_categories": [],
            "load_model": [
                "from_pretrained",
                "set_model"
            ],
            "set_model": [
                "ValueError",
                "to"
            ],
            "perform_inference": [
                "RuntimeError",
                "no_grad",
                "processor",
                "to",
                "hasattr",
                "model",
                "isinstance"
            ],
            "get_valid_predictions": [
                "softmax",
                "max",
                "argmax",
                "where",
                "logical_and"
            ],
            "_create_object_prediction_list_from_original_predictions": [
                "fix_shift_amount_list",
                "fix_full_shape_list",
                "range",
                "get_valid_predictions",
                "len",
                "item",
                "tolist",
                "list",
                "convert_bbox",
                "max",
                "min",
                "ObjectPrediction",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/torchvision.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/torchvision.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "torch",
            "sahi.utils.torchvision.MODEL_NAME_TO_CONSTRUCTOR",
            "yaml",
            "sahi.utils.torchvision.COCO_CLASSES",
            "sahi.utils.torch.to_float_tensor"
        ],
        "classes": [
            {
                "class_name": "TorchVisionDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": {
            "check_dependencies": [
                "check_requirements"
            ],
            "load_model": [
                "open",
                "safe_load",
                "RuntimeError",
                "get",
                "warning",
                "load_state_dict",
                "load",
                "TypeError",
                "set_model"
            ],
            "set_model": [
                "check_requirements",
                "eval",
                "to",
                "str",
                "range",
                "len"
            ],
            "perform_inference": [
                "min",
                "max",
                "to_float_tensor",
                "to",
                "model"
            ],
            "num_categories": [
                "len"
            ],
            "has_mask": [],
            "category_names": [
                "list",
                "values"
            ],
            "_create_object_prediction_list_from_original_predictions": [
                "isinstance",
                "numpy",
                "detach",
                "cpu",
                "where",
                "list",
                "get",
                "range",
                "len",
                "array",
                "ObjectPrediction",
                "int",
                "str",
                "append"
            ]
        }
    },
    "anylabeling/services/auto_labeling/pose/rtmo_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/pose/rtmo_onnx.py",
        "imports": [
            "typing.List",
            "typing.Tuple",
            "os",
            "cv2",
            "numpy",
            "engines.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "RTMO",
                "methods": [
                    "__init__",
                    "__call__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "OnnxBaseModel",
                "get_input_shape",
                "isinstance"
            ],
            "__call__": [
                "preprocess",
                "inference",
                "postprocess"
            ],
            "inference": [
                "get_ort_inference"
            ],
            "preprocess": [
                "len",
                "ones",
                "min",
                "astype",
                "resize",
                "int",
                "array",
                "transpose",
                "ascontiguousarray"
            ],
            "postprocess": []
        }
    },
    "anylabeling/services/auto_labeling/pose/dwpose_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/pose/dwpose_onnx.py",
        "imports": [
            "typing.List",
            "typing.Tuple",
            "cv2",
            "numpy"
        ],
        "classes": [],
        "functions": {
            "preprocess": [
                "len",
                "range",
                "array",
                "bbox_xyxy2cs",
                "top_down_affine",
                "append"
            ],
            "inference": [
                "range",
                "len",
                "transpose",
                "getUnconnectedOutLayersNames",
                "setInput",
                "forward",
                "append"
            ],
            "postprocess": [
                "range",
                "len",
                "decode",
                "append",
                "array"
            ],
            "bbox_xyxy2cs": [
                "hsplit",
                "hstack"
            ],
            "_fix_aspect_ratio": [
                "hsplit",
                "where",
                "hstack"
            ],
            "_rotate_point": [
                "sin",
                "cos",
                "array"
            ],
            "_get_3rd_point": [],
            "get_warp_matrix": [
                "array",
                "deg2rad",
                "_rotate_point",
                "zeros",
                "_get_3rd_point",
                "getAffineTransform",
                "float32"
            ],
            "top_down_affine": [
                "int",
                "_fix_aspect_ratio",
                "get_warp_matrix",
                "warpAffine"
            ],
            "get_simcc_maximum": [
                "reshape",
                "argmax",
                "astype",
                "stack",
                "amax"
            ],
            "decode": [
                "get_simcc_maximum"
            ],
            "inference_pose": [
                "preprocess",
                "inference",
                "postprocess"
            ]
        }
    },
    "anylabeling/services/auto_labeling/pose/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/pose/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/__base__/sam2.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/sam2.py",
        "imports": [
            "typing.Any",
            "typing.List",
            "typing.Tuple",
            "typing.Union",
            "cv2",
            "numpy",
            "onnxruntime",
            "numpy.ndarray"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything2ONNX",
                "methods": [
                    "__init__",
                    "encode",
                    "predict_masks",
                    "transform_masks"
                ]
            },
            {
                "class_name": "SAM2ImageEncoder",
                "methods": [
                    "__init__",
                    "__call__",
                    "encode_image",
                    "prepare_input",
                    "forward_encoder",
                    "process_output",
                    "get_input_details",
                    "get_output_details"
                ]
            },
            {
                "class_name": "SAM2ImageDecoder",
                "methods": [
                    "__init__",
                    "__call__",
                    "predict",
                    "prepare_inputs",
                    "prepare_points",
                    "forward_decoder",
                    "process_output",
                    "set_image_size",
                    "get_input_details",
                    "get_output_details"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "SAM2ImageEncoder",
                "SAM2ImageDecoder",
                "lower",
                "SessionOptions",
                "InferenceSession",
                "get_input_details",
                "get_output_details"
            ],
            "encode": [
                "encoder"
            ],
            "predict_masks": [
                "append",
                "array",
                "set_image_size",
                "decoder"
            ],
            "transform_masks": [
                "range",
                "warpAffine",
                "append",
                "array"
            ],
            "__call__": [
                "encode_image",
                "predict"
            ],
            "encode_image": [
                "prepare_input",
                "forward_encoder",
                "process_output"
            ],
            "prepare_input": [
                "resize",
                "array",
                "transpose",
                "astype"
            ],
            "forward_encoder": [
                "run"
            ],
            "process_output": [
                "squeeze",
                "argmax",
                "resize",
                "array"
            ],
            "get_input_details": [
                "get_inputs",
                "range",
                "len"
            ],
            "get_output_details": [
                "get_outputs",
                "range",
                "len"
            ],
            "predict": [
                "prepare_inputs",
                "forward_decoder",
                "process_output"
            ],
            "prepare_inputs": [
                "prepare_points",
                "zeros",
                "array"
            ],
            "prepare_points": [
                "isinstance",
                "max",
                "zeros",
                "len",
                "ones",
                "enumerate",
                "zip",
                "astype"
            ],
            "forward_decoder": [
                "run",
                "range",
                "len"
            ],
            "set_image_size": []
        }
    },
    "anylabeling/services/auto_labeling/__base__/yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/yolo.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "typing.Union",
            "typing.Tuple",
            "typing.List",
            "argparse.Namespace",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "engines.OnnxBaseModel",
            "types.AutoLabelingResult",
            "trackers.BOTSORT",
            "trackers.BYTETracker",
            "utils.letterbox",
            "utils.scale_boxes",
            "utils.scale_coords",
            "utils.point_in_bbox",
            "utils.masks2segments",
            "utils.xyxy2xywh",
            "utils.xywhr2xyxyxyxy",
            "utils.non_max_suppression_v5",
            "utils.non_max_suppression_v8",
            "utils.calculate_rotation_theta",
            "engines.DnnBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLO",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "set_auto_labeling_reset_tracker",
                    "inference",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "create_rectangle_shape",
                    "create_polygon_shape",
                    "create_keypoint_shape",
                    "create_obb_shape",
                    "make_grid",
                    "scale_grid",
                    "process_mask",
                    "preprocess_rtdetr",
                    "postprocess_rtdetr",
                    "postprocess_v10",
                    "crop_mask_np",
                    "rescale_coords_v10",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "get",
                "lower",
                "DnnBaseModel",
                "OnnxBaseModel",
                "get_input_shape",
                "isinstance",
                "len",
                "zeros",
                "array",
                "reshape",
                "asarray",
                "enumerate",
                "Namespace",
                "BYTETracker",
                "BOTSORT",
                "error",
                "items",
                "list",
                "keys",
                "get_metadata_info",
                "eval",
                "max",
                "values"
            ],
            "set_auto_labeling_conf": [],
            "set_auto_labeling_iou": [],
            "set_auto_labeling_preserve_existing_annotations_state": [],
            "set_auto_labeling_reset_tracker": [
                "reset"
            ],
            "inference": [
                "get_dnn_inference",
                "isinstance",
                "get_ort_inference"
            ],
            "preprocess": [
                "resize",
                "letterbox",
                "min",
                "transpose",
                "astype",
                "ascontiguousarray"
            ],
            "postprocess": [
                "scale_grid",
                "non_max_suppression_v5",
                "non_max_suppression_v8",
                "postprocess_v10",
                "postprocess_rtdetr",
                "len",
                "enumerate",
                "size",
                "process_mask",
                "scale_boxes",
                "concatenate",
                "reshape",
                "scale_coords"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess_rtdetr",
                "preprocess",
                "inference",
                "postprocess",
                "range",
                "len",
                "scale_coords",
                "masks2segments",
                "update",
                "flatten",
                "xyxy2xywh",
                "enumerate",
                "zip",
                "create_rectangle_shape",
                "append",
                "create_polygon_shape",
                "str",
                "int",
                "point_in_bbox",
                "create_keypoint_shape",
                "create_obb_shape",
                "AutoLabelingResult"
            ],
            "create_rectangle_shape": [
                "astype",
                "Shape",
                "add_point",
                "QPointF",
                "str",
                "int",
                "float"
            ],
            "create_polygon_shape": [
                "Shape",
                "add_point",
                "QPointF",
                "int",
                "str",
                "float"
            ],
            "create_keypoint_shape": [
                "Shape",
                "add_point",
                "QPointF",
                "int",
                "float"
            ],
            "create_obb_shape": [
                "xywhr2xyxyxyxy",
                "calculate_rotation_theta",
                "Shape",
                "add_point",
                "QPointF",
                "str",
                "int",
                "float"
            ],
            "make_grid": [
                "meshgrid",
                "arange",
                "astype",
                "reshape",
                "stack"
            ],
            "scale_grid": [
                "range",
                "int",
                "make_grid",
                "tile",
                "repeat"
            ],
            "process_mask": [
                "exp",
                "astype",
                "dot",
                "reshape",
                "copy",
                "crop_mask_np",
                "squeeze",
                "resize",
                "expand_dims",
                "transpose"
            ],
            "preprocess_rtdetr": [
                "resize",
                "astype",
                "transpose",
                "expand_dims",
                "ascontiguousarray"
            ],
            "postprocess_rtdetr": [
                "len",
                "range",
                "append",
                "array",
                "_bbox_cxcywh_to_xyxy",
                "max",
                "argmax",
                "_rescale_boxes",
                "zip"
            ],
            "_rescale_boxes": [
                "array",
                "floor",
                "clip",
                "ceil",
                "range",
                "len",
                "append"
            ],
            "_bbox_cxcywh_to_xyxy": [
                "append"
            ],
            "postprocess_v10": [
                "astype",
                "isin"
            ],
            "crop_mask_np": [
                "hsplit",
                "arange"
            ],
            "rescale_coords_v10": [
                "min",
                "clip"
            ],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/__base__/rtmdet.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/rtmdet.py",
        "imports": [
            "typing.List",
            "typing.Tuple",
            "os",
            "cv2",
            "numpy",
            "engines.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "RTMDet",
                "methods": [
                    "__init__",
                    "__call__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "OnnxBaseModel",
                "get_input_shape",
                "isinstance"
            ],
            "__call__": [
                "preprocess",
                "inference",
                "postprocess"
            ],
            "inference": [
                "get_ort_inference"
            ],
            "preprocess": [
                "len",
                "ones",
                "min",
                "astype",
                "resize",
                "int",
                "array",
                "transpose",
                "ascontiguousarray"
            ],
            "postprocess": [
                "NotImplementedError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/__base__/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/__base__/sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/sam.py",
        "imports": [
            "cv2",
            "numpy",
            "onnxruntime",
            "typing.Tuple",
            "copy.deepcopy"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks",
                    "get_approx_contours"
                ]
            },
            {
                "class_name": "EdgeSAMONNX",
                "methods": [
                    "__init__",
                    "run_encoder",
                    "get_preprocess_shape",
                    "transform",
                    "encode",
                    "get_input_points",
                    "calculate_stability_score",
                    "apply_coords",
                    "apply_boxes",
                    "postprocess_masks",
                    "run_decoder",
                    "predict_masks"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "get_available_providers",
                "InferenceSession",
                "get_inputs"
            ],
            "get_input_points": [
                "append",
                "array",
                "astype"
            ],
            "run_encoder": [
                "get_ort_inference",
                "run"
            ],
            "get_preprocess_shape": [
                "max",
                "int"
            ],
            "apply_coords": [
                "get_preprocess_shape",
                "astype",
                "deepcopy"
            ],
            "run_decoder": [
                "get_input_points",
                "concatenate",
                "array",
                "astype",
                "apply_coords",
                "ones",
                "matmul",
                "zeros",
                "get_ort_inference",
                "inv",
                "transform_masks",
                "ValueError",
                "isinstance",
                "expand_dims",
                "run",
                "calculate_stability_score",
                "argmax",
                "get_preprocess_shape",
                "postprocess_masks"
            ],
            "transform_masks": [
                "range",
                "warpAffine",
                "append",
                "array"
            ],
            "encode": [
                "min",
                "array",
                "warpAffine",
                "run_encoder",
                "astype",
                "transform"
            ],
            "predict_masks": [
                "run_decoder"
            ],
            "get_approx_contours": [
                "astype",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "append",
                "len",
                "contourArea",
                "zip",
                "mean"
            ],
            "transform": [
                "get_preprocess_shape",
                "resize",
                "transpose",
                "ascontiguousarray",
                "expand_dims"
            ],
            "calculate_stability_score": [
                "sum"
            ],
            "apply_boxes": [
                "apply_coords",
                "reshape"
            ],
            "postprocess_masks": [
                "resize"
            ]
        }
    },
    "anylabeling/services/auto_labeling/__base__/clip.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/clip.py",
        "imports": [
            "os",
            "cv2",
            "collections",
            "unicodedata",
            "six",
            "numpy",
            "typing.List",
            "functools.lru_cache",
            "engines.OnnxBaseModel",
            "anylabeling.views.labeling.logger.logger",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "ChineseClipONNX",
                "methods": [
                    "__init__",
                    "__call__",
                    "txt_pipeline",
                    "img_pipeline",
                    "normalize",
                    "image_preprocess",
                    "postprocess",
                    "tokenize"
                ]
            },
            {
                "class_name": "BasicTokenizer",
                "methods": [
                    "__init__",
                    "tokenize",
                    "_run_strip_accents",
                    "_run_split_on_punc",
                    "_tokenize_chinese_chars",
                    "_is_chinese_char",
                    "_clean_text"
                ]
            },
            {
                "class_name": "WordpieceTokenizer",
                "methods": [
                    "__init__",
                    "tokenize"
                ]
            },
            {
                "class_name": "FullTokenizer",
                "methods": [
                    "__init__",
                    "tokenize",
                    "convert_tokens_to_ids",
                    "convert_ids_to_tokens",
                    "convert_tokens_to_string",
                    "vocab_size"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "OnnxBaseModel",
                "FullTokenizer",
                "default_vocab",
                "load_vocab",
                "items",
                "BasicTokenizer",
                "WordpieceTokenizer"
            ],
            "__call__": [
                "txt_pipeline",
                "img_pipeline",
                "dot",
                "exp",
                "sum"
            ],
            "txt_pipeline": [
                "tokenize",
                "range",
                "len",
                "expand_dims",
                "get_ort_inference",
                "append",
                "squeeze",
                "stack",
                "postprocess"
            ],
            "img_pipeline": [
                "image_preprocess",
                "get_ort_inference",
                "postprocess"
            ],
            "normalize": [
                "isinstance",
                "array",
                "max",
                "abs",
                "divide",
                "subtract",
                "astype",
                "transpose"
            ],
            "image_preprocess": [
                "isinstance",
                "resize",
                "cvtColor",
                "normalize",
                "expand_dims"
            ],
            "postprocess": [
                "norm"
            ],
            "tokenize": [
                "isinstance",
                "convert_tokens_to_ids",
                "tokenize",
                "append",
                "zeros",
                "len",
                "enumerate",
                "array",
                "convert_to_unicode",
                "_clean_text",
                "_tokenize_chinese_chars",
                "whitespace_tokenize",
                "lower",
                "_run_strip_accents",
                "extend",
                "_run_split_on_punc",
                "join",
                "list"
            ],
            "default_vocab": [
                "path",
                "str",
                "error",
                "lru_cache"
            ],
            "convert_to_unicode": [
                "isinstance",
                "decode",
                "ValueError",
                "type"
            ],
            "load_vocab": [
                "OrderedDict",
                "open",
                "convert_to_unicode",
                "readline",
                "strip"
            ],
            "whitespace_tokenize": [
                "strip",
                "split"
            ],
            "_is_punctuation": [
                "ord",
                "category",
                "startswith"
            ],
            "_is_control": [
                "category"
            ],
            "_is_whitespace": [
                "category"
            ],
            "convert_by_vocab": [
                "append"
            ],
            "convert_tokens_to_ids": [
                "convert_by_vocab"
            ],
            "convert_ids_to_tokens": [
                "convert_by_vocab"
            ],
            "_run_strip_accents": [
                "normalize",
                "category",
                "append",
                "join"
            ],
            "_run_split_on_punc": [
                "list",
                "len",
                "_is_punctuation",
                "append",
                "join"
            ],
            "_tokenize_chinese_chars": [
                "ord",
                "_is_chinese_char",
                "append",
                "join"
            ],
            "_is_chinese_char": [],
            "_clean_text": [
                "ord",
                "_is_control",
                "_is_whitespace",
                "append",
                "join"
            ],
            "convert_tokens_to_string": [
                "strip",
                "replace",
                "join",
                "clean_up_tokenization"
            ],
            "clean_up_tokenization": [
                "replace"
            ],
            "vocab_size": [
                "len"
            ]
        }
    },
    "anylabeling/services/auto_labeling/__base__/upn.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/upn.py",
        "imports": [
            "copy",
            "typing.Dict",
            "typing.List",
            "typing.Union",
            "numpy",
            "torch",
            "mmengine.Config",
            "PIL.Image",
            "torchvision.ops.nms",
            "chatrex.upn.transforms.transform",
            "chatrex.upn.build_architecture",
            "chatrex.upn.models.module.nested_tensor_from_tensor_list"
        ],
        "classes": [
            {
                "class_name": "UPNWrapper",
                "methods": [
                    "__init__",
                    "inference",
                    "_inference",
                    "construct_input",
                    "transform_image",
                    "postprocess",
                    "filter"
                ]
            }
        ],
        "functions": {
            "build_model": [
                "fromfile",
                "build_architecture",
                "load",
                "load_state_dict"
            ],
            "__init__": [
                "build_model",
                "eval",
                "to"
            ],
            "inference": [
                "isinstance",
                "construct_input",
                "_inference",
                "postprocess"
            ],
            "_inference": [
                "nested_tensor_from_tensor_list",
                "to",
                "no_grad",
                "model"
            ],
            "construct_input": [
                "enumerate",
                "isinstance",
                "open",
                "ValueError",
                "append",
                "transform_image"
            ],
            "transform_image": [
                "Compose",
                "RandomResize",
                "ToTensor",
                "Normalize",
                "transform"
            ],
            "postprocess": [
                "cpu",
                "sigmoid",
                "enumerate",
                "append",
                "deepcopy",
                "clone",
                "stack",
                "numpy",
                "range",
                "len",
                "argsort",
                "squeeze",
                "dict"
            ],
            "filter": [
                "zip",
                "array",
                "numpy",
                "len",
                "tensor",
                "nms",
                "arange",
                "astype",
                "argsort",
                "round",
                "append",
                "tolist"
            ]
        }
    },
    "anylabeling/services/auto_labeling/__base__/ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/ram.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs.ram"
        ],
        "classes": [
            {
                "class_name": "RecognizeAnything",
                "methods": [
                    "__init__",
                    "preprocess",
                    "inference",
                    "postprocess",
                    "predict_shapes",
                    "load_tag_list",
                    "get_results",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_model_abs_path",
                "isfile",
                "FileNotFoundError",
                "translate",
                "OnnxBaseModel",
                "get_input_shape",
                "get",
                "load_tag_list",
                "index",
                "tolist",
                "enumerate"
            ],
            "preprocess": [
                "astype",
                "resize",
                "array",
                "transpose",
                "expand_dims"
            ],
            "inference": [
                "get_ort_inference"
            ],
            "postprocess": [
                "range",
                "argwhere",
                "squeeze",
                "append",
                "join"
            ],
            "predict_shapes": [
                "qt_img_to_rgb_cv_img",
                "warning",
                "preprocess",
                "inference",
                "postprocess",
                "get_results",
                "AutoLabelingResult"
            ],
            "load_tag_list": [
                "path",
                "splitlines",
                "read_text",
                "array"
            ],
            "get_results": [],
            "unload": []
        }
    },
    "anylabeling/services/auto_labeling/engines/build_dnn_engine.py": {
        "file_name": "/anylabeling/services/auto_labeling/engines/build_dnn_engine.py",
        "imports": [
            "cv2"
        ],
        "classes": [
            {
                "class_name": "DnnBaseModel",
                "methods": [
                    "__init__",
                    "get_dnn_inference"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "readNet",
                "lower",
                "setPreferableBackend",
                "setPreferableTarget"
            ],
            "get_dnn_inference": [
                "setInput",
                "forward",
                "getUnconnectedOutLayersNames",
                "squeeze"
            ]
        }
    },
    "anylabeling/services/auto_labeling/engines/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/engines/__init__.py",
        "imports": [
            "build_onnx_engine.OnnxBaseModel",
            "build_dnn_engine.DnnBaseModel"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/engines/build_onnx_engine.py": {
        "file_name": "/anylabeling/services/auto_labeling/engines/build_onnx_engine.py",
        "imports": [
            "os",
            "onnx",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name",
                    "get_metadata_info"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "SessionOptions",
                "int",
                "lower",
                "InferenceSession"
            ],
            "get_ort_inference": [
                "get_input_name",
                "run",
                "squeeze"
            ],
            "get_input_name": [
                "get_inputs"
            ],
            "get_input_shape": [
                "get_inputs"
            ],
            "get_output_name": [
                "get_outputs"
            ],
            "get_metadata_info": [
                "load"
            ]
        }
    },
    "anylabeling/services/auto_labeling/trackers/basetrack.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/basetrack.py",
        "imports": [
            "collections.OrderedDict",
            "numpy"
        ],
        "classes": [
            {
                "class_name": "TrackState",
                "methods": []
            },
            {
                "class_name": "BaseTrack",
                "methods": [
                    "__init__",
                    "end_frame",
                    "next_id",
                    "activate",
                    "predict",
                    "update",
                    "mark_lost",
                    "mark_removed",
                    "reset_id"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "OrderedDict"
            ],
            "end_frame": [],
            "next_id": [],
            "activate": [],
            "predict": [],
            "update": [],
            "mark_lost": [],
            "mark_removed": [],
            "reset_id": []
        }
    },
    "anylabeling/services/auto_labeling/trackers/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/__init__.py",
        "imports": [
            "bot_sort.BOTSORT",
            "byte_tracker.BYTETracker"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/trackers/byte_tracker.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/byte_tracker.py",
        "imports": [
            "numpy",
            "basetrack.BaseTrack",
            "basetrack.TrackState",
            "utils.matching",
            "utils.kalman_filter.KalmanFilterXYAH"
        ],
        "classes": [
            {
                "class_name": "STrack",
                "methods": [
                    "__init__",
                    "predict",
                    "multi_predict",
                    "multi_gmc",
                    "activate",
                    "re_activate",
                    "update",
                    "convert_coords",
                    "tlwh",
                    "xyxy",
                    "tlwh_to_xyah",
                    "xywh",
                    "xywha",
                    "result",
                    "__repr__"
                ]
            },
            {
                "class_name": "BYTETracker",
                "methods": [
                    "__init__",
                    "update",
                    "get_kalmanfilter",
                    "init_track",
                    "get_dists",
                    "multi_predict",
                    "reset_id",
                    "reset",
                    "joint_stracks",
                    "sub_stracks",
                    "remove_duplicate_stracks"
                ]
            }
        ],
        "functions": {
            "xywh2ltwh": [
                "copy"
            ],
            "__init__": [
                "__init__",
                "super",
                "len",
                "asarray",
                "xywh2ltwh",
                "int",
                "get_kalmanfilter",
                "reset_id"
            ],
            "predict": [
                "copy",
                "predict"
            ],
            "multi_predict": [
                "len",
                "asarray",
                "copy",
                "enumerate",
                "multi_predict",
                "zip"
            ],
            "multi_gmc": [
                "eye",
                "len",
                "asarray",
                "copy",
                "kron",
                "enumerate",
                "zip",
                "dot",
                "transpose"
            ],
            "activate": [
                "next_id",
                "initiate",
                "convert_coords"
            ],
            "re_activate": [
                "update",
                "convert_coords",
                "next_id"
            ],
            "update": [
                "update",
                "convert_coords",
                "concatenate",
                "reshape",
                "arange",
                "len",
                "init_track",
                "append",
                "joint_stracks",
                "multi_predict",
                "hasattr",
                "apply",
                "multi_gmc",
                "get_dists",
                "linear_assignment",
                "re_activate",
                "iou_distance",
                "mark_lost",
                "mark_removed",
                "activate",
                "sub_stracks",
                "extend",
                "remove_duplicate_stracks",
                "asarray"
            ],
            "convert_coords": [
                "tlwh_to_xyah"
            ],
            "tlwh": [
                "copy"
            ],
            "xyxy": [
                "copy"
            ],
            "tlwh_to_xyah": [
                "copy",
                "asarray"
            ],
            "xywh": [
                "copy",
                "asarray"
            ],
            "xywha": [
                "print",
                "concatenate"
            ],
            "result": [
                "tolist"
            ],
            "__repr__": [],
            "get_kalmanfilter": [
                "KalmanFilterXYAH"
            ],
            "init_track": [
                "len",
                "STrack",
                "zip"
            ],
            "get_dists": [
                "iou_distance",
                "fuse_score"
            ],
            "reset_id": [
                "reset_id"
            ],
            "reset": [
                "get_kalmanfilter",
                "reset_id"
            ],
            "joint_stracks": [
                "append",
                "get"
            ],
            "sub_stracks": [],
            "remove_duplicate_stracks": [
                "iou_distance",
                "where",
                "zip",
                "append",
                "enumerate"
            ]
        }
    },
    "anylabeling/services/auto_labeling/trackers/bot_sort.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/bot_sort.py",
        "imports": [
            "collections.deque",
            "numpy",
            "basetrack.TrackState",
            "byte_tracker.BYTETracker",
            "byte_tracker.STrack",
            "utils.matching",
            "utils.gmc.GMC",
            "utils.kalman_filter.KalmanFilterXYWH"
        ],
        "classes": [
            {
                "class_name": "BOTrack",
                "methods": [
                    "__init__",
                    "update_features",
                    "predict",
                    "re_activate",
                    "update",
                    "tlwh",
                    "multi_predict",
                    "convert_coords",
                    "tlwh_to_xywh"
                ]
            },
            {
                "class_name": "BOTSORT",
                "methods": [
                    "__init__",
                    "get_kalmanfilter",
                    "init_track",
                    "get_dists",
                    "multi_predict",
                    "reset"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "update_features",
                "deque",
                "GMC"
            ],
            "update_features": [
                "norm",
                "append"
            ],
            "predict": [
                "copy",
                "predict"
            ],
            "re_activate": [
                "update_features",
                "re_activate",
                "super"
            ],
            "update": [
                "update_features",
                "update",
                "super"
            ],
            "tlwh": [
                "copy"
            ],
            "multi_predict": [
                "len",
                "asarray",
                "copy",
                "enumerate",
                "multi_predict",
                "zip"
            ],
            "convert_coords": [
                "tlwh_to_xywh"
            ],
            "tlwh_to_xywh": [
                "copy",
                "asarray"
            ],
            "get_kalmanfilter": [
                "KalmanFilterXYWH"
            ],
            "init_track": [
                "len",
                "inference",
                "BOTrack",
                "zip"
            ],
            "get_dists": [
                "iou_distance",
                "fuse_score",
                "embedding_distance",
                "minimum"
            ],
            "reset": [
                "reset",
                "super",
                "reset_params"
            ]
        }
    },
    "anylabeling/services/auto_labeling/trackers/utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_labeling/trackers/utils/kalman_filter.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/kalman_filter.py",
        "imports": [
            "numpy",
            "scipy.linalg"
        ],
        "classes": [
            {
                "class_name": "KalmanFilterXYAH",
                "methods": [
                    "__init__",
                    "initiate",
                    "predict",
                    "project",
                    "multi_predict",
                    "update",
                    "gating_distance"
                ]
            },
            {
                "class_name": "KalmanFilterXYWH",
                "methods": [
                    "initiate",
                    "predict",
                    "project",
                    "multi_predict",
                    "update"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "eye",
                "range"
            ],
            "initiate": [
                "zeros_like",
                "diag",
                "square"
            ],
            "predict": [
                "diag",
                "square",
                "dot",
                "multi_dot"
            ],
            "project": [
                "diag",
                "square",
                "dot",
                "multi_dot"
            ],
            "multi_predict": [
                "ones_like",
                "square",
                "diag",
                "range",
                "len",
                "asarray",
                "dot",
                "transpose"
            ],
            "update": [
                "project",
                "cho_factor",
                "cho_solve",
                "dot",
                "multi_dot",
                "update",
                "super"
            ],
            "gating_distance": [
                "project",
                "sum",
                "cholesky",
                "solve_triangular",
                "ValueError"
            ]
        }
    },
    "anylabeling/services/auto_labeling/trackers/utils/matching.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/matching.py",
        "imports": [
            "numpy",
            "scipy",
            "scipy.spatial.distance.cdist",
            "lap"
        ],
        "classes": [],
        "functions": {
            "bbox_ioa": [
                "clip",
                "minimum",
                "maximum"
            ],
            "_get_covariance_matrix": [
                "concatenate",
                "split",
                "cos",
                "sin"
            ],
            "batch_probiou": [
                "split",
                "squeeze",
                "_get_covariance_matrix",
                "sqrt",
                "clip",
                "log",
                "exp"
            ],
            "linear_assignment": [
                "empty",
                "tuple",
                "range",
                "lapjv",
                "enumerate",
                "where",
                "linear_sum_assignment",
                "asarray",
                "len",
                "list",
                "arange",
                "set"
            ],
            "iou_distance": [
                "isinstance",
                "zeros",
                "len",
                "batch_probiou",
                "ascontiguousarray",
                "bbox_ioa"
            ],
            "embedding_distance": [
                "zeros",
                "len",
                "asarray",
                "maximum",
                "cdist"
            ],
            "fuse_score": [
                "array",
                "repeat",
                "expand_dims"
            ]
        }
    },
    "anylabeling/services/auto_labeling/trackers/utils/gmc.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/gmc.py",
        "imports": [
            "copy",
            "cv2",
            "numpy"
        ],
        "classes": [
            {
                "class_name": "GMC",
                "methods": [
                    "__init__",
                    "apply",
                    "applyEcc",
                    "applyFeatures",
                    "applySparseOptFlow",
                    "reset_params"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "max",
                "FastFeatureDetector_create",
                "ORB_create",
                "BFMatcher",
                "SIFT_create",
                "dict",
                "ValueError"
            ],
            "apply": [
                "applyFeatures",
                "applyEcc",
                "applySparseOptFlow",
                "eye"
            ],
            "applyEcc": [
                "cvtColor",
                "eye",
                "GaussianBlur",
                "resize",
                "copy",
                "findTransformECC",
                "print"
            ],
            "applyFeatures": [
                "cvtColor",
                "eye",
                "resize",
                "zeros_like",
                "int",
                "astype",
                "detect",
                "compute",
                "copy",
                "knnMatch",
                "array",
                "len",
                "abs",
                "append",
                "mean",
                "std",
                "range",
                "estimateAffinePartial2D",
                "print"
            ],
            "applySparseOptFlow": [
                "cvtColor",
                "eye",
                "resize",
                "goodFeaturesToTrack",
                "copy",
                "calcOpticalFlowPyrLK",
                "range",
                "len",
                "append",
                "array",
                "estimateAffinePartial2D",
                "print"
            ],
            "reset_params": []
        }
    },
    "anylabeling/services/auto_training/__init__.py": {
        "file_name": "/anylabeling/services/auto_training/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/services/auto_training/ultralytics/utils.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/utils.py",
        "imports": [
            "os",
            "json",
            "importlib.metadata",
            "packaging.specifiers.SpecifierSet",
            "typing.List",
            "typing.Dict",
            "config.TASK_SHAPE_MAPPINGS"
        ],
        "classes": [],
        "functions": {
            "check_package_installed": [
                "__import__",
                "version",
                "SpecifierSet"
            ],
            "get_label_infos": [
                "range",
                "len",
                "split",
                "join",
                "splitext",
                "exists",
                "open",
                "load",
                "get",
                "dict",
                "zip",
                "sorted"
            ],
            "get_task_valid_images": [
                "split",
                "join",
                "splitext",
                "exists",
                "open",
                "load",
                "get",
                "any"
            ],
            "get_statistics_table_data": [
                "get_label_infos",
                "range",
                "len",
                "items",
                "append",
                "sum",
                "str",
                "zip"
            ]
        }
    },
    "anylabeling/services/auto_training/ultralytics/trainer.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/trainer.py",
        "imports": [
            "os",
            "signal",
            "shutil",
            "subprocess",
            "time",
            "threading",
            "io.StringIO",
            "typing.Dict",
            "typing.Tuple",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal",
            "config.SETTINGS_CONFIG_PATH",
            "sys"
        ],
        "classes": [
            {
                "class_name": "TrainingEventRedirector",
                "methods": [
                    "__init__",
                    "emit_training_event"
                ]
            },
            {
                "class_name": "TrainingLogRedirector",
                "methods": [
                    "__init__",
                    "write",
                    "flush"
                ]
            },
            {
                "class_name": "TrainingManager",
                "methods": [
                    "__init__",
                    "notify_callbacks",
                    "start_training",
                    "stop_training"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "StringIO",
                "Event"
            ],
            "emit_training_event": [
                "emit"
            ],
            "write": [
                "strip",
                "emit"
            ],
            "flush": [],
            "notify_callbacks": [
                "callback"
            ],
            "start_training": [
                "get",
                "clear",
                "str",
                "pop",
                "join",
                "makedirs",
                "dirname",
                "open",
                "write",
                "Thread",
                "start"
            ],
            "run_training": [
                "notify_callbacks",
                "Popen",
                "is_set",
                "terminate",
                "wait",
                "kill",
                "killpg",
                "getpgid",
                "readline",
                "poll",
                "strip",
                "str",
                "remove"
            ],
            "save_settings_config": [
                "join",
                "exists",
                "sleep",
                "copy2"
            ],
            "stop_training": [
                "set"
            ],
            "get_training_manager": []
        }
    },
    "anylabeling/services/auto_training/ultralytics/validators.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/validators.py",
        "imports": [
            "os",
            "subprocess",
            "sys",
            "yaml",
            "typing.Dict",
            "typing.List",
            "typing.Tuple",
            "typing.Union",
            "utils.get_task_valid_images",
            "config.MIN_LABELED_IMAGES_THRESHOLD",
            "general.parse_string_to_digit_list"
        ],
        "classes": [],
        "functions": {
            "validate_basic_config": [
                "get",
                "strip",
                "join",
                "exists"
            ],
            "validate_classes": [
                "strip",
                "parse_string_to_digit_list",
                "len"
            ],
            "validate_data_file": [
                "open",
                "safe_load",
                "list",
                "values"
            ],
            "install_packages_with_timeout": [
                "Popen",
                "communicate",
                "kill",
                "str"
            ],
            "validate_task_requirements": [
                "get_task_valid_images"
            ]
        }
    },
    "anylabeling/services/auto_training/ultralytics/config.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/config.py",
        "imports": [
            "os",
            "multiprocessing",
            "torch",
            "torch",
            "torch"
        ],
        "classes": [],
        "functions": {
            "is_torch_available": [],
            "is_cuda_available": [
                "is_torch_available",
                "is_available"
            ],
            "is_mps_available": [
                "is_torch_available",
                "is_available"
            ]
        }
    },
    "anylabeling/services/auto_training/ultralytics/general.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/general.py",
        "imports": [
            "json",
            "os",
            "re",
            "shutil",
            "random",
            "datetime.datetime",
            "typing.List",
            "_io.load_yaml_config",
            "_io.save_yaml_config",
            "config.DATASET_PATH",
            "config.TASK_LABEL_MAPPINGS",
            "config.TASK_SHAPE_MAPPINGS",
            "anylabeling.views.labeling.label_converter.LabelConverter"
        ],
        "classes": [],
        "functions": {
            "create_yolo_dataset": [
                "load_yaml_config",
                "lower",
                "LabelConverter",
                "sorted",
                "keys",
                "splitext",
                "basename",
                "strftime",
                "now",
                "join",
                "makedirs",
                "get",
                "split",
                "exists",
                "append",
                "open",
                "load",
                "any",
                "sample",
                "len",
                "int",
                "_process_images_batch",
                "write",
                "save_yaml_config"
            ],
            "_process_images_batch": [
                "basename",
                "join",
                "copy2",
                "symlink",
                "exists",
                "splitext",
                "custom_to_yolo"
            ],
            "format_classes_display": [
                "isinstance",
                "join",
                "map",
                "str"
            ],
            "parse_string_to_digit_list": [
                "findall",
                "int"
            ]
        }
    },
    "anylabeling/services/auto_training/ultralytics/_io.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/_io.py",
        "imports": [
            "json",
            "os",
            "yaml",
            "typing.Dict",
            "typing.Any",
            "config.SETTINGS_CONFIG_PATH"
        ],
        "classes": [],
        "functions": {
            "ensure_config_dir": [
                "dirname",
                "exists",
                "makedirs"
            ],
            "save_config": [
                "ensure_config_dir",
                "open",
                "dump"
            ],
            "save_yaml_config": [
                "open",
                "dump"
            ],
            "load_config": [
                "exists",
                "open",
                "load"
            ],
            "load_config_from_file": [
                "open",
                "load"
            ],
            "load_yaml_config": [
                "open",
                "safe_load"
            ]
        }
    },
    "anylabeling/services/auto_training/ultralytics/style.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/style.py",
        "imports": [],
        "classes": [],
        "functions": {
            "get_advanced_toggle_btn_style": [],
            "get_custom_table_style": [],
            "get_image_row_label_style": [],
            "get_image_label_style": [],
            "get_log_display_style": [],
            "get_progress_bar_style": [],
            "get_status_label_style": []
        }
    },
    "anylabeling/services/auto_training/ultralytics/exporter.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/exporter.py",
        "imports": [
            "os",
            "sys",
            "threading",
            "io.StringIO",
            "typing.Tuple",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal",
            "utils.check_package_installed",
            "validators.install_packages_with_timeout",
            "onnx",
            "packaging.version",
            "ultralytics.YOLO"
        ],
        "classes": [
            {
                "class_name": "ExportEventRedirector",
                "methods": [
                    "__init__",
                    "emit_export_event"
                ]
            },
            {
                "class_name": "ExportLogRedirector",
                "methods": [
                    "__init__",
                    "write",
                    "flush"
                ]
            },
            {
                "class_name": "ExportManager",
                "methods": [
                    "__init__",
                    "notify_callbacks",
                    "start_export",
                    "_export_worker",
                    "stop_export"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "StringIO"
            ],
            "emit_export_event": [
                "emit"
            ],
            "write": [
                "strip",
                "emit"
            ],
            "flush": [],
            "validate_onnx_export_environment": [
                "check_package_installed",
                "append",
                "hasattr",
                "parse"
            ],
            "validate_openvino_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_tensorrt_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_coreml_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_tensorflow_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_paddle_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_mnn_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_ncnn_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_imx500_export_environment": [
                "check_package_installed",
                "append"
            ],
            "validate_rknn_export_environment": [
                "check_package_installed",
                "append"
            ],
            "get_export_validator": [
                "get"
            ],
            "notify_callbacks": [
                "callback",
                "print"
            ],
            "start_export": [
                "join",
                "exists",
                "Thread",
                "start"
            ],
            "_export_worker": [
                "notify_callbacks",
                "get_export_validator",
                "join",
                "install_packages_with_timeout",
                "ExportLogRedirector",
                "YOLO",
                "export",
                "isinstance",
                "str",
                "dirname",
                "splitext",
                "basename",
                "exists",
                "replace"
            ],
            "stop_export": [
                "is_alive",
                "join",
                "notify_callbacks"
            ],
            "get_export_manager": [
                "ExportManager"
            ],
            "export_model": [
                "get_export_manager",
                "start_export"
            ]
        }
    },
    "anylabeling/views/__init__.py": {
        "file_name": "/anylabeling/views/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/mainwindow.py": {
        "file_name": "/anylabeling/views/mainwindow.py",
        "imports": [
            "PyQt5.QtWidgets.QMainWindow",
            "PyQt5.QtWidgets.QStatusBar",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "app_info.__appdescription__",
            "app_info.__appname__",
            "labeling.label_wrapper.LabelingWrapper"
        ],
        "classes": [
            {
                "class_name": "MainWindow",
                "methods": [
                    "__init__",
                    "closeEvent"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setContentsMargins",
                "setWindowTitle",
                "QVBoxLayout",
                "LabelingWrapper",
                "addWidget",
                "QWidget",
                "setLayout",
                "setCentralWidget",
                "QStatusBar",
                "showMessage",
                "setStatusBar"
            ],
            "closeEvent": [
                "closeEvent"
            ]
        }
    },
    "anylabeling/views/common/__init__.py": {
        "file_name": "/anylabeling/views/common/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/common/toaster.py": {
        "file_name": "/anylabeling/views/common/toaster.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "QToaster",
                "methods": [
                    "__init__",
                    "check_closed",
                    "restore",
                    "hide",
                    "eventFilter",
                    "enterEvent",
                    "leaveEvent",
                    "closeEvent",
                    "resizeEvent",
                    "show_message"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "QHBoxLayout",
                "setSizePolicy",
                "setStyleSheet",
                "setAutoFillBackground",
                "setFrameShape",
                "QTimer",
                "parent",
                "QGraphicsOpacityEffect",
                "setGraphicsEffect",
                "QPropertyAnimation",
                "installEventFilter",
                "setStartValue",
                "setEndValue",
                "setDuration",
                "connect"
            ],
            "check_closed": [
                "direction",
                "close"
            ],
            "restore": [
                "stop",
                "parent",
                "setOpacity",
                "setWindowOpacity"
            ],
            "hide": [
                "setDirection",
                "setDuration",
                "start"
            ],
            "eventFilter": [
                "parent",
                "type",
                "stop",
                "rect",
                "geometry",
                "moveTopLeft",
                "topLeft",
                "QPoint",
                "moveTopRight",
                "topRight",
                "moveBottomRight",
                "bottomRight",
                "moveBottomLeft",
                "bottomLeft",
                "setGeometry",
                "restore",
                "start",
                "eventFilter",
                "super"
            ],
            "enterEvent": [
                "restore"
            ],
            "leaveEvent": [
                "start"
            ],
            "closeEvent": [
                "deleteLater"
            ],
            "resizeEvent": [
                "resizeEvent",
                "super",
                "parent",
                "QPainterPath",
                "addRoundedRect",
                "translated",
                "QRectF",
                "rect",
                "setMask",
                "QRegion",
                "toPolygon",
                "toFillPolygon",
                "QTransform",
                "clearMask"
            ],
            "show_message": [
                "window",
                "QToaster",
                "setWindowFlags",
                "windowFlags",
                "primaryScreen",
                "isValid",
                "size",
                "geometry",
                "QRect",
                "pos",
                "QPoint",
                "QSize",
                "screens",
                "intersected",
                "width",
                "height",
                "availableGeometry",
                "rect",
                "setInterval",
                "QLabel",
                "setStyleSheet",
                "QFont",
                "setPointSize",
                "setWeight",
                "setFont",
                "addWidget",
                "layout",
                "QToolButton",
                "standardIcon",
                "style",
                "setIcon",
                "setAutoRaise",
                "connect",
                "start",
                "raise_",
                "adjustSize",
                "moveTopLeft",
                "topLeft",
                "moveTopRight",
                "topRight",
                "moveBottomRight",
                "bottomRight",
                "moveBottomLeft",
                "bottomLeft",
                "setGeometry",
                "show"
            ]
        }
    },
    "anylabeling/views/training/__init__.py": {
        "file_name": "/anylabeling/views/training/__init__.py",
        "imports": [
            "ultralytics_dialog.UltralyticsDialog"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/training/ultralytics_dialog.py": {
        "file_name": "/anylabeling/views/training/ultralytics_dialog.py",
        "imports": [
            "csv",
            "datetime",
            "glob",
            "os",
            "platform",
            "re",
            "shutil",
            "subprocess",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QTabWidget",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QGroupBox",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QFormLayout",
            "PyQt5.QtWidgets.QGridLayout",
            "PyQt5.QtWidgets.QProgressBar",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QSizePolicy",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.training.widgets.ultralytics_widgets.*",
            "anylabeling.services.auto_training.ultralytics._io.*",
            "anylabeling.services.auto_training.ultralytics.config.*",
            "anylabeling.services.auto_training.ultralytics.exporter.ExportEventRedirector",
            "anylabeling.services.auto_training.ultralytics.exporter.ExportLogRedirector",
            "anylabeling.services.auto_training.ultralytics.exporter.get_export_manager",
            "anylabeling.services.auto_training.ultralytics.general.create_yolo_dataset",
            "anylabeling.services.auto_training.ultralytics.general.format_classes_display",
            "anylabeling.services.auto_training.ultralytics.general.parse_string_to_digit_list",
            "anylabeling.services.auto_training.ultralytics.style.*",
            "anylabeling.services.auto_training.ultralytics.trainer.TrainingEventRedirector",
            "anylabeling.services.auto_training.ultralytics.trainer.TrainingLogRedirector",
            "anylabeling.services.auto_training.ultralytics.trainer.get_training_manager",
            "anylabeling.services.auto_training.ultralytics.utils.*",
            "anylabeling.services.auto_training.ultralytics.validators.validate_basic_config",
            "anylabeling.services.auto_training.ultralytics.validators.validate_data_file",
            "anylabeling.services.auto_training.ultralytics.validators.validate_task_requirements",
            "torch"
        ],
        "classes": [
            {
                "class_name": "UltralyticsDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "save_training_logs_to_file",
                    "closeEvent",
                    "go_to_specific_tab",
                    "show_pose_config",
                    "hide_pose_config",
                    "on_task_type_selected",
                    "create_task_handler",
                    "init_task_configuration",
                    "refresh_dataset_summary",
                    "load_images",
                    "init_dataset_summary",
                    "proceed_to_config",
                    "init_actions",
                    "init_data_tab",
                    "browse_model_file",
                    "browse_data_file",
                    "browse_pose_config_file",
                    "setup_cuda_checkboxes",
                    "on_device_changed",
                    "init_basic_settings",
                    "toggle_advanced_settings",
                    "init_train_settings",
                    "load_config_to_ui",
                    "import_config",
                    "get_current_config",
                    "save_current_config",
                    "start_training",
                    "init_config_buttons",
                    "load_default_config",
                    "init_config_tab",
                    "update_training_status_display",
                    "update_training_progress",
                    "update_training_images",
                    "on_training_event",
                    "append_training_log",
                    "init_training_status",
                    "clear_training_logs",
                    "copy_training_logs",
                    "init_training_logs",
                    "init_training_images",
                    "on_image_clicked",
                    "open_image_file",
                    "open_training_directory",
                    "stop_training",
                    "get_training_args",
                    "start_training_from_train_tab",
                    "init_training_actions",
                    "init_train_tab",
                    "on_export_event",
                    "start_export",
                    "reset_train_tab"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "setWindowFlags",
                "resize",
                "setMinimumSize",
                "TrainingLogRedirector",
                "connect",
                "TrainingEventRedirector",
                "get_training_manager",
                "ExportLogRedirector",
                "ExportEventRedirector",
                "get_export_manager",
                "QTimer",
                "init_ui",
                "refresh_dataset_summary"
            ],
            "init_ui": [
                "QWidget",
                "QTabWidget",
                "addTab",
                "tr",
                "setEnabled",
                "tabBar",
                "QVBoxLayout",
                "addWidget",
                "init_data_tab",
                "init_config_tab",
                "init_train_tab"
            ],
            "save_training_logs_to_file": [
                "hasattr",
                "strip",
                "toPlainText",
                "exists",
                "join",
                "makedirs",
                "strftime",
                "now",
                "open",
                "write",
                "info",
                "error",
                "str"
            ],
            "closeEvent": [
                "warning",
                "tr",
                "ignore",
                "save_training_logs_to_file",
                "closeEvent",
                "super"
            ],
            "go_to_specific_tab": [
                "setCurrentIndex"
            ],
            "show_pose_config": [
                "hasattr",
                "setVisible",
                "range",
                "count",
                "widget",
                "itemAt"
            ],
            "hide_pose_config": [
                "hasattr",
                "setVisible",
                "range",
                "count",
                "widget",
                "itemAt"
            ],
            "on_task_type_selected": [
                "set_selected",
                "hide_pose_config",
                "lower",
                "show_pose_config"
            ],
            "create_task_handler": [],
            "handler": [
                "on_task_type_selected"
            ],
            "init_task_configuration": [
                "QWidget",
                "QVBoxLayout",
                "QHBoxLayout",
                "addWidget",
                "QLabel",
                "tr",
                "CustomQPushButton",
                "connect",
                "create_task_handler",
                "addStretch",
                "addLayout"
            ],
            "refresh_dataset_summary": [
                "clear",
                "get_statistics_table_data",
                "load_data"
            ],
            "load_images": [
                "open_folder_dialog",
                "parent",
                "refresh_dataset_summary"
            ],
            "init_dataset_summary": [
                "QWidget",
                "QVBoxLayout",
                "addWidget",
                "QLabel",
                "tr",
                "CustomTable"
            ],
            "proceed_to_config": [
                "validate_task_requirements",
                "warning",
                "tr",
                "join",
                "lower",
                "setText",
                "setReadOnly",
                "go_to_specific_tab"
            ],
            "init_actions": [
                "QHBoxLayout",
                "SecondaryButton",
                "tr",
                "connect",
                "addWidget",
                "addStretch",
                "PrimaryButton",
                "addLayout"
            ],
            "init_data_tab": [
                "QVBoxLayout",
                "QScrollArea",
                "QWidget",
                "init_task_configuration",
                "init_dataset_summary",
                "addStretch",
                "setWidget",
                "setWidgetResizable",
                "addWidget",
                "init_actions"
            ],
            "browse_model_file": [
                "getOpenFileName",
                "tr",
                "setText"
            ],
            "browse_data_file": [
                "getOpenFileName",
                "tr",
                "validate_data_file",
                "setText",
                "info",
                "warning",
                "clear"
            ],
            "browse_pose_config_file": [
                "getOpenFileName",
                "tr",
                "setText"
            ],
            "setup_cuda_checkboxes": [
                "hasattr",
                "layout",
                "QHBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "count",
                "takeAt",
                "widget",
                "setParent",
                "range",
                "CustomCheckBox",
                "setMaximumHeight",
                "setChecked",
                "addWidget"
            ],
            "on_device_changed": [
                "device_count",
                "setup_cuda_checkboxes",
                "setVisible"
            ],
            "init_basic_settings": [
                "QGroupBox",
                "tr",
                "QFormLayout",
                "setFieldGrowthPolicy",
                "setRowWrapPolicy",
                "CustomLineEdit",
                "lower",
                "join",
                "setText",
                "addRow",
                "QHBoxLayout",
                "SecondaryButton",
                "connect",
                "addWidget",
                "QLabel",
                "setVisible",
                "CustomComboBox",
                "addItems",
                "QWidget",
                "on_device_changed",
                "currentText",
                "CustomSlider",
                "setRange",
                "setValue",
                "str"
            ],
            "toggle_advanced_settings": [
                "isVisible",
                "setVisible",
                "setIcon",
                "QIcon",
                "new_icon"
            ],
            "init_train_settings": [
                "QGroupBox",
                "tr",
                "QVBoxLayout",
                "QHBoxLayout",
                "addWidget",
                "QLabel",
                "CustomSpinBox",
                "setRange",
                "setValue",
                "CustomLineEdit",
                "setText",
                "setPlaceholderText",
                "CustomCheckBox",
                "setChecked",
                "addStretch",
                "QWidget",
                "setContentsMargins",
                "setSpacing",
                "setStyleSheet",
                "QPushButton",
                "setFixedSize",
                "get_advanced_toggle_btn_style",
                "setIcon",
                "QIcon",
                "new_icon",
                "connect",
                "setVisible",
                "CustomDoubleSpinBox",
                "setSpecialValueText",
                "CustomComboBox",
                "addItems",
                "setDecimals",
                "QGridLayout",
                "setHorizontalSpacing",
                "setVerticalSpacing",
                "enumerate",
                "setMinimumWidth",
                "range",
                "setColumnStretch",
                "addLayout"
            ],
            "load_config_to_ui": [
                "items",
                "setValue",
                "int",
                "setText",
                "str",
                "findText",
                "setCurrentIndex",
                "on_device_changed",
                "on_task_type_selected",
                "set_widget_value"
            ],
            "set_widget_value": [
                "type",
                "setText",
                "format_classes_display",
                "str",
                "setValue",
                "isinstance",
                "findText",
                "setCurrentIndex",
                "setChecked",
                "bool",
                "warning"
            ],
            "import_config": [
                "getOpenFileName",
                "tr",
                "load_config_from_file",
                "load_config_to_ui",
                "information",
                "warning"
            ],
            "get_current_config": [
                "get_widget_value",
                "parse_string_to_digit_list"
            ],
            "get_widget_value": [
                "type",
                "text",
                "value",
                "currentText",
                "isChecked"
            ],
            "save_current_config": [
                "save_config",
                "get_current_config",
                "tr",
                "information",
                "warning",
                "str"
            ],
            "start_training": [
                "warning",
                "tr",
                "get_current_config",
                "validate_basic_config",
                "question",
                "rmtree",
                "append_training_log",
                "str",
                "error",
                "lower",
                "get",
                "exists",
                "reset_train_tab",
                "setVisible",
                "save_config",
                "go_to_specific_tab"
            ],
            "init_config_buttons": [
                "QHBoxLayout",
                "SecondaryButton",
                "tr",
                "connect",
                "addWidget",
                "addStretch",
                "go_to_specific_tab",
                "PrimaryButton",
                "addLayout"
            ],
            "load_default_config": [
                "load_config",
                "load_config_to_ui"
            ],
            "init_config_tab": [
                "QVBoxLayout",
                "QScrollArea",
                "QWidget",
                "init_basic_settings",
                "init_train_settings",
                "addStretch",
                "setWidget",
                "setWidgetResizable",
                "addWidget",
                "init_config_buttons",
                "load_default_config"
            ],
            "update_training_status_display": [
                "get",
                "tr",
                "setText",
                "setStyleSheet",
                "get_status_label_style"
            ],
            "update_training_progress": [
                "join",
                "exists",
                "open",
                "reader",
                "list",
                "len",
                "min",
                "int",
                "setValue",
                "setFormat",
                "warning"
            ],
            "update_training_images": [
                "extend",
                "find_images_by_pattern",
                "enumerate",
                "len",
                "QPixmap",
                "isNull",
                "scaled",
                "setPixmap",
                "setText",
                "setToolTip",
                "basename",
                "clear",
                "tr",
                "warning"
            ],
            "find_images_by_pattern": [
                "glob",
                "join",
                "sort",
                "extend",
                "len"
            ],
            "on_training_event": [
                "setValue",
                "setFormat",
                "update_training_status_display",
                "setVisible",
                "start",
                "append_training_log",
                "tr",
                "stop",
                "update_training_progress",
                "update_training_images",
                "get"
            ],
            "append_training_log": [
                "hasattr",
                "clean_ansi_codes",
                "append",
                "strip"
            ],
            "clean_ansi_codes": [
                "compile",
                "sub"
            ],
            "init_training_status": [
                "QGroupBox",
                "tr",
                "QVBoxLayout",
                "QLabel",
                "setStyleSheet",
                "get_status_label_style",
                "addWidget",
                "QHBoxLayout",
                "QProgressBar",
                "setRange",
                "setValue",
                "setFormat",
                "get_progress_bar_style",
                "addLayout"
            ],
            "clear_training_logs": [
                "hasattr",
                "question",
                "tr",
                "clear"
            ],
            "copy_training_logs": [
                "hasattr",
                "toPlainText",
                "clipboard",
                "setText"
            ],
            "init_training_logs": [
                "QGroupBox",
                "tr",
                "QVBoxLayout",
                "QTextEdit",
                "setReadOnly",
                "setMinimumHeight",
                "setStyleSheet",
                "get_log_display_style",
                "addWidget",
                "QHBoxLayout",
                "addStretch",
                "SecondaryButton",
                "connect",
                "addLayout"
            ],
            "init_training_images": [
                "QGroupBox",
                "tr",
                "QVBoxLayout",
                "setContentsMargins",
                "QWidget",
                "QHBoxLayout",
                "setSpacing",
                "range",
                "QLabel",
                "setMinimumSize",
                "setSizePolicy",
                "setStyleSheet",
                "get_image_label_style",
                "setAlignment",
                "setText",
                "setScaledContents",
                "on_image_clicked",
                "append",
                "addWidget"
            ],
            "on_image_clicked": [
                "open_image_file"
            ],
            "open_image_file": [
                "hasattr",
                "lower",
                "uname",
                "strip",
                "decode",
                "check_output",
                "run",
                "startfile",
                "system",
                "warning"
            ],
            "open_training_directory": [
                "exists",
                "hasattr",
                "lower",
                "uname",
                "strip",
                "decode",
                "check_output",
                "run",
                "startfile",
                "system",
                "append_training_log",
                "str",
                "information",
                "tr"
            ],
            "stop_training": [
                "question",
                "tr",
                "stop_training",
                "append_training_log"
            ],
            "get_training_args": [
                "create_yolo_dataset",
                "get",
                "info",
                "append_training_log",
                "hasattr",
                "range",
                "count",
                "widget",
                "itemAt",
                "isChecked",
                "text",
                "split",
                "append",
                "int",
                "join",
                "update",
                "items",
                "lower",
                "str"
            ],
            "start_training_from_train_tab": [
                "get_current_config",
                "join",
                "append_training_log",
                "tr",
                "get_training_args",
                "start_training",
                "critical",
                "str"
            ],
            "init_training_actions": [
                "QHBoxLayout",
                "SecondaryButton",
                "tr",
                "connect",
                "addWidget",
                "addStretch",
                "setVisible",
                "go_to_specific_tab",
                "PrimaryButton",
                "addLayout"
            ],
            "init_train_tab": [
                "QVBoxLayout",
                "QScrollArea",
                "setWidgetResizable",
                "setVerticalScrollBarPolicy",
                "QWidget",
                "init_training_status",
                "init_training_logs",
                "init_training_images",
                "addStretch",
                "setWidget",
                "addWidget",
                "init_training_actions"
            ],
            "on_export_event": [
                "append_training_log",
                "tr",
                "setEnabled",
                "get",
                "information",
                "upper",
                "warning"
            ],
            "start_export": [
                "warning",
                "tr",
                "join",
                "exists",
                "ExportFormatDialog",
                "exec_",
                "get_selected_format",
                "start_export",
                "critical",
                "append_training_log"
            ],
            "reset_train_tab": [
                "setValue",
                "setFormat",
                "update_training_status_display",
                "hasattr",
                "clear",
                "enumerate",
                "setText",
                "tr",
                "setToolTip",
                "setVisible"
            ]
        }
    },
    "anylabeling/views/training/widgets/__init__.py": {
        "file_name": "/anylabeling/views/training/widgets/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/training/widgets/ultralytics_widgets/__init__.py": {
        "file_name": "/anylabeling/views/training/widgets/ultralytics_widgets/__init__.py",
        "imports": [
            "custom_dialogs.ExportFormatDialog",
            "custom_widgets.CustomCheckBox",
            "custom_widgets.CustomComboBox",
            "custom_widgets.CustomDoubleSpinBox",
            "custom_widgets.CustomLineEdit",
            "custom_widgets.CustomQPushButton",
            "custom_widgets.CustomSlider",
            "custom_widgets.CustomSpinBox",
            "custom_widgets.CustomTable",
            "custom_widgets.PrimaryButton",
            "custom_widgets.SecondaryButton",
            "custom_widgets.TrainingConfirmDialog"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/training/widgets/ultralytics_widgets/custom_dialogs.py": {
        "file_name": "/anylabeling/views/training/widgets/ultralytics_widgets/custom_dialogs.py",
        "imports": [
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QVBoxLayout",
            "custom_widgets.CustomComboBox",
            "custom_widgets.PrimaryButton",
            "custom_widgets.SecondaryButton"
        ],
        "classes": [
            {
                "class_name": "ExportFormatDialog",
                "methods": [
                    "__init__",
                    "get_selected_format"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "tr",
                "setFixedSize",
                "setModal",
                "QVBoxLayout",
                "setSpacing",
                "setContentsMargins",
                "QLabel",
                "setStyleSheet",
                "addWidget",
                "CustomComboBox",
                "addItem",
                "setCurrentIndex",
                "setWordWrap",
                "QHBoxLayout",
                "addStretch",
                "SecondaryButton",
                "connect",
                "PrimaryButton",
                "addLayout",
                "setLayout"
            ],
            "get_selected_format": [
                "currentData"
            ]
        }
    },
    "anylabeling/views/training/widgets/ultralytics_widgets/custom_widgets.py": {
        "file_name": "/anylabeling/views/training/widgets/ultralytics_widgets/custom_widgets.py",
        "imports": [
            "PyQt5.QtWidgets.QCheckBox",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QDoubleSpinBox",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSlider",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QHeaderView",
            "PyQt5.QtWidgets.QAbstractItemView",
            "PyQt5.QtCore",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtGui.QBrush",
            "PyQt5.QtGui.QColor",
            "anylabeling.services.auto_training.ultralytics.config.*",
            "anylabeling.services.auto_training.ultralytics.style.*",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "CustomCheckBox",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "CustomComboBox",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomSpinBox",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomDoubleSpinBox",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomSlider",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomLineEdit",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "CustomQPushButton",
                "methods": [
                    "__init__",
                    "set_selected",
                    "update_style"
                ]
            },
            {
                "class_name": "PrimaryButton",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "SecondaryButton",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "TrainingConfirmDialog",
                "methods": [
                    "__init__",
                    "_format_command"
                ]
            },
            {
                "class_name": "CustomTable",
                "methods": [
                    "__init__",
                    "setup_table",
                    "load_data",
                    "populate_table"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setStyleSheet",
                "new_icon_path",
                "setFixedHeight",
                "setMinimumWidth",
                "setFocusPolicy",
                "update_style",
                "setFixedSize",
                "setWindowTitle",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "_format_command",
                "QTextEdit",
                "setPlainText",
                "setReadOnly",
                "QHBoxLayout",
                "addStretch",
                "SecondaryButton",
                "connect",
                "PrimaryButton",
                "addLayout",
                "setup_table"
            ],
            "wheelEvent": [
                "ignore"
            ],
            "set_selected": [
                "update_style"
            ],
            "update_style": [
                "setStyleSheet"
            ],
            "_format_command": [
                "len",
                "join",
                "enumerate"
            ],
            "setup_table": [
                "setEditTriggers",
                "setSelectionMode",
                "setFocusPolicy",
                "setAlternatingRowColors",
                "setShowGrid",
                "setVisible",
                "verticalHeader",
                "setStyleSheet",
                "get_custom_table_style",
                "horizontalHeader",
                "setSectionResizeMode",
                "setStretchLastSection"
            ],
            "load_data": [
                "clear",
                "populate_table"
            ],
            "populate_table": [
                "setRowCount",
                "len",
                "setColumnCount",
                "setHorizontalHeaderLabels",
                "enumerate",
                "QTableWidgetItem",
                "str",
                "setTextAlignment",
                "setItem"
            ]
        }
    },
    "anylabeling/views/labeling/label_converter.py": {
        "file_name": "/anylabeling/views/labeling/label_converter.py",
        "imports": [
            "os",
            "os.path",
            "cv2",
            "json",
            "jsonlines",
            "json_repair",
            "math",
            "re",
            "uuid",
            "yaml",
            "pathlib",
            "configparser",
            "numpy",
            "xml.dom.minidom",
            "xml.etree.ElementTree",
            "PIL.Image",
            "datetime.date",
            "itertools.chain",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.shape.rectangle_from_diagonal",
            "anylabeling.views.labeling.utils.general.is_possible_rectangle"
        ],
        "classes": [
            {
                "class_name": "LabelConverter",
                "methods": [
                    "__init__",
                    "reset",
                    "calculate_rotation_theta",
                    "calculate_polygon_area",
                    "get_image_size",
                    "get_min_enclosing_bbox",
                    "get_contours_and_labels",
                    "clamp_points",
                    "_extract_bbox_answer",
                    "get_coco_data",
                    "calculate_normalized_bbox",
                    "calculate_bounding_box",
                    "gen_quad_from_poly",
                    "get_rotate_crop_image",
                    "yolo_obb_to_custom",
                    "yolo_pose_to_custom",
                    "yolo_to_custom",
                    "voc_to_custom",
                    "coco_to_custom",
                    "dota_to_custom",
                    "mask_to_custom",
                    "mot_to_custom",
                    "odvg_to_custom",
                    "mmgd_to_custom",
                    "ppocr_to_custom",
                    "vlm_r1_ovd_to_custom",
                    "custom_to_yolo",
                    "custom_to_voc",
                    "custom_to_coco",
                    "custom_to_dota",
                    "custom_to_mask",
                    "custom_to_mot",
                    "custom_to_mots",
                    "custom_to_odvg",
                    "custom_to_vlm_r1_ovd",
                    "custom_to_ppocr"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "open",
                "splitlines",
                "read",
                "info",
                "safe_load",
                "items",
                "list",
                "keys"
            ],
            "reset": [
                "dict"
            ],
            "calculate_rotation_theta": [
                "atan2",
                "degrees"
            ],
            "calculate_polygon_area": [
                "isinstance",
                "len",
                "reshape",
                "array",
                "extend",
                "tolist",
                "append",
                "min",
                "max",
                "floor",
                "int",
                "ceil",
                "zeros",
                "copy",
                "astype",
                "round",
                "fillPoly",
                "sum",
                "float"
            ],
            "get_image_size": [
                "open"
            ],
            "get_min_enclosing_bbox": [
                "range",
                "len",
                "extend",
                "zip",
                "min",
                "max",
                "floor",
                "float"
            ],
            "get_contours_and_labels": [
                "items",
                "imread",
                "error",
                "unique",
                "get",
                "astype",
                "findContours",
                "len",
                "arcLength",
                "approxPolyDP",
                "tolist",
                "append",
                "isinstance",
                "warning",
                "array",
                "inRange"
            ],
            "clamp_points": [
                "max",
                "min"
            ],
            "_extract_bbox_answer": [
                "findall",
                "loads",
                "isinstance",
                "len",
                "error"
            ],
            "get_coco_data": [
                "str",
                "today"
            ],
            "calculate_normalized_bbox": [
                "calculate_bounding_box"
            ],
            "calculate_bounding_box": [
                "zip",
                "min",
                "max"
            ],
            "gen_quad_from_poly": [
                "zeros",
                "minAreaRect",
                "astype",
                "array",
                "boxPoints",
                "range",
                "norm",
                "tolist",
                "list",
                "map",
                "append"
            ],
            "get_rotate_crop_image": [
                "range",
                "array",
                "int",
                "max",
                "norm",
                "float32",
                "getPerspectiveTransform",
                "warpPerspective",
                "rot90",
                "error"
            ],
            "yolo_obb_to_custom": [
                "reset",
                "open",
                "readlines",
                "get_image_size",
                "split",
                "strip",
                "int",
                "map",
                "calculate_rotation_theta",
                "append",
                "basename",
                "dump"
            ],
            "yolo_pose_to_custom": [
                "reset",
                "open",
                "readlines",
                "get_image_size",
                "list",
                "keys",
                "enumerate",
                "split",
                "strip",
                "int",
                "float",
                "append",
                "range",
                "len",
                "basename",
                "dump"
            ],
            "yolo_to_custom": [
                "reset",
                "open",
                "readlines",
                "get_image_size",
                "array",
                "split",
                "strip",
                "int",
                "float",
                "zip",
                "float64",
                "append",
                "tolist",
                "basename",
                "dump"
            ],
            "voc_to_custom": [
                "reset",
                "parse",
                "getroot",
                "int",
                "find",
                "findall",
                "str",
                "len",
                "range",
                "float",
                "append",
                "bool",
                "open",
                "dump"
            ],
            "coco_to_custom": [
                "open",
                "load",
                "append",
                "list",
                "keys",
                "basename",
                "bool",
                "int",
                "str",
                "get",
                "isinstance",
                "len",
                "set",
                "range",
                "add",
                "values",
                "reset",
                "join",
                "splitext",
                "dump"
            ],
            "dota_to_custom": [
                "reset",
                "open",
                "readlines",
                "get_image_size",
                "split",
                "strip",
                "float",
                "bool",
                "int",
                "calculate_rotation_theta",
                "append",
                "basename",
                "dump"
            ],
            "mask_to_custom": [
                "reset",
                "get_contours_and_labels",
                "append",
                "get_image_size",
                "basename",
                "open",
                "dump"
            ],
            "mot_to_custom": [
                "open",
                "split",
                "strip",
                "int",
                "append",
                "listdir",
                "endswith",
                "reset",
                "splitext",
                "rsplit",
                "isdigit",
                "search",
                "group",
                "join",
                "get_image_size",
                "dump"
            ],
            "odvg_to_custom": [
                "open",
                "list",
                "reset",
                "append",
                "join",
                "splitext",
                "dump"
            ],
            "mmgd_to_custom": [
                "reset",
                "open",
                "load",
                "error",
                "ValueError",
                "get_image_size",
                "basename",
                "set",
                "zip",
                "len",
                "round",
                "append",
                "dump"
            ],
            "ppocr_to_custom": [
                "open",
                "split",
                "strip",
                "reset",
                "basename",
                "join",
                "get_image_size",
                "loads",
                "is_possible_rectangle",
                "get",
                "append",
                "splitext",
                "dump"
            ],
            "vlm_r1_ovd_to_custom": [
                "reset",
                "get_image_size",
                "_extract_bbox_answer",
                "append",
                "basename",
                "open",
                "dump"
            ],
            "custom_to_yolo": [
                "exists",
                "open",
                "load",
                "touch",
                "Path",
                "array",
                "clamp_points",
                "len",
                "warning",
                "rectangle_from_diagonal",
                "index",
                "abs",
                "write",
                "join",
                "str",
                "tolist",
                "any",
                "list",
                "from_iterable",
                "range",
                "error",
                "ValueError",
                "int",
                "get",
                "keys",
                "max",
                "values",
                "round"
            ],
            "custom_to_voc": [
                "imread",
                "exists",
                "open",
                "load",
                "basename",
                "Element",
                "SubElement",
                "dirname",
                "str",
                "clamp_points",
                "get",
                "int",
                "len",
                "warning",
                "rectangle_from_diagonal",
                "calculate_bounding_box",
                "enumerate",
                "tostring",
                "parseString",
                "toprettyxml",
                "write"
            ],
            "custom_to_coco": [
                "get_coco_data",
                "enumerate",
                "append",
                "items",
                "basename",
                "splitext",
                "join",
                "exists",
                "dirname",
                "open",
                "load",
                "clamp_points",
                "get",
                "int",
                "hash",
                "uuid1",
                "len",
                "rectangle_from_diagonal",
                "warning",
                "min",
                "max",
                "index",
                "values",
                "calculate_polygon_area",
                "get_min_enclosing_bbox",
                "dump"
            ],
            "custom_to_dota": [
                "open",
                "load",
                "len",
                "any",
                "warning",
                "get",
                "write",
                "int"
            ],
            "custom_to_mask": [
                "open",
                "load",
                "clamp_points",
                "append",
                "int",
                "ValueError",
                "zeros",
                "sort",
                "contourArea",
                "array",
                "fillPoly",
                "where",
                "tofile",
                "imencode",
                "all",
                "astype",
                "cvtColor"
            ],
            "custom_to_mot": [
                "dict",
                "basename",
                "listdir",
                "sort",
                "isdigit",
                "splitext",
                "rsplit",
                "int",
                "endswith",
                "join",
                "open",
                "load",
                "search",
                "group",
                "get",
                "index",
                "clamp_points",
                "len",
                "warning",
                "rectangle_from_diagonal",
                "append",
                "ConfigParser",
                "add_section",
                "items",
                "str",
                "write",
                "map"
            ],
            "custom_to_mots": [
                "dict",
                "basename",
                "listdir",
                "sort",
                "isdigit",
                "splitext",
                "rsplit",
                "int",
                "endswith",
                "join",
                "open",
                "load",
                "split",
                "search",
                "group",
                "index",
                "clamp_points",
                "append",
                "ConfigParser",
                "add_section",
                "items",
                "str",
                "write",
                "map"
            ],
            "custom_to_odvg": [
                "enumerate",
                "join",
                "open",
                "dump",
                "basename",
                "splitext",
                "exists",
                "dirname",
                "imdecode",
                "fromfile",
                "load",
                "clamp_points",
                "float",
                "index",
                "append",
                "write_all"
            ],
            "custom_to_vlm_r1_ovd": [
                "open",
                "enumerate",
                "basename",
                "splitext",
                "join",
                "exists",
                "dirname",
                "imdecode",
                "fromfile",
                "load",
                "set",
                "clamp_points",
                "int",
                "append",
                "add",
                "list",
                "write"
            ],
            "custom_to_ppocr": [
                "exists",
                "basename",
                "splitext",
                "dirname",
                "imdecode",
                "fromfile",
                "open",
                "load",
                "join",
                "get",
                "list",
                "map",
                "clamp_points",
                "append",
                "dict",
                "len",
                "gen_quad_from_poly",
                "array",
                "get_rotate_crop_image",
                "warning",
                "tofile",
                "imencode",
                "dumps",
                "write",
                "set",
                "add"
            ]
        }
    },
    "anylabeling/views/labeling/shape.py": {
        "file_name": "/anylabeling/views/labeling/shape.py",
        "imports": [
            "copy",
            "math",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            ".utils",
            "labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Shape",
                "methods": [
                    "__init__",
                    "to_dict",
                    "load_from_dict",
                    "shape_type",
                    "shape_type",
                    "get_supported_shape",
                    "close",
                    "reach_max_points",
                    "add_point",
                    "can_add_point",
                    "pop_point",
                    "insert_point",
                    "remove_point",
                    "is_closed",
                    "set_open",
                    "get_rect_from_line",
                    "paint",
                    "draw_vertex",
                    "nearest_vertex",
                    "nearest_edge",
                    "contains_point",
                    "get_circle_rect_from_line",
                    "make_path",
                    "bounding_rect",
                    "move_by",
                    "move_vertex_by",
                    "highlight_vertex",
                    "highlight_clear",
                    "copy",
                    "__len__",
                    "__getitem__",
                    "__setitem__"
                ]
            }
        ],
        "functions": {
            "__init__": [],
            "to_dict": [
                "x",
                "y"
            ],
            "load_from_dict": [
                "get",
                "QPointF",
                "items",
                "close"
            ],
            "shape_type": [
                "get_supported_shape",
                "ValueError"
            ],
            "get_supported_shape": [],
            "close": [
                "len",
                "x",
                "y",
                "QPointF"
            ],
            "reach_max_points": [
                "len"
            ],
            "add_point": [
                "reach_max_points",
                "append",
                "close"
            ],
            "can_add_point": [],
            "pop_point": [
                "pop"
            ],
            "insert_point": [
                "insert"
            ],
            "remove_point": [
                "pop"
            ],
            "is_closed": [],
            "set_open": [],
            "get_rect_from_line": [
                "x",
                "y",
                "QRectF"
            ],
            "paint": [
                "QPen",
                "setWidth",
                "max",
                "int",
                "round",
                "setPen",
                "QPainterPath",
                "len",
                "get_rect_from_line",
                "addRect",
                "moveTo",
                "enumerate",
                "lineTo",
                "draw_vertex",
                "is_closed",
                "get_circle_rect_from_line",
                "addEllipse",
                "range",
                "drawPath",
                "fillPath"
            ],
            "draw_vertex": [
                "QPainterPath",
                "moveTo",
                "x",
                "y",
                "lineTo",
                "closeSubpath",
                "addPath",
                "addRect",
                "addEllipse",
                "error"
            ],
            "nearest_vertex": [
                "float",
                "enumerate",
                "distance"
            ],
            "nearest_edge": [
                "float",
                "range",
                "len",
                "distance_to_line"
            ],
            "contains_point": [
                "contains",
                "make_path"
            ],
            "get_circle_rect_from_line": [
                "len",
                "sqrt",
                "pow",
                "x",
                "y",
                "QRectF"
            ],
            "make_path": [
                "QPainterPath",
                "lineTo",
                "len",
                "get_circle_rect_from_line",
                "addEllipse"
            ],
            "bounding_rect": [
                "boundingRect",
                "make_path"
            ],
            "move_by": [],
            "move_vertex_by": [],
            "highlight_vertex": [],
            "highlight_clear": [],
            "copy": [
                "deepcopy"
            ],
            "__len__": [
                "len"
            ],
            "__getitem__": [],
            "__setitem__": []
        }
    },
    "anylabeling/views/labeling/label_wrapper.py": {
        "file_name": "/anylabeling/views/labeling/label_wrapper.py",
        "imports": [
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "label_widget.LabelingWidget"
        ],
        "classes": [
            {
                "class_name": "LabelingWrapper",
                "methods": [
                    "__init__",
                    "closeEvent"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "LabelingWidget",
                "QVBoxLayout",
                "setContentsMargins",
                "addWidget",
                "setLayout"
            ],
            "closeEvent": [
                "closeEvent"
            ]
        }
    },
    "anylabeling/views/labeling/__init__.py": {
        "file_name": "/anylabeling/views/labeling/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/label_file.py": {
        "file_name": "/anylabeling/views/labeling/label_file.py",
        "imports": [
            "os",
            "base64",
            "contextlib",
            "io",
            "json",
            "os.path",
            "PIL.Image",
            "PIL.ImageFile",
            "app_info.__version__",
            ".utils",
            "shape.Shape",
            "logger.logger",
            "label_converter.LabelConverter"
        ],
        "classes": [
            {
                "class_name": "LabelFileError",
                "methods": []
            },
            {
                "class_name": "LabelFile",
                "methods": [
                    "__init__",
                    "load_image_file",
                    "load",
                    "_check_image_height_and_width",
                    "save",
                    "is_label_file"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "load"
            ],
            "load_image_file": [
                "open",
                "read",
                "error"
            ],
            "load": [
                "io_open",
                "load",
                "get",
                "warning",
                "range",
                "len",
                "rectangle_from_diagonal",
                "basename",
                "b64decode",
                "join",
                "dirname",
                "load_image_file",
                "_check_image_height_and_width",
                "decode",
                "b64encode",
                "load_from_dict",
                "Shape",
                "LabelFileError",
                "items"
            ],
            "_check_image_height_and_width": [
                "img_b64_to_arr",
                "error"
            ],
            "save": [
                "decode",
                "b64encode",
                "_check_image_height_and_width",
                "enumerate",
                "calculate_bounding_box",
                "items",
                "io_open",
                "dump",
                "LabelFileError"
            ],
            "is_label_file": [
                "lower",
                "splitext"
            ]
        }
    },
    "anylabeling/views/labeling/label_widget.py": {
        "file_name": "/anylabeling/views/labeling/label_widget.py",
        "imports": [
            "functools",
            "html",
            "json",
            "math",
            "os",
            "os.path",
            "re",
            "shutil",
            "typing.Optional",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.pyqtSlot",
            "PyQt5.QtWidgets.QDockWidget",
            "PyQt5.QtWidgets.QGridLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPlainTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWhatsThis",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QScrollArea",
            "anylabeling.services.auto_labeling.types.AutoLabelingMode",
            "anylabeling.services.auto_labeling._THUMBNAIL_RENDER_MODELS",
            "anylabeling.views.training.UltralyticsDialog",
            "app_info.__appname__",
            "app_info.__version__",
            "app_info.__preferred_device__",
            ".utils",
            "config.get_config",
            "config.save_config",
            "label_file.LabelFile",
            "label_file.LabelFileError",
            "logger.logger",
            "shape.Shape",
            "widgets.AboutDialog",
            "widgets.AutoLabelingWidget",
            "widgets.BrightnessContrastDialog",
            "widgets.Canvas",
            "widgets.ChatbotDialog",
            "widgets.VQADialog",
            "widgets.CrosshairSettingsDialog",
            "widgets.FileDialogPreview",
            "widgets.GroupIDFilterComboBox",
            "widgets.LabelDialog",
            "widgets.LabelFilterComboBox",
            "widgets.LabelListWidget",
            "widgets.LabelListWidgetItem",
            "widgets.DigitShortcutDialog",
            "widgets.LabelModifyDialog",
            "widgets.GroupIDModifyDialog",
            "widgets.OverviewDialog",
            "widgets.SearchBar",
            "widgets.ToolBar",
            "widgets.UniqueLabelQListWidget",
            "widgets.ZoomWidget",
            "widgets.NavigatorDialog"
        ],
        "classes": [
            {
                "class_name": "LabelingWidget",
                "methods": [
                    "__init__",
                    "restore_navigator_state",
                    "_navigator_close_event",
                    "set_language",
                    "get_labeling_instruction",
                    "on_auto_segmentation_requested",
                    "on_auto_segmentation_disabled",
                    "on_auto_decode_requested",
                    "menu",
                    "central_widget",
                    "toolbar",
                    "statusBar",
                    "no_shape",
                    "populate_mode_actions",
                    "set_dirty",
                    "set_clean",
                    "get_image_progress_info",
                    "toggle_actions",
                    "queue_event",
                    "status",
                    "reset_state",
                    "reset_attribute",
                    "current_item",
                    "add_recent_file",
                    "undo_shape_edit",
                    "get_label_file_list",
                    "copy_shape_coordinates",
                    "union_selection",
                    "start_training",
                    "overview",
                    "digit_shortcut_manager",
                    "label_manager",
                    "gid_manager",
                    "open_chatbot",
                    "open_vqa",
                    "documentation",
                    "about",
                    "loop_thru_labels",
                    "copy_to_clipboard",
                    "toggle_drawing_sensitive",
                    "create_digit_mode",
                    "toggle_draw_mode",
                    "set_edit_mode",
                    "update_file_menu",
                    "pop_label_list_menu",
                    "validate_label",
                    "batch_edit_labels",
                    "edit_label",
                    "file_search_changed",
                    "file_selection_changed",
                    "attribute_selection_changed",
                    "update_selected_options",
                    "update_attributes",
                    "save_attributes",
                    "shape_selection_changed",
                    "add_label",
                    "load_labels",
                    "_update_shape_color",
                    "_get_rgb_by_label",
                    "remove_labels",
                    "load_shapes",
                    "load_flags",
                    "update_combo_box",
                    "update_gid_box",
                    "save_labels",
                    "duplicate_selected_shape",
                    "paste_selected_shape",
                    "toggle_system_clipboard",
                    "copy_selected_shape",
                    "text_selection_changed",
                    "gid_selection_changed",
                    "label_selection_changed",
                    "label_item_changed",
                    "label_order_changed",
                    "new_shape",
                    "show_shape",
                    "on_navigator_request",
                    "update_navigator_viewport",
                    "update_navigator_shapes",
                    "on_navigator_zoom_changed",
                    "_convert_navigator_pos_to_canvas",
                    "on_navigator_viewport_update_requested",
                    "toggle_navigator",
                    "scroll_request",
                    "set_scroll",
                    "set_zoom",
                    "add_zoom",
                    "zoom_request",
                    "set_fit_window",
                    "set_fit_width",
                    "set_cross_line",
                    "set_canvas_params",
                    "on_new_brightness_contrast",
                    "brightness_contrast",
                    "hide_selected_polygons",
                    "show_hidden_polygons",
                    "get_next_files",
                    "inform_next_files",
                    "load_file",
                    "keyPressEvent",
                    "resizeEvent",
                    "paint_canvas",
                    "adjust_scale",
                    "scale_fit_window",
                    "scale_fit_width",
                    "closeEvent",
                    "dragEnterEvent",
                    "dropEvent",
                    "load_recent",
                    "open_checked_image",
                    "open_prev_unchecked_image",
                    "open_next_unchecked_image",
                    "open_prev_image",
                    "open_next_image",
                    "open_file",
                    "change_output_dir_dialog",
                    "save_file",
                    "save_file_as",
                    "save_file_dialog",
                    "_save_file",
                    "close_file",
                    "get_label_file",
                    "get_image_file",
                    "delete_file",
                    "delete_image_file",
                    "has_labels",
                    "has_label_file",
                    "may_continue",
                    "error_message",
                    "current_path",
                    "toggle_visibility_shapes",
                    "remove_selected_point",
                    "delete_selected_shape",
                    "copy_shape",
                    "move_shape",
                    "open_folder_dialog",
                    "image_list",
                    "import_dropped_image_files",
                    "import_image_folder",
                    "toggle_auto_labeling_widget",
                    "new_shapes_from_auto_labeling",
                    "clear_auto_labeling_marks",
                    "find_last_label",
                    "set_cache_auto_label",
                    "finish_auto_labeling_object",
                    "shape_text_changed",
                    "set_text_editing",
                    "group_selected_shapes",
                    "ungroup_selected_shapes",
                    "update_thumbnail_pixmap",
                    "update_thumbnail_display"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "warning",
                "get_supported_shape",
                "get_config",
                "get",
                "QColor",
                "__init__",
                "super",
                "BrightnessContrastDialog",
                "LabelDialog",
                "LabelListWidget",
                "QDockWidget",
                "tr",
                "setObjectName",
                "QListWidget",
                "load_flags",
                "hide",
                "setWidget",
                "connect",
                "setStyleSheet",
                "LabelFilterComboBox",
                "GroupIDFilterComboBox",
                "setTitleBarWidget",
                "QWidget",
                "UniqueLabelQListWidget",
                "setToolTip",
                "load_labels",
                "SearchBar",
                "setPlaceholderText",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "addWidget",
                "setLayout",
                "ZoomWidget",
                "NavigatorDialog",
                "on_navigator_zoom_changed",
                "setAcceptDrops",
                "Canvas",
                "QScrollArea",
                "setWidgetResizable",
                "verticalScrollBar",
                "horizontalScrollBar",
                "update_navigator_viewport",
                "set_cross_line",
                "DockWidgetFeatures",
                "setFeatures",
                "getattr",
                "setVisible",
                "partial",
                "action",
                "open_video_file",
                "run_all_images",
                "update",
                "toggle_draw_mode",
                "create_digit_mode",
                "save_crop",
                "shape_conversion",
                "start_training",
                "QWidgetAction",
                "setDefaultWidget",
                "setWhatsThis",
                "format",
                "str",
                "fmt_shortcut",
                "setEnabled",
                "set_canvas_params",
                "upload_image_flags_file",
                "upload_label_flags_file",
                "upload_shape_attrs_file",
                "upload_label_classes_file",
                "upload_yolo_annotation",
                "upload_voc_annotation",
                "upload_coco_annotation",
                "upload_dota_annotation",
                "upload_mask_annotation",
                "upload_mot_annotation",
                "upload_odvg_annotation",
                "upload_mmgd_annotation",
                "upload_ppocr_annotation",
                "upload_vlm_r1_ovd_annotation",
                "export_yolo_annotation",
                "export_voc_annotation",
                "export_coco_annotation",
                "export_dota_annotation",
                "export_mask_annotation",
                "export_mot_annotation",
                "export_odvg_annotation",
                "export_pporc_annotation",
                "export_vlm_r1_ovd_annotation",
                "setChecked",
                "trigger",
                "QMenu",
                "add_actions",
                "setContextMenuPolicy",
                "Struct",
                "menu",
                "toggleViewAction",
                "toolbar",
                "QHBoxLayout",
                "QLabel",
                "get_labeling_instruction",
                "AutoLabelingWidget",
                "set_loading",
                "addSpacing",
                "addItem",
                "setStretch",
                "setAlignment",
                "on_thumbnail_click",
                "QGridLayout",
                "setVerticalScrollBarPolicy",
                "setHorizontalScrollBarPolicy",
                "QPlainTextEdit",
                "addLayout",
                "features",
                "QImage",
                "isdir",
                "import_image_folder",
                "setText",
                "file_search_changed",
                "QSettings",
                "value",
                "QSize",
                "QPoint",
                "resize",
                "move",
                "update_file_menu",
                "queue_event",
                "populate_mode_actions",
                "enterWhatsThisMode",
                "set_text_editing",
                "singleShot"
            ],
            "restore_navigator_state": [
                "value",
                "show",
                "hasattr",
                "isNull",
                "set_image",
                "fromImage",
                "update_navigator_viewport",
                "restoreGeometry",
                "resize",
                "move",
                "setChecked",
                "print"
            ],
            "_navigator_close_event": [
                "hasattr",
                "setChecked",
                "setValue",
                "closeEvent"
            ],
            "set_language": [
                "QMessageBox",
                "setText",
                "tr",
                "exec_",
                "close"
            ],
            "get_labeling_instruction": [
                "tr",
                "get_mode"
            ],
            "on_auto_segmentation_requested": [
                "set_auto_labeling",
                "setText",
                "get_labeling_instruction",
                "pyqtSlot"
            ],
            "on_auto_segmentation_disabled": [
                "set_auto_labeling",
                "setText",
                "get_labeling_instruction",
                "pyqtSlot"
            ],
            "on_auto_decode_requested": [
                "set_auto_labeling_marks",
                "run_prediction",
                "pyqtSlot"
            ],
            "menu": [
                "addMenu",
                "menuBar",
                "add_actions"
            ],
            "central_widget": [],
            "toolbar": [
                "ToolBar",
                "setObjectName",
                "setOrientation",
                "setToolButtonStyle",
                "setIconSize",
                "QSize",
                "setMaximumWidth",
                "add_actions"
            ],
            "statusBar": [
                "statusBar"
            ],
            "no_shape": [
                "len"
            ],
            "populate_mode_actions": [
                "clear",
                "add_actions"
            ],
            "set_dirty": [
                "setEnabled",
                "splitext",
                "basename",
                "save_labels",
                "update_navigator_shapes",
                "setWindowTitle"
            ],
            "set_clean": [
                "setEnabled",
                "get_image_progress_info",
                "basename",
                "str",
                "setWindowTitle",
                "has_label_file"
            ],
            "get_image_progress_info": [
                "str",
                "len"
            ],
            "toggle_actions": [
                "setEnabled"
            ],
            "queue_event": [
                "singleShot"
            ],
            "status": [
                "showMessage",
                "statusBar"
            ],
            "reset_state": [
                "clear",
                "reset_state"
            ],
            "reset_attribute": [
                "list",
                "keys",
                "find_most_similar_label",
                "error_message",
                "tr",
                "format"
            ],
            "current_item": [
                "selected_items"
            ],
            "add_recent_file": [
                "remove",
                "len",
                "pop",
                "insert"
            ],
            "undo_shape_edit": [
                "restore_shape",
                "clear",
                "load_shapes",
                "setEnabled",
                "set_dirty"
            ],
            "get_label_file_list": [
                "split",
                "join",
                "splitext",
                "exists",
                "listdir",
                "dirname",
                "endswith",
                "append"
            ],
            "copy_shape_coordinates": [
                "current_item",
                "shape",
                "len",
                "x",
                "y",
                "list",
                "map",
                "extend",
                "str",
                "clipboard",
                "setText"
            ],
            "union_selection": [
                "x",
                "y",
                "append",
                "copy",
                "len",
                "min",
                "max",
                "setX",
                "setY",
                "int",
                "zeros",
                "array",
                "reshape",
                "fillPoly",
                "findContours",
                "arcLength",
                "approxPolyDP",
                "QPointF",
                "float",
                "add_label",
                "remove_labels",
                "delete_selected",
                "set_dirty",
                "no_shape",
                "setEnabled"
            ],
            "start_training": [
                "UltralyticsDialog",
                "exec_",
                "error_message",
                "str"
            ],
            "overview": [
                "OverviewDialog"
            ],
            "digit_shortcut_manager": [
                "DigitShortcutDialog",
                "exec_",
                "save_config"
            ],
            "label_manager": [
                "LabelModifyDialog",
                "exec_",
                "load_file"
            ],
            "gid_manager": [
                "GroupIDModifyDialog",
                "exec_",
                "load_file"
            ],
            "open_chatbot": [
                "ChatbotDialog",
                "exec_"
            ],
            "open_vqa": [
                "error_message",
                "tr",
                "hasattr",
                "VQADialog",
                "setAttribute",
                "isVisible",
                "raise_",
                "activateWindow",
                "show"
            ],
            "documentation": [
                "open_url"
            ],
            "about": [
                "AboutDialog",
                "exec_"
            ],
            "loop_thru_labels": [
                "len",
                "set_zoom",
                "int",
                "scale_fit_window",
                "width",
                "central_widget",
                "height",
                "shape",
                "append",
                "x",
                "y",
                "max",
                "min",
                "maximum",
                "pageStep",
                "set_scroll",
                "update"
            ],
            "copy_to_clipboard": [
                "clipboard",
                "setText",
                "information",
                "tr"
            ],
            "toggle_drawing_sensitive": [
                "setEnabled"
            ],
            "create_digit_mode": [
                "get",
                "toggle_draw_mode"
            ],
            "toggle_draw_mode": [
                "clear_auto_labeling_marks",
                "set_auto_labeling_mode",
                "set_text_editing",
                "set_editing",
                "setEnabled",
                "ValueError",
                "setText",
                "get_labeling_instruction"
            ],
            "set_edit_mode": [
                "clear_auto_labeling_marks",
                "set_auto_labeling_mode",
                "toggle_draw_mode",
                "set_text_editing",
                "setText",
                "get_labeling_instruction"
            ],
            "update_file_menu": [
                "clear",
                "exists",
                "enumerate",
                "new_icon",
                "QAction",
                "fileName",
                "QFileInfo",
                "connect",
                "partial",
                "addAction"
            ],
            "exists": [
                "exists",
                "str"
            ],
            "pop_label_list_menu": [
                "exec_",
                "mapToGlobal"
            ],
            "validate_label": [
                "range",
                "count",
                "data",
                "item"
            ],
            "batch_edit_labels": [
                "question",
                "tr",
                "pop_up",
                "validate_label",
                "error_message",
                "format",
                "reset_attribute",
                "_update_shape_color",
                "find_item_by_shape",
                "getRgb",
                "setText",
                "escape",
                "setBackground",
                "QColor",
                "add_label_history",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "set_dirty",
                "update_combo_box",
                "update_gid_box"
            ],
            "edit_label": [
                "isinstance",
                "TypeError",
                "editing",
                "len",
                "batch_edit_labels",
                "current_item",
                "shape",
                "pop_up",
                "get",
                "validate_label",
                "error_message",
                "tr",
                "format",
                "reset_attribute",
                "add_label_history",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "_update_shape_color",
                "getRgb",
                "setText",
                "escape",
                "setBackground",
                "QColor",
                "set_dirty",
                "update_combo_box",
                "update_gid_box"
            ],
            "file_search_changed": [
                "import_image_folder",
                "text"
            ],
            "file_selection_changed": [
                "selectedItems",
                "may_continue",
                "str",
                "text",
                "len",
                "load_file",
                "QGridLayout",
                "QWidget",
                "setLayout",
                "setWidget",
                "setWidgetResizable"
            ],
            "attribute_selection_changed": [
                "currentText",
                "save_attributes"
            ],
            "update_selected_options": [
                "isinstance",
                "range",
                "len",
                "itemAtPosition",
                "widget",
                "text",
                "findText",
                "setCurrentIndex"
            ],
            "update_attributes": [
                "QGridLayout",
                "enumerate",
                "items",
                "QLabel",
                "QComboBox",
                "addItems",
                "connect",
                "attribute_selection_changed",
                "addWidget",
                "QWidget",
                "setLayout",
                "setWidget",
                "setWidgetResizable",
                "update_selected_options",
                "save_attributes"
            ],
            "save_attributes": [
                "splitext",
                "basename",
                "join",
                "LabelFile",
                "format_shape",
                "range",
                "count",
                "item",
                "text",
                "checkState",
                "relpath",
                "dirname",
                "exists",
                "makedirs",
                "save",
                "height",
                "width",
                "findItems",
                "len",
                "RuntimeError",
                "setCheckState",
                "error_message",
                "tr"
            ],
            "format_shape": [
                "copy",
                "x",
                "y",
                "update"
            ],
            "shape_selection_changed": [
                "clearSelection",
                "find_item_by_shape",
                "select_item",
                "scroll_to_item",
                "len",
                "set",
                "setEnabled",
                "all",
                "values",
                "set_text_editing",
                "range",
                "update_attributes"
            ],
            "add_label": [
                "LabelListWidgetItem",
                "add_iem",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "add_label_history",
                "setEnabled",
                "_update_shape_color",
                "getRgb",
                "setText",
                "format",
                "escape",
                "setBackground",
                "QColor",
                "update_combo_box",
                "update_gid_box"
            ],
            "load_labels": [
                "clear",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label"
            ],
            "_update_shape_color": [
                "_get_rgb_by_label",
                "QColor"
            ],
            "_get_rgb_by_label": [
                "tuple",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "row",
                "indexFromItem",
                "len"
            ],
            "remove_labels": [
                "find_item_by_shape",
                "remove_item",
                "update_combo_box",
                "update_gid_box"
            ],
            "load_shapes": [
                "add_label",
                "clearSelection",
                "load_shapes"
            ],
            "load_flags": [
                "clear",
                "items",
                "QListWidgetItem",
                "setFlags",
                "flags",
                "setCheckState",
                "addItem"
            ],
            "update_combo_box": [
                "shape",
                "append",
                "str",
                "list",
                "set",
                "sort",
                "update_items"
            ],
            "update_gid_box": [
                "shape",
                "append",
                "str",
                "list",
                "set",
                "sort",
                "update_items"
            ],
            "save_labels": [
                "LabelFile",
                "to_dict",
                "shape",
                "range",
                "count",
                "item",
                "text",
                "checkState",
                "relpath",
                "dirname",
                "exists",
                "makedirs",
                "save",
                "height",
                "width",
                "findItems",
                "len",
                "RuntimeError",
                "setCheckState",
                "error_message",
                "tr"
            ],
            "duplicate_selected_shape": [
                "duplicate_selected_shapes",
                "clearSelection",
                "add_label",
                "set_dirty"
            ],
            "paste_selected_shape": [
                "clipboard",
                "text",
                "loads",
                "append",
                "load_from_dict",
                "Shape",
                "error_message",
                "tr",
                "str",
                "load_shapes",
                "set_dirty"
            ],
            "toggle_system_clipboard": [
                "setEnabled",
                "bool"
            ],
            "copy_selected_shape": [
                "clipboard",
                "setText",
                "dumps",
                "to_dict",
                "copy",
                "setEnabled",
                "len"
            ],
            "text_selection_changed": [
                "itemText",
                "shape",
                "setCheckState"
            ],
            "gid_selection_changed": [
                "itemText",
                "shape",
                "str",
                "setCheckState"
            ],
            "label_selection_changed": [
                "editing",
                "selected_items",
                "append",
                "shape",
                "select_shapes",
                "deselect_shape"
            ],
            "label_item_changed": [
                "shape",
                "checkState",
                "set_shape_visible",
                "update_navigator_shapes"
            ],
            "label_order_changed": [
                "set_dirty",
                "load_shapes",
                "shape"
            ],
            "new_shape": [
                "selectedItems",
                "data",
                "find_last_label",
                "text",
                "pop_up",
                "get",
                "setText",
                "validate_label",
                "error_message",
                "tr",
                "format",
                "reset_attribute",
                "clearSelection",
                "set_last_label",
                "add_label",
                "setEnabled",
                "set_dirty",
                "undo_last_line",
                "pop"
            ],
            "show_shape": [
                "len",
                "status",
                "str",
                "tr",
                "int",
                "x",
                "y"
            ],
            "on_navigator_request": [
                "hasattr",
                "isNull",
                "size",
                "viewport",
                "width",
                "height",
                "set_scroll"
            ],
            "update_navigator_viewport": [
                "hasattr",
                "isNull",
                "size",
                "viewport",
                "width",
                "height",
                "value",
                "max",
                "min",
                "set_viewport",
                "update_navigator_shapes"
            ],
            "update_navigator_shapes": [
                "hasattr",
                "isVisible",
                "getattr",
                "set_shapes"
            ],
            "on_navigator_zoom_changed": [
                "hasattr",
                "isNull",
                "_convert_navigator_pos_to_canvas",
                "width",
                "setValue",
                "paint_canvas",
                "round",
                "x",
                "y",
                "set_scroll",
                "value",
                "isEmpty",
                "center",
                "QPoint",
                "int"
            ],
            "_convert_navigator_pos_to_canvas": [
                "hasattr",
                "isVisible",
                "isEmpty",
                "x",
                "y",
                "width",
                "height",
                "int",
                "QPoint"
            ],
            "on_navigator_viewport_update_requested": [
                "singleShot"
            ],
            "toggle_navigator": [
                "isVisible",
                "hide",
                "hasattr",
                "setChecked",
                "show",
                "isNull",
                "set_image",
                "fromImage",
                "update_navigator_viewport"
            ],
            "scroll_request": [
                "singleStep",
                "maximum",
                "value",
                "set_scroll"
            ],
            "set_scroll": [
                "setValue",
                "round",
                "update_navigator_viewport"
            ],
            "set_zoom": [
                "setChecked",
                "setValue",
                "hasattr",
                "set_zoom_value"
            ],
            "add_zoom": [
                "value",
                "ceil",
                "floor",
                "set_zoom"
            ],
            "zoom_request": [
                "width",
                "add_zoom",
                "round",
                "x",
                "y",
                "set_scroll",
                "value"
            ],
            "set_fit_window": [
                "setChecked",
                "adjust_scale"
            ],
            "set_fit_width": [
                "setChecked",
                "adjust_scale"
            ],
            "set_cross_line": [
                "CrosshairSettingsDialog",
                "exec_",
                "get_settings",
                "set_cross_line"
            ],
            "set_canvas_params": [
                "hasattr",
                "setattr",
                "update"
            ],
            "on_new_brightness_contrast": [
                "load_pixmap",
                "fromImage"
            ],
            "brightness_contrast": [
                "update_image",
                "img_data_to_pil",
                "get",
                "setValue",
                "exec_",
                "value"
            ],
            "hide_selected_polygons": [
                "shape",
                "setCheckState",
                "append",
                "extend",
                "update",
                "update_navigator_shapes"
            ],
            "show_hidden_polygons": [
                "pop",
                "find_item_by_shape",
                "setCheckState",
                "update",
                "update_navigator_shapes",
                "warning"
            ],
            "get_next_files": [
                "str",
                "append",
                "range",
                "len"
            ],
            "inform_next_files": [
                "get_next_files",
                "emit"
            ],
            "load_file": [
                "currentRow",
                "str",
                "setCurrentRow",
                "repaint",
                "reset_state",
                "setEnabled",
                "value",
                "exists",
                "error_message",
                "tr",
                "splitext",
                "dirname",
                "basename",
                "is_label_file",
                "LabelFile",
                "status",
                "join",
                "disconnect",
                "setPlainText",
                "get",
                "connect",
                "load_image_file",
                "fromData",
                "isNull",
                "decode",
                "data",
                "supportedImageFormats",
                "format",
                "set_image",
                "fromImage",
                "update_navigator_shapes",
                "hasattr",
                "isVisible",
                "update_navigator_viewport",
                "load_pixmap",
                "items",
                "match",
                "update_combo_box",
                "update_gid_box",
                "load_shapes",
                "update",
                "load_flags",
                "no_shape",
                "set_dirty",
                "set_clean",
                "set_zoom",
                "adjust_scale",
                "set_scroll",
                "update_image",
                "img_data_to_pil",
                "setValue",
                "on_new_value",
                "paint_canvas",
                "add_recent_file",
                "toggle_actions",
                "setFocus",
                "update_thumbnail_display"
            ],
            "keyPressEvent": [
                "key",
                "accept",
                "keyPressEvent",
                "super"
            ],
            "resizeEvent": [
                "isNull",
                "adjust_scale",
                "update_thumbnail_pixmap"
            ],
            "paint_canvas": [
                "isNull",
                "value",
                "adjustSize",
                "update",
                "update_navigator_viewport"
            ],
            "adjust_scale": [
                "int",
                "setValue",
                "hasattr",
                "set_zoom_value"
            ],
            "scale_fit_window": [
                "width",
                "central_widget",
                "height"
            ],
            "scale_fit_width": [
                "width",
                "central_widget"
            ],
            "closeEvent": [
                "may_continue",
                "ignore",
                "setValue",
                "size",
                "pos",
                "saveState",
                "hasattr",
                "isVisible",
                "saveGeometry",
                "save_config"
            ],
            "dragEnterEvent": [
                "lower",
                "decode",
                "data",
                "supportedImageFormats",
                "hasUrls",
                "mimeData",
                "toLocalFile",
                "urls",
                "any",
                "endswith",
                "tuple",
                "accept",
                "ignore"
            ],
            "dropEvent": [
                "may_continue",
                "ignore",
                "toLocalFile",
                "urls",
                "mimeData",
                "import_dropped_image_files"
            ],
            "load_recent": [
                "may_continue",
                "load_file"
            ],
            "open_checked_image": [
                "may_continue",
                "str",
                "range",
                "checkState",
                "item",
                "load_file"
            ],
            "open_prev_unchecked_image": [
                "open_checked_image",
                "may_continue",
                "len",
                "str",
                "range",
                "checkState",
                "item",
                "load_file"
            ],
            "open_next_unchecked_image": [
                "open_checked_image",
                "count",
                "may_continue",
                "len",
                "str",
                "range",
                "checkState",
                "item",
                "load_file"
            ],
            "open_prev_image": [
                "may_continue",
                "len",
                "str",
                "load_file"
            ],
            "open_next_image": [
                "may_continue",
                "len",
                "str",
                "load_file"
            ],
            "open_file": [
                "may_continue",
                "dirname",
                "str",
                "decode",
                "data",
                "supportedImageFormats",
                "tr",
                "join",
                "FileDialogPreview",
                "setFileMode",
                "setNameFilter",
                "setWindowTitle",
                "setWindowFilePath",
                "setViewMode",
                "exec_",
                "selectedFiles",
                "clear",
                "load_file"
            ],
            "change_output_dir_dialog": [
                "dirname",
                "current_path",
                "getExistingDirectory",
                "tr",
                "str",
                "showMessage",
                "statusBar",
                "show",
                "import_image_folder",
                "setCurrentRow",
                "repaint"
            ],
            "save_file": [
                "isNull",
                "_save_file",
                "close",
                "save_file_dialog"
            ],
            "save_file_as": [
                "isNull",
                "_save_file",
                "save_file_dialog"
            ],
            "save_file_dialog": [
                "tr",
                "QFileDialog",
                "current_path",
                "setDefaultSuffix",
                "setAcceptMode",
                "setOption",
                "basename",
                "splitext",
                "join",
                "getSaveFileName",
                "isinstance"
            ],
            "_save_file": [
                "save_labels",
                "add_recent_file",
                "set_clean"
            ],
            "close_file": [
                "may_continue",
                "reset_state",
                "set_clean",
                "toggle_actions",
                "setEnabled"
            ],
            "get_label_file": [
                "endswith",
                "lower",
                "splitext",
                "join",
                "basename"
            ],
            "get_image_file": [
                "endswith",
                "lower"
            ],
            "delete_file": [
                "get",
                "warning",
                "tr",
                "get_label_file",
                "exists",
                "remove",
                "info",
                "currentItem",
                "setCheckState",
                "reset_state",
                "load_file"
            ],
            "delete_image_file": [
                "len",
                "get",
                "warning",
                "tr",
                "get_image_file",
                "exists",
                "split",
                "join",
                "makedirs",
                "move",
                "info",
                "realpath",
                "dirname",
                "splitext",
                "remove",
                "str",
                "reset_state",
                "isfile",
                "import_image_folder",
                "load_file"
            ],
            "has_labels": [
                "no_shape",
                "error_message"
            ],
            "has_label_file": [
                "get_label_file",
                "exists"
            ],
            "may_continue": [
                "tr",
                "question",
                "save_file"
            ],
            "error_message": [
                "critical"
            ],
            "current_path": [
                "dirname",
                "str"
            ],
            "toggle_visibility_shapes": [
                "enumerate",
                "setCheckState",
                "shape",
                "update_navigator_shapes"
            ],
            "remove_selected_point": [
                "remove_selected_point",
                "update",
                "delete_shape",
                "remove_labels",
                "set_dirty",
                "no_shape",
                "setEnabled"
            ],
            "delete_selected_shape": [
                "remove_labels",
                "delete_selected",
                "set_dirty",
                "no_shape",
                "setEnabled"
            ],
            "copy_shape": [
                "end_move",
                "add_label",
                "clearSelection",
                "set_dirty"
            ],
            "move_shape": [
                "end_move",
                "set_dirty"
            ],
            "open_folder_dialog": [
                "may_continue",
                "exists",
                "dirname",
                "str",
                "getExistingDirectory",
                "tr",
                "import_image_folder"
            ],
            "image_list": [
                "range",
                "count",
                "item",
                "append",
                "text"
            ],
            "import_dropped_image_files": [
                "lower",
                "decode",
                "data",
                "supportedImageFormats",
                "endswith",
                "tuple",
                "splitext",
                "basename",
                "QListWidgetItem",
                "setFlags",
                "exists",
                "is_label_file",
                "setCheckState",
                "addItem",
                "count",
                "len",
                "setEnabled",
                "open_next_image"
            ],
            "import_image_folder": [
                "may_continue",
                "clear",
                "scan_all_images",
                "append",
                "check_img_exif",
                "splitext",
                "basename",
                "QListWidgetItem",
                "setFlags",
                "exists",
                "is_label_file",
                "setCheckState",
                "addItem",
                "count",
                "question",
                "tr",
                "len",
                "info",
                "_process_exif_with_progress",
                "setEnabled",
                "open_next_image"
            ],
            "_process_exif_with_progress": [
                "QProgressDialog",
                "tr",
                "len",
                "setWindowModality",
                "setAutoClose",
                "enumerate",
                "wasCanceled",
                "setLabelText",
                "basename",
                "setValue",
                "processEvents",
                "process_image_exif",
                "join",
                "dirname",
                "information"
            ],
            "toggle_auto_labeling_widget": [
                "isVisible",
                "hide",
                "setEnabled",
                "show",
                "update_thumbnail_display"
            ],
            "new_shapes_from_auto_labeling": [
                "load_shapes",
                "clear",
                "find_item_by_shape",
                "remove_item",
                "setText",
                "tr",
                "setPlainText",
                "setDisabled",
                "set_dirty",
                "pyqtSlot"
            ],
            "clear_auto_labeling_marks": [
                "find_item_by_shape",
                "remove_item",
                "find_items_by_label",
                "takeItem",
                "row",
                "update"
            ],
            "find_last_label": [
                "get_last_label",
                "selected_items",
                "data",
                "reversed"
            ],
            "set_cache_auto_label": [
                "on_cache_auto_label_changed"
            ],
            "finish_auto_labeling_object": [
                "find_last_label",
                "text",
                "pop_up",
                "get",
                "setText",
                "validate_label",
                "error_message",
                "tr",
                "format",
                "reset_attribute",
                "add_label_history",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "_update_shape_color",
                "find_item_by_shape",
                "getRgb",
                "escape",
                "clear_auto_labeling_marks",
                "setBackground",
                "QColor",
                "update_item_color",
                "set_dirty"
            ],
            "shape_text_changed": [
                "toPlainText",
                "editing",
                "len",
                "set_dirty"
            ],
            "set_text_editing": [
                "len",
                "setText",
                "tr",
                "disconnect",
                "setPlainText",
                "connect",
                "get",
                "setDisabled",
                "QFont",
                "setPointSize",
                "setFont"
            ],
            "group_selected_shapes": [
                "group_selected_shapes",
                "set_dirty",
                "load_file"
            ],
            "ungroup_selected_shapes": [
                "ungroup_selected_shapes",
                "set_dirty",
                "load_file"
            ],
            "update_thumbnail_pixmap": [
                "isNull",
                "width",
                "setPixmap",
                "scaledToWidth"
            ],
            "update_thumbnail_display": [
                "clear",
                "hide",
                "list",
                "keys",
                "get",
                "dirname",
                "splitext",
                "basename",
                "join",
                "exists",
                "QPixmap",
                "isNull",
                "show",
                "update_thumbnail_pixmap",
                "error",
                "str"
            ]
        }
    },
    "anylabeling/views/labeling/logger.py": {
        "file_name": "/anylabeling/views/labeling/logger.py",
        "imports": [
            "logging",
            "sys",
            "functools.wraps",
            "typing.Callable",
            "typing.Dict",
            "termcolor"
        ],
        "classes": [
            {
                "class_name": "ColoredFormatter",
                "methods": [
                    "__init__",
                    "format",
                    "_color_record"
                ]
            },
            {
                "class_name": "AppLogger",
                "methods": [
                    "__init__",
                    "_setup_handler",
                    "__getattr__",
                    "set_level"
                ]
            }
        ],
        "functions": {
            "singleton": [],
            "get_instance": [
                "cls",
                "wraps"
            ],
            "__init__": [
                "__init__",
                "super",
                "getLogger",
                "_setup_handler"
            ],
            "format": [
                "_color_record",
                "formatTime",
                "format",
                "super"
            ],
            "_color_record": [
                "colored",
                "formatTime"
            ],
            "colored": [
                "colored"
            ],
            "_setup_handler": [
                "StreamHandler",
                "ColoredFormatter",
                "setFormatter",
                "addHandler"
            ],
            "__getattr__": [
                "getattr"
            ],
            "set_level": [
                "setLevel"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/toolbar.py": {
        "file_name": "/anylabeling/views/labeling/widgets/toolbar.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ToolBar",
                "methods": [
                    "__init__",
                    "add_action"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "layout",
                "setSpacing",
                "setContentsMargins",
                "setWindowFlags",
                "windowFlags",
                "setStyleSheet"
            ],
            "add_action": [
                "isinstance",
                "addAction",
                "super",
                "QToolButton",
                "setDefaultAction",
                "setToolButtonStyle",
                "toolButtonStyle",
                "addWidget",
                "range",
                "count",
                "layout",
                "widget",
                "itemAt",
                "setAlignment"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/popup.py": {
        "file_name": "/anylabeling/views/labeling/widgets/popup.py",
        "imports": [
            "os",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QGraphicsDropShadowEffect",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtCore.QRectF",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtGui.QPainter",
            "PyQt5.QtGui.QPainterPath",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QIcon"
        ],
        "classes": [
            {
                "class_name": "Popup",
                "methods": [
                    "__init__",
                    "paintEvent",
                    "show_popup"
                ]
            }
        ],
        "functions": {
            "is_wsl": [
                "exists",
                "open",
                "lower",
                "read"
            ],
            "__init__": [
                "__init__",
                "super",
                "setStyleSheet",
                "QHBoxLayout",
                "setContentsMargins",
                "QLabel",
                "setPixmap",
                "pixmap",
                "QIcon",
                "QSize",
                "setSizePolicy",
                "addWidget",
                "addSpacing",
                "setAlignment",
                "QVBoxLayout",
                "addLayout",
                "setLayout",
                "setAttribute",
                "setWindowFlags",
                "QGraphicsDropShadowEffect",
                "setBlurRadius",
                "setColor",
                "QColor",
                "setOffset",
                "setGraphicsEffect",
                "QTimer",
                "setSingleShot",
                "connect",
                "start"
            ],
            "paintEvent": [
                "QPainter",
                "setRenderHint",
                "QPainterPath",
                "QRectF",
                "rect",
                "addRoundedRect",
                "fillPath",
                "QColor"
            ],
            "show_popup": [
                "is_wsl",
                "replace",
                "system",
                "clipboard",
                "setText",
                "geometry",
                "adjustSize",
                "width",
                "sizeHint",
                "x",
                "y",
                "height",
                "setGeometry",
                "show"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/label_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/label_dialog.py",
        "imports": [
            "os",
            "re",
            "json",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtGui.QFont",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QIntValidator",
            "PyQt5.QtCore.QCoreApplication",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QColorDialog",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QCheckBox",
            "anylabeling.views.labeling.utils",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.popup.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_spinbox_style"
        ],
        "classes": [
            {
                "class_name": "ColoredComboBox",
                "methods": [
                    "__init__",
                    "addModeItem",
                    "paintEvent"
                ]
            },
            {
                "class_name": "DigitShortcutDialog",
                "methods": [
                    "__init__",
                    "on_mode_changed",
                    "reset_settings",
                    "save_settings",
                    "move_to_center"
                ]
            },
            {
                "class_name": "GroupIDModifyDialog",
                "methods": [
                    "__init__",
                    "get_image_file_list",
                    "get_shape_file_list",
                    "get_gid_info",
                    "init_ui",
                    "move_to_center",
                    "populate_table",
                    "update_range",
                    "confirm_changes",
                    "modify_group_id"
                ]
            },
            {
                "class_name": "LabelColorButton",
                "methods": [
                    "__init__",
                    "init_ui",
                    "set_color",
                    "mousePressEvent"
                ]
            },
            {
                "class_name": "LabelModifyDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "get_image_file_list",
                    "move_to_center",
                    "populate_table",
                    "change_color",
                    "on_delete_checkbox_changed",
                    "confirm_changes",
                    "modify_label",
                    "init_label_info",
                    "update_range"
                ]
            },
            {
                "class_name": "LabelQLineEdit",
                "methods": [
                    "__init__",
                    "set_list_widget",
                    "keyPressEvent"
                ]
            },
            {
                "class_name": "LabelDialog",
                "methods": [
                    "__init__",
                    "add_linking_pair",
                    "keyPressEvent",
                    "remove_linking_item",
                    "reset_linking",
                    "get_last_label",
                    "sort_labels",
                    "add_label_history",
                    "remove_label_history",
                    "label_selected",
                    "validate",
                    "label_double_clicked",
                    "postprocess",
                    "upload_flags",
                    "update_flags",
                    "delete_flags",
                    "reset_flags",
                    "set_flags",
                    "get_flags",
                    "get_group_id",
                    "get_description",
                    "get_difficult_state",
                    "get_kie_linking",
                    "pop_up"
                ]
            }
        ],
        "functions": {
            "natural_sort_key": [
                "isdigit",
                "int",
                "lower",
                "split"
            ],
            "__init__": [
                "__init__",
                "super",
                "QColor",
                "hasattr",
                "copy",
                "setWindowTitle",
                "tr",
                "setModal",
                "setMinimumSize",
                "setWindowFlags",
                "windowFlags",
                "setStyleSheet",
                "new_icon_path",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QTableWidget",
                "setColumnCount",
                "setRowCount",
                "setHorizontalHeaderLabels",
                "setSelectionBehavior",
                "setSectionResizeMode",
                "horizontalHeader",
                "setVisible",
                "verticalHeader",
                "setEditTriggers",
                "range",
                "QTableWidgetItem",
                "str",
                "setTextAlignment",
                "setItem",
                "ColoredComboBox",
                "addItem",
                "addModeItem",
                "int",
                "findData",
                "setCurrentIndex",
                "connect",
                "on_mode_changed",
                "setCellWidget",
                "QLineEdit",
                "setText",
                "setEnabled",
                "QHBoxLayout",
                "QPushButton",
                "setFixedSize",
                "addStretch",
                "addLayout",
                "setLayout",
                "move_to_center",
                "setDefaultSectionSize",
                "get_image_file_list",
                "get_shape_file_list",
                "get_gid_info",
                "len",
                "init_ui",
                "init_label_info",
                "translate",
                "LabelQLineEdit",
                "setPlaceholderText",
                "setValidator",
                "label_validator",
                "QRegularExpressionValidator",
                "QRegularExpression",
                "setAlignment",
                "QCheckBox",
                "setChecked",
                "font",
                "setPointSize",
                "setFont",
                "QListWidget",
                "setHidden",
                "height",
                "fontMetrics",
                "setFixedHeight",
                "frameWidth",
                "QDialogButtonBox",
                "setIcon",
                "button",
                "new_icon",
                "QTextEdit",
                "setHorizontalScrollBarPolicy",
                "setVerticalScrollBarPolicy",
                "addItems",
                "sort_labels",
                "setDragDropMode",
                "set_list_widget",
                "reset_flags",
                "QCompleter",
                "setCompletionMode",
                "setFilterMode",
                "ValueError",
                "setModel",
                "model",
                "setCompleter"
            ],
            "addModeItem": [
                "addItem",
                "count",
                "setItemData"
            ],
            "paintEvent": [
                "QStylePainter",
                "setPen",
                "color",
                "palette",
                "QStyleOptionComboBox",
                "initStyleOption",
                "drawComplexControl",
                "currentText",
                "subElementRect",
                "style",
                "adjust",
                "drawText"
            ],
            "on_mode_changed": [
                "cellWidget",
                "itemData",
                "setEnabled",
                "clear",
                "setStyleSheet",
                "setPlaceholderText",
                "tr"
            ],
            "reset_settings": [
                "warning",
                "tr",
                "range",
                "cellWidget",
                "setCurrentIndex",
                "clear",
                "setEnabled"
            ],
            "save_settings": [
                "range",
                "cellWidget",
                "setStyleSheet",
                "currentData",
                "strip",
                "text",
                "int",
                "warning",
                "tr",
                "hasattr",
                "accept",
                "Popup",
                "new_icon_path",
                "show_popup"
            ],
            "move_to_center": [
                "screenGeometry",
                "desktop",
                "geometry",
                "move",
                "width",
                "height",
                "frameGeometry",
                "center",
                "availableGeometry",
                "QDesktopWidget",
                "moveCenter",
                "topLeft"
            ],
            "get_image_file_list": [
                "count",
                "range",
                "text",
                "item",
                "append"
            ],
            "get_shape_file_list": [
                "split",
                "join",
                "splitext",
                "exists",
                "append"
            ],
            "get_gid_info": [
                "set",
                "open",
                "load",
                "get",
                "add",
                "sorted",
                "list"
            ],
            "init_ui": [
                "setWindowTitle",
                "tr",
                "setWindowFlags",
                "windowFlags",
                "resize",
                "move_to_center",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QTableWidget",
                "setColumnCount",
                "len",
                "setHorizontalHeaderLabels",
                "setStretchLastSection",
                "horizontalHeader",
                "setSectionResizeMode",
                "setColumnWidth",
                "setStyleSheet",
                "verticalHeader",
                "setDefaultAlignment",
                "setFixedWidth",
                "addWidget",
                "QHBoxLayout",
                "addStretch",
                "QLabel",
                "QSpinBox",
                "setMinimum",
                "setMaximum",
                "setSingleStep",
                "setValue",
                "get_spinbox_style",
                "QPushButton",
                "get_ok_btn_style",
                "connect",
                "addLayout",
                "populate_table",
                "setFixedSize",
                "name",
                "range",
                "setFont",
                "horizontalHeaderItem",
                "QFont",
                "setTextAlignment"
            ],
            "populate_table": [
                "enumerate",
                "insertRow",
                "QTableWidgetItem",
                "str",
                "setTextAlignment",
                "setFlags",
                "flags",
                "QLineEdit",
                "setValidator",
                "QIntValidator",
                "setPlaceholderText",
                "setAlignment",
                "setFixedHeight",
                "QWidget",
                "QHBoxLayout",
                "setContentsMargins",
                "addWidget",
                "setItem",
                "setCellWidget",
                "setRowHeight",
                "items",
                "QCheckBox",
                "setChecked",
                "setIcon",
                "QIcon",
                "connect",
                "on_delete_checkbox_changed",
                "setBackground",
                "QColor",
                "setAlpha",
                "LabelColorButton",
                "setParent"
            ],
            "update_range": [
                "text",
                "int",
                "len",
                "setValue",
                "information",
                "tr",
                "confirm_changes"
            ],
            "confirm_changes": [
                "rowCount",
                "range",
                "item",
                "cellWidget",
                "widget",
                "itemAt",
                "layout",
                "text",
                "append",
                "int",
                "modify_group_id",
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup",
                "accept",
                "reject",
                "isChecked",
                "update_item_color",
                "remove_items_by_label",
                "remove_label_history",
                "add_label_history",
                "modify_label"
            ],
            "modify_group_id": [
                "enumerate",
                "split",
                "join",
                "splitext",
                "exists",
                "open",
                "load",
                "get",
                "int",
                "append",
                "dump",
                "error"
            ],
            "set_color": [
                "setStyleSheet",
                "name"
            ],
            "mousePressEvent": [
                "button",
                "change_color"
            ],
            "change_color": [
                "row",
                "indexAt",
                "pos",
                "text",
                "item",
                "getColor",
                "QColor",
                "isValid",
                "red",
                "green",
                "blue",
                "alpha",
                "set_color"
            ],
            "on_delete_checkbox_changed": [
                "item",
                "cellWidget",
                "setFlags",
                "flags",
                "setBackground",
                "QColor",
                "setCheckable",
                "text"
            ],
            "modify_label": [
                "enumerate",
                "split",
                "join",
                "splitext",
                "exists",
                "open",
                "load",
                "append",
                "dump",
                "error"
            ],
            "init_label_info": [
                "set",
                "split",
                "join",
                "splitext",
                "exists",
                "open",
                "load",
                "get",
                "add",
                "sorted",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "list",
                "dict"
            ],
            "set_list_widget": [],
            "keyPressEvent": [
                "key",
                "keyPressEvent",
                "super",
                "hasattr",
                "selectedItems",
                "takeItem",
                "row"
            ],
            "add_linking_pair": [
                "text",
                "eval",
                "isinstance",
                "len",
                "all",
                "get_kie_linking",
                "warning",
                "tr",
                "addItem",
                "str",
                "clear",
                "setHidden",
                "error"
            ],
            "remove_linking_item": [
                "itemWidget",
                "takeItem",
                "row",
                "deleteLater"
            ],
            "reset_linking": [
                "clear",
                "addItem",
                "str",
                "setHidden"
            ],
            "get_last_label": [],
            "sort_labels": [
                "range",
                "count",
                "append",
                "text",
                "item",
                "sort",
                "clear",
                "addItems"
            ],
            "add_label_history": [
                "findItems",
                "addItem",
                "sort_labels",
                "setCurrentItem"
            ],
            "remove_label_history": [
                "findItems",
                "warning",
                "takeItem",
                "row",
                "text",
                "clear"
            ],
            "label_selected": [
                "setText",
                "text",
                "clear"
            ],
            "validate": [
                "text",
                "hasattr",
                "strip",
                "trimmed",
                "accept"
            ],
            "label_double_clicked": [
                "validate"
            ],
            "postprocess": [
                "text",
                "hasattr",
                "strip",
                "trimmed",
                "setText"
            ],
            "upload_flags": [],
            "update_flags": [
                "get_flags",
                "items",
                "match",
                "get",
                "set_flags"
            ],
            "delete_flags": [
                "reversed",
                "range",
                "count",
                "widget",
                "itemAt",
                "removeWidget",
                "setParent"
            ],
            "reset_flags": [
                "items",
                "match",
                "set_flags"
            ],
            "set_flags": [
                "delete_flags",
                "QCheckBox",
                "setChecked",
                "addWidget",
                "show"
            ],
            "get_flags": [
                "range",
                "count",
                "widget",
                "itemAt",
                "text",
                "isChecked"
            ],
            "get_group_id": [
                "text",
                "int"
            ],
            "get_description": [
                "toPlainText"
            ],
            "get_difficult_state": [
                "isChecked"
            ],
            "get_kie_linking": [
                "range",
                "count",
                "item",
                "append",
                "eval",
                "text"
            ],
            "pop_up": [
                "setMinimumHeight",
                "sizeHintForRow",
                "count",
                "setMinimumWidth",
                "sizeHintForColumn",
                "text",
                "setPlainText",
                "reset_linking",
                "set_flags",
                "reset_flags",
                "setChecked",
                "setText",
                "setSelection",
                "len",
                "clear",
                "str",
                "findItems",
                "warning",
                "setCurrentItem",
                "row",
                "setCurrentRow",
                "completer",
                "setFocus",
                "pos",
                "screenGeometry",
                "desktop",
                "frameGeometry",
                "x",
                "width",
                "right",
                "setX",
                "y",
                "height",
                "bottom",
                "setY",
                "move",
                "screenNumber",
                "cursor",
                "center",
                "moveCenter",
                "topLeft",
                "exec_",
                "get_flags",
                "get_group_id",
                "get_description",
                "get_difficult_state",
                "get_kie_linking"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/about_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/about_dialog.py",
        "imports": [
            "threading",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtWebEngineWidgets.QWebEngineView",
            "anylabeling.app_info.__appname__",
            "anylabeling.app_info.__version__",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.utils.general.collect_system_info",
            "anylabeling.views.labeling.utils.general.open_url",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.update_checker.check_for_updates_sync",
            "anylabeling.views.labeling.widgets.popup.Popup",
            "anylabeling.views.labeling.chatbot.render.convert_markdown_to_html"
        ],
        "classes": [
            {
                "class_name": "AboutDialog",
                "methods": [
                    "__init__",
                    "move_to_center",
                    "copy_app_info",
                    "check_for_updates",
                    "check_updates_in_background",
                    "show_update_dialog",
                    "_handle_update_ok",
                    "copy_to_clipboard"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "setFixedSize",
                "setStyleSheet",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "setAlignment",
                "addWidget",
                "QHBoxLayout",
                "QPushButton",
                "tr",
                "setObjectName",
                "connect",
                "open_url",
                "addLayout",
                "setIcon",
                "QIcon",
                "new_icon",
                "setIconSize",
                "QSize",
                "setToolTip",
                "copy_to_clipboard",
                "addStretch",
                "move_to_center",
                "singleShot"
            ],
            "move_to_center": [
                "frameGeometry",
                "center",
                "availableGeometry",
                "screen",
                "moveCenter",
                "move",
                "topLeft"
            ],
            "copy_app_info": [
                "collect_system_info",
                "join",
                "items",
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup"
            ],
            "check_for_updates": [
                "show_update_dialog",
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup",
                "check_for_updates_sync"
            ],
            "check_updates_in_background": [
                "Thread",
                "start"
            ],
            "update_check_thread": [
                "check_for_updates_sync",
                "singleShot",
                "show_update_dialog"
            ],
            "show_update_dialog": [
                "QDialog",
                "setWindowTitle",
                "tr",
                "setMinimumSize",
                "QVBoxLayout",
                "format",
                "QLabel",
                "setAlignment",
                "setStyleSheet",
                "addWidget",
                "QWebEngineView",
                "setMinimumHeight",
                "setSizePolicy",
                "setHtml",
                "convert_markdown_to_html",
                "QHBoxLayout",
                "addStretch",
                "QPushButton",
                "connect",
                "setDefault",
                "_handle_update_ok",
                "addLayout",
                "exec_"
            ],
            "_handle_update_ok": [
                "accept",
                "open_url"
            ],
            "copy_to_clipboard": [
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/navigator_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/navigator_widget.py",
        "imports": [
            "typing.List",
            "typing.Optional",
            "typing.Any",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtCore.QRect",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtGui.QBrush",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QMouseEvent",
            "PyQt5.QtGui.QPainter",
            "PyQt5.QtGui.QPen",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtWidgets.QSlider",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "anylabeling.views.labeling.chatbot.ChatbotDialogStyle",
            "PyQt5.QtGui.QPolygon"
        ],
        "classes": [
            {
                "class_name": "ClickableSlider",
                "methods": [
                    "__init__",
                    "mousePressEvent"
                ]
            },
            {
                "class_name": "NavigatorWidget",
                "methods": [
                    "__init__",
                    "set_image",
                    "_update_thumbnail",
                    "set_viewport",
                    "set_shapes",
                    "resizeEvent",
                    "paintEvent",
                    "_draw_shapes_overlay",
                    "_get_shape_color",
                    "_get_shape_brush",
                    "_points_in_bounds",
                    "_draw_rectangle_on_thumbnail",
                    "_draw_polygon_on_thumbnail",
                    "_draw_circle_on_thumbnail",
                    "_draw_line_on_thumbnail",
                    "_draw_linestrip_on_thumbnail",
                    "_draw_point_on_thumbnail",
                    "mousePressEvent",
                    "mouseMoveEvent",
                    "mouseReleaseEvent",
                    "wheelEvent",
                    "_emit_navigation_signal"
                ]
            },
            {
                "class_name": "NavigatorDialog",
                "methods": [
                    "__init__",
                    "resizeEvent",
                    "set_image",
                    "set_viewport",
                    "set_shapes",
                    "set_zoom_value",
                    "on_slider_changed",
                    "on_zoom_input_changed",
                    "zoom_in",
                    "zoom_out",
                    "handle_wheel_zoom"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setMinimumSize",
                "setSizePolicy",
                "setWindowTitle",
                "tr",
                "QRect",
                "QPoint",
                "QPen",
                "QColor",
                "QBrush",
                "setMouseTracking",
                "setWindowFlags",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "NavigatorWidget",
                "addWidget",
                "connect",
                "QWidget",
                "setFixedHeight",
                "QHBoxLayout",
                "setFixedSize",
                "setStyleSheet",
                "QLineEdit",
                "setFixedWidth",
                "setAlignment",
                "setText",
                "QLabel",
                "ClickableSlider",
                "setRange",
                "setValue",
                "get_slider_style",
                "setLayout",
                "resize"
            ],
            "mousePressEvent": [
                "button",
                "orientation",
                "pixelMetric",
                "style",
                "minimum",
                "maximum",
                "value",
                "width",
                "x",
                "abs",
                "mousePressEvent",
                "super",
                "max",
                "min",
                "int",
                "setValue",
                "contains",
                "pos",
                "_emit_navigation_signal"
            ],
            "set_image": [
                "update",
                "isinstance",
                "QPixmap",
                "loadFromData",
                "str",
                "_update_thumbnail",
                "set_image"
            ],
            "_update_thumbnail": [
                "isNull",
                "size",
                "QSize",
                "width",
                "height",
                "scaled",
                "QRect"
            ],
            "set_viewport": [
                "isEmpty",
                "width",
                "height",
                "int",
                "x",
                "y",
                "max",
                "QRect",
                "update",
                "set_viewport"
            ],
            "set_shapes": [
                "update",
                "set_shapes"
            ],
            "resizeEvent": [
                "resizeEvent",
                "super",
                "_update_thumbnail",
                "update",
                "emit"
            ],
            "paintEvent": [
                "QPainter",
                "setRenderHint",
                "fillRect",
                "rect",
                "isNull",
                "drawPixmap",
                "_draw_shapes_overlay",
                "isEmpty",
                "setPen",
                "setBrush",
                "QBrush",
                "drawRect"
            ],
            "_draw_shapes_overlay": [
                "isEmpty",
                "isNull",
                "width",
                "height",
                "hasattr",
                "_get_shape_color",
                "_get_shape_brush",
                "setPen",
                "QPen",
                "setBrush",
                "x",
                "y",
                "append",
                "QPoint",
                "int",
                "_points_in_bounds",
                "_draw_rectangle_on_thumbnail",
                "_draw_polygon_on_thumbnail",
                "_draw_circle_on_thumbnail",
                "_draw_line_on_thumbnail",
                "_draw_linestrip_on_thumbnail",
                "_draw_point_on_thumbnail"
            ],
            "_get_shape_color": [
                "hasattr",
                "QColor",
                "isValid"
            ],
            "_get_shape_brush": [
                "getattr",
                "QBrush",
                "hasattr",
                "isValid"
            ],
            "_points_in_bounds": [
                "adjusted",
                "contains",
                "len",
                "min",
                "x",
                "max",
                "y",
                "QRect",
                "intersects"
            ],
            "_draw_rectangle_on_thumbnail": [
                "len",
                "QRect",
                "drawRect",
                "_draw_polygon_on_thumbnail"
            ],
            "_draw_polygon_on_thumbnail": [
                "len",
                "QPolygon",
                "drawPolygon"
            ],
            "_draw_circle_on_thumbnail": [
                "len",
                "int",
                "x",
                "y",
                "drawEllipse"
            ],
            "_draw_line_on_thumbnail": [
                "len",
                "drawLine"
            ],
            "_draw_linestrip_on_thumbnail": [
                "len",
                "range",
                "drawLine"
            ],
            "_draw_point_on_thumbnail": [
                "len",
                "fillRect",
                "x",
                "y",
                "color"
            ],
            "mouseMoveEvent": [
                "contains",
                "pos",
                "_emit_navigation_signal"
            ],
            "mouseReleaseEvent": [
                "button"
            ],
            "wheelEvent": [
                "hasattr",
                "parent",
                "handle_wheel_zoom",
                "accept"
            ],
            "_emit_navigation_signal": [
                "isEmpty",
                "x",
                "y",
                "max",
                "min",
                "width",
                "height",
                "emit"
            ],
            "set_zoom_value": [
                "blockSignals",
                "setValue",
                "setText",
                "str"
            ],
            "on_slider_changed": [
                "setText",
                "str",
                "emit"
            ],
            "on_zoom_input_changed": [
                "int",
                "text",
                "max",
                "min",
                "setValue",
                "setText",
                "str",
                "emit"
            ],
            "zoom_in": [
                "min",
                "set_zoom_value",
                "emit"
            ],
            "zoom_out": [
                "max",
                "set_zoom_value",
                "emit"
            ],
            "handle_wheel_zoom": [
                "y",
                "angleDelta",
                "max",
                "min",
                "set_zoom_value",
                "emit",
                "pos",
                "accept"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/zoom_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/zoom_widget.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ZoomWidget",
                "methods": [
                    "__init__",
                    "minimumSizeHint"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setButtonSymbols",
                "setRange",
                "setSuffix",
                "setValue",
                "setToolTip",
                "tr",
                "setStatusTip",
                "toolTip",
                "setAlignment",
                "font",
                "setPointSize",
                "setFont"
            ],
            "minimumSizeHint": [
                "height",
                "minimumSizeHint",
                "super",
                "QFontMetrics",
                "font",
                "horizontalAdvance",
                "str",
                "maximum",
                "QSize"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/__init__.py": {
        "file_name": "/anylabeling/views/labeling/widgets/__init__.py",
        "imports": [
            "about_dialog.AboutDialog",
            "auto_labeling.AutoLabelingWidget",
            "brightness_contrast_dialog.BrightnessContrastDialog",
            "canvas.Canvas",
            "chatbot_dialog.ChatbotDialog",
            "color_dialog.ColorDialog",
            "crosshair_settings_dialog.CrosshairSettingsDialog",
            "file_dialog_preview.FileDialogPreview",
            "filter_label_widget.GroupIDFilterComboBox",
            "filter_label_widget.LabelFilterComboBox",
            "label_dialog.DigitShortcutDialog",
            "label_dialog.GroupIDModifyDialog",
            "label_dialog.LabelDialog",
            "label_dialog.LabelModifyDialog",
            "label_dialog.LabelQLineEdit",
            "label_list_widget.LabelListWidget",
            "label_list_widget.LabelListWidgetItem",
            "model_dropdown_widget.SearchBar",
            "navigator_widget.NavigatorDialog",
            "overview_dialog.OverviewDialog",
            "polygon_sides_dialog.PolygonSidesDialog",
            "popup.Popup",
            "toolbar.ToolBar",
            "unique_label_qlist_widget.UniqueLabelQListWidget",
            "vqa_dialog.VQADialog",
            "zoom_widget.ZoomWidget"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/widgets/unique_label_qlist_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/unique_label_qlist_widget.py",
        "imports": [
            "html",
            "PyQt5.QtWidgets",
            "PyQt5.QtGui",
            "PyQt5.QtCore.Qt",
            "escapable_qlist_widget.EscapableQListWidget"
        ],
        "classes": [
            {
                "class_name": "UniqueLabelQListWidget",
                "methods": [
                    "mousePressEvent",
                    "find_items_by_label",
                    "create_item_from_label",
                    "set_item_label",
                    "update_item_color",
                    "remove_items_by_label"
                ]
            }
        ],
        "functions": {
            "mousePressEvent": [
                "mousePressEvent",
                "super",
                "isValid",
                "indexAt",
                "pos",
                "clearSelection"
            ],
            "find_items_by_label": [
                "range",
                "count",
                "item",
                "data",
                "append"
            ],
            "create_item_from_label": [
                "QListWidgetItem",
                "setData"
            ],
            "set_item_label": [
                "QLabel",
                "setText",
                "format",
                "escape",
                "QColor",
                "red",
                "green",
                "blue",
                "alpha",
                "setStyleSheet",
                "setAlignment",
                "setSizeHint",
                "sizeHint",
                "setItemWidget"
            ],
            "update_item_color": [
                "find_items_by_label",
                "itemWidget",
                "QColor",
                "red",
                "green",
                "blue",
                "alpha",
                "setStyleSheet"
            ],
            "remove_items_by_label": [
                "find_items_by_label",
                "row",
                "takeItem"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/vqa_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/vqa_dialog.py",
        "imports": [
            "os",
            "json",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtWidgets.QButtonGroup",
            "PyQt5.QtWidgets.QCheckBox",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QRadioButton",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QSplitter",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QIntValidator",
            "anylabeling.views.labeling.vqa.*",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.vqa.dialogs.ExportLabelsDialog",
            "anylabeling.views.labeling.widgets.popup.Popup"
        ],
        "classes": [
            {
                "class_name": "VQADialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_left_panel",
                    "load_config",
                    "save_config",
                    "load_images_folder",
                    "switch_image",
                    "update_image_display",
                    "save_current_image_data",
                    "load_current_image_data",
                    "update_navigation_state",
                    "check_duplicate_title",
                    "load_components_from_config",
                    "add_custom_component",
                    "edit_custom_component_by_object",
                    "edit_custom_component",
                    "update_component",
                    "handle_options_change",
                    "reset_deleted_options_to_default",
                    "update_all_labels_for_deleted_options",
                    "reset_deleted_options_in_json",
                    "update_modified_options",
                    "update_all_labels_for_modified_options",
                    "update_modified_options_in_json",
                    "rebuild_component_options",
                    "delete_custom_component",
                    "remove_component",
                    "open_ai_assistant",
                    "cancel_ai_processing",
                    "handle_ai_result",
                    "create_component",
                    "add_component_to_all_labels",
                    "add_component_to_json_file",
                    "clear_all_components",
                    "clear_all_components_silent",
                    "get_component_value",
                    "set_component_value",
                    "adjust_all_text_widgets_height",
                    "export_labels",
                    "clear_current",
                    "clean_all_labels_for_component",
                    "set_default_values",
                    "set_component_default_value",
                    "update_labels_title",
                    "update_current_labels_title",
                    "update_all_json_labels_title",
                    "update_title_in_json_file",
                    "remove_component_from_json_file",
                    "apply_to_all_label_files",
                    "update_dropdown_options",
                    "validate_page_input",
                    "on_page_input_finished",
                    "restore_current_page_number",
                    "closeEvent",
                    "resizeEvent",
                    "load_initial_image_data",
                    "refresh_data",
                    "showEvent"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "setWindowFlags",
                "setModal",
                "resize",
                "setMinimumSize",
                "init_ui",
                "load_config",
                "load_initial_image_data"
            ],
            "init_ui": [
                "QHBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QSplitter",
                "setHandleWidth",
                "setStyleSheet",
                "get_main_splitter_style",
                "QWidget",
                "QVBoxLayout",
                "QLabel",
                "tr",
                "setAlignment",
                "setFixedHeight",
                "get_filename_label_style",
                "QPushButton",
                "setIcon",
                "QIcon",
                "new_icon",
                "setFixedSize",
                "get_button_style",
                "setToolTip",
                "connect",
                "addWidget",
                "get_image_container_style",
                "get_image_label_style",
                "setVisible",
                "get_dialog_button_style",
                "QScrollArea",
                "setWidgetResizable",
                "setFrameStyle",
                "addStretch",
                "setWidget",
                "switch_image",
                "setFixedWidth",
                "PageInputLineEdit",
                "get_page_input_style",
                "setSizes",
                "setStretchFactor",
                "update_navigation_state"
            ],
            "toggle_left_panel": [
                "sizes",
                "width",
                "setSizes",
                "setVisible"
            ],
            "load_config": [
                "exists",
                "info",
                "save_config",
                "open",
                "load",
                "load_components_from_config",
                "error",
                "remove"
            ],
            "save_config": [
                "dict",
                "append",
                "makedirs",
                "dirname",
                "open",
                "dump"
            ],
            "load_images_folder": [
                "open_folder_dialog",
                "parent",
                "update_image_display",
                "update_navigation_state",
                "load_current_image_data",
                "setValidator",
                "QIntValidator",
                "len"
            ],
            "switch_image": [
                "parent",
                "int",
                "text",
                "len",
                "index",
                "sizes",
                "save_current_image_data",
                "load_file",
                "update_image_display",
                "update_navigation_state",
                "clear_all_components_silent",
                "load_current_image_data",
                "singleShot"
            ],
            "restore_panel_state": [
                "setSizes",
                "setVisible"
            ],
            "update_image_display": [
                "parent",
                "basename",
                "index",
                "len",
                "setText",
                "str",
                "QPixmap",
                "isNull",
                "width",
                "height",
                "scaled",
                "setPixmap",
                "tr",
                "clear"
            ],
            "save_current_image_data": [
                "getattr",
                "hasattr",
                "parent",
                "get_component_value",
                "set_dirty"
            ],
            "load_current_image_data": [
                "hasattr",
                "parent",
                "set_default_values",
                "adjust_all_text_widgets_height",
                "get",
                "set_component_value",
                "set_component_default_value"
            ],
            "update_navigation_state": [
                "parent",
                "index",
                "setEnabled",
                "len"
            ],
            "check_duplicate_title": [],
            "load_components_from_config": [
                "get",
                "create_component"
            ],
            "add_custom_component": [
                "ComponentDialog",
                "exec_",
                "get_component_data",
                "create_component"
            ],
            "edit_custom_component_by_object": [
                "index",
                "edit_custom_component"
            ],
            "edit_custom_component": [
                "len",
                "save_current_image_data",
                "ComponentDialog",
                "exec_",
                "get_component_data",
                "update_component"
            ],
            "update_component": [
                "len",
                "update_labels_title",
                "handle_options_change",
                "setText",
                "update_dropdown_options",
                "rebuild_component_options",
                "load_current_image_data",
                "save_config"
            ],
            "handle_options_change": [
                "set",
                "get_real_modified_options",
                "update_modified_options",
                "tr",
                "list",
                "question",
                "reset_deleted_options_to_default"
            ],
            "reset_deleted_options_to_default": [
                "get_default_value",
                "hasattr",
                "parent",
                "get",
                "value_contains_deleted_options",
                "set_dirty",
                "update_all_labels_for_deleted_options"
            ],
            "update_all_labels_for_deleted_options": [
                "apply_to_all_label_files",
                "reset_deleted_options_in_json"
            ],
            "reset_deleted_options_in_json": [
                "open",
                "load",
                "value_contains_deleted_options",
                "dump"
            ],
            "update_modified_options": [
                "hasattr",
                "parent",
                "get",
                "apply_option_mapping",
                "set_dirty",
                "update_all_labels_for_modified_options"
            ],
            "update_all_labels_for_modified_options": [
                "apply_to_all_label_files",
                "update_modified_options_in_json"
            ],
            "update_modified_options_in_json": [
                "open",
                "load",
                "apply_option_mapping",
                "dump"
            ],
            "rebuild_component_options": [
                "layout",
                "clear",
                "QButtonGroup",
                "strip",
                "create_truncated_widget",
                "connect",
                "addButton",
                "addWidget",
                "setContentsMargins",
                "addItem"
            ],
            "delete_custom_component": [
                "information",
                "tr",
                "DeleteComponentDialog",
                "exec_",
                "get_selected_indices",
                "len",
                "join",
                "question",
                "remove_component",
                "clean_all_labels_for_component"
            ],
            "remove_component": [
                "len",
                "removeWidget",
                "deleteLater",
                "pop",
                "save_config"
            ],
            "open_ai_assistant": [
                "strip",
                "toPlainText",
                "AIPromptDialog",
                "exec_",
                "get_prompt",
                "AILoadingDialog",
                "hasattr",
                "parent",
                "AIWorkerThread",
                "connect",
                "handle_ai_result",
                "start",
                "cancel_ai_processing"
            ],
            "cancel_ai_processing": [
                "hasattr",
                "isRunning",
                "terminate",
                "wait",
                "close"
            ],
            "handle_ai_result": [
                "hasattr",
                "close",
                "QDialog",
                "setWindowTitle",
                "tr",
                "setModal",
                "setWindowFlags",
                "windowFlags",
                "resize",
                "QVBoxLayout",
                "setSpacing",
                "QTextEdit",
                "setPlainText",
                "setReadOnly",
                "addWidget",
                "QHBoxLayout",
                "addStretch",
                "QPushButton",
                "setStyleSheet",
                "get_dialog_button_style",
                "addLayout",
                "connect",
                "setDefault",
                "exec_",
                "blockSignals",
                "adjust_height",
                "save_current_image_data",
                "warning"
            ],
            "create_component": [
                "count",
                "itemAt",
                "spacerItem",
                "removeItem",
                "QWidget",
                "QHBoxLayout",
                "setContentsMargins",
                "QLabel",
                "setStyleSheet",
                "get_filename_label_style",
                "addWidget",
                "addStretch",
                "QPushButton",
                "setIcon",
                "QIcon",
                "new_icon",
                "setFixedSize",
                "get_button_style",
                "setToolTip",
                "tr",
                "AutoResizeTextEdit",
                "connect",
                "FlowLayout",
                "setSpacing",
                "QButtonGroup",
                "enumerate",
                "strip",
                "create_truncated_widget",
                "addButton",
                "blockSignals",
                "widget",
                "setChecked",
                "QComboBox",
                "addItem",
                "edit_custom_component_by_object",
                "open_ai_assistant",
                "append",
                "save_config",
                "add_component_to_all_labels"
            ],
            "add_component_to_all_labels": [
                "apply_to_all_label_files",
                "add_component_to_json_file"
            ],
            "add_component_to_json_file": [
                "open",
                "load",
                "dump"
            ],
            "clear_all_components": [
                "clear",
                "layout",
                "range",
                "count",
                "itemAt",
                "widget",
                "setChecked",
                "setCurrentIndex"
            ],
            "clear_all_components_silent": [
                "blockSignals",
                "clear_all_components"
            ],
            "get_component_value": [
                "strip",
                "toPlainText",
                "layout",
                "widget",
                "isChecked",
                "toolTip",
                "text",
                "currentText",
                "append"
            ],
            "set_component_value": [
                "blockSignals",
                "setPlainText",
                "str",
                "hasattr",
                "adjust_height",
                "layout",
                "widget",
                "toolTip",
                "text",
                "setChecked",
                "findText",
                "setCurrentIndex",
                "isinstance"
            ],
            "adjust_all_text_widgets_height": [
                "hasattr",
                "adjust_height"
            ],
            "export_labels": [
                "warning",
                "tr",
                "ExportLabelsDialog",
                "exec_",
                "get_export_config",
                "getSaveFileName",
                "save_current_image_data",
                "open",
                "enumerate",
                "QPixmap",
                "isNull",
                "width",
                "height",
                "basename",
                "get_label_file_path",
                "parent",
                "exists",
                "load",
                "get",
                "update",
                "items",
                "write",
                "dumps",
                "information"
            ],
            "clear_current": [
                "question",
                "tr",
                "clear",
                "layout",
                "range",
                "count",
                "itemAt",
                "widget",
                "setChecked",
                "setCurrentIndex",
                "save_current_image_data"
            ],
            "clean_all_labels_for_component": [
                "apply_to_all_label_files",
                "remove_component_from_json_file",
                "load_current_image_data"
            ],
            "set_default_values": [
                "set_component_default_value"
            ],
            "set_component_default_value": [
                "blockSignals",
                "clear",
                "range",
                "count",
                "layout",
                "itemAt",
                "widget",
                "setChecked",
                "text",
                "setCurrentIndex"
            ],
            "update_labels_title": [
                "update_current_labels_title",
                "update_all_json_labels_title"
            ],
            "update_current_labels_title": [
                "hasattr",
                "parent",
                "get",
                "pop",
                "set_dirty"
            ],
            "update_all_json_labels_title": [
                "apply_to_all_label_files",
                "update_title_in_json_file"
            ],
            "update_title_in_json_file": [
                "open",
                "load",
                "pop",
                "dump"
            ],
            "remove_component_from_json_file": [
                "open",
                "load",
                "dump"
            ],
            "apply_to_all_label_files": [
                "parent",
                "listdir",
                "endswith",
                "join",
                "callback",
                "splitext",
                "exists"
            ],
            "update_dropdown_options": [
                "currentText",
                "set",
                "blockSignals",
                "clear",
                "addItem",
                "strip",
                "findText",
                "setCurrentIndex",
                "connect"
            ],
            "validate_page_input": [
                "isdigit",
                "cursorPosition",
                "join",
                "setText",
                "setCursorPosition",
                "min",
                "len",
                "int",
                "parent",
                "str"
            ],
            "on_page_input_finished": [
                "strip",
                "text",
                "restore_current_page_number",
                "int",
                "parent",
                "len",
                "setText",
                "str"
            ],
            "restore_current_page_number": [
                "parent",
                "index",
                "setText",
                "str"
            ],
            "closeEvent": [
                "save_config",
                "hide",
                "ignore"
            ],
            "resizeEvent": [
                "resizeEvent",
                "super",
                "width",
                "size",
                "height",
                "resize",
                "update_image_display"
            ],
            "load_initial_image_data": [
                "hasattr",
                "parent",
                "update_image_display",
                "update_navigation_state",
                "load_current_image_data",
                "setValidator",
                "QIntValidator",
                "len",
                "singleShot"
            ],
            "refresh_data": [
                "hasattr",
                "parent",
                "information",
                "tr",
                "pop",
                "load_file",
                "update_image_display",
                "update_navigation_state",
                "clear_all_components_silent",
                "load_current_image_data",
                "setValidator",
                "QIntValidator",
                "len",
                "singleShot",
                "error"
            ],
            "finalize_refresh": [
                "adjust_all_text_widgets_height",
                "info",
                "Popup",
                "tr",
                "new_icon",
                "show_popup"
            ],
            "showEvent": [
                "showEvent",
                "super",
                "singleShot"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/label_list_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/label_list_widget.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtGui.QPalette",
            "PyQt5.QtWidgets.QStyle"
        ],
        "classes": [
            {
                "class_name": "HTMLDelegate",
                "methods": [
                    "__init__",
                    "paint",
                    "sizeHint"
                ]
            },
            {
                "class_name": "LabelListWidgetItem",
                "methods": [
                    "__init__",
                    "clone",
                    "set_shape",
                    "shape",
                    "__hash__",
                    "__repr__"
                ]
            },
            {
                "class_name": "StandardItemModel",
                "methods": [
                    "removeRows"
                ]
            },
            {
                "class_name": "LabelListWidget",
                "methods": [
                    "__init__",
                    "__len__",
                    "__getitem__",
                    "__iter__",
                    "item_dropped",
                    "item_changed",
                    "item_selection_changed_event",
                    "item_double_clicked_event",
                    "selected_items",
                    "scroll_to_item",
                    "add_iem",
                    "remove_item",
                    "select_item",
                    "find_item_by_shape",
                    "clear",
                    "item_at_index"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "QTextDocument",
                "setText",
                "set_shape",
                "setCheckable",
                "setCheckState",
                "setEditable",
                "setTextAlignment",
                "setWindowFlags",
                "setModel",
                "StandardItemModel",
                "setItemPrototype",
                "model",
                "LabelListWidgetItem",
                "setItemDelegate",
                "HTMLDelegate",
                "setSelectionMode",
                "setDragDropMode",
                "setDefaultDropAction",
                "connect",
                "selectionModel"
            ],
            "paint": [
                "save",
                "QStyleOptionViewItem",
                "initStyleOption",
                "setHtml",
                "style",
                "drawControl",
                "PaintContext",
                "setColor",
                "color",
                "subElementRect",
                "column",
                "adjust",
                "height",
                "setTop",
                "top",
                "translate",
                "topLeft",
                "setClipRect",
                "translated",
                "draw",
                "documentLayout",
                "restore"
            ],
            "sizeHint": [
                "QSize",
                "int",
                "idealWidth",
                "height",
                "size"
            ],
            "clone": [
                "LabelListWidgetItem",
                "text",
                "shape"
            ],
            "set_shape": [
                "setData"
            ],
            "shape": [
                "data"
            ],
            "__hash__": [
                "id"
            ],
            "__repr__": [
                "text"
            ],
            "removeRows": [
                "removeRows",
                "super",
                "emit"
            ],
            "__len__": [
                "rowCount",
                "model"
            ],
            "__getitem__": [
                "item",
                "model"
            ],
            "__iter__": [
                "range",
                "len"
            ],
            "item_dropped": [
                "model"
            ],
            "item_changed": [
                "model"
            ],
            "item_selection_changed_event": [
                "itemFromIndex",
                "model",
                "indexes",
                "emit"
            ],
            "item_double_clicked_event": [
                "emit",
                "itemFromIndex",
                "model"
            ],
            "selected_items": [
                "itemFromIndex",
                "model",
                "selectedIndexes"
            ],
            "scroll_to_item": [
                "scrollTo",
                "indexFromItem",
                "model"
            ],
            "add_iem": [
                "isinstance",
                "TypeError",
                "setItem",
                "model",
                "rowCount",
                "setSizeHint",
                "sizeHint",
                "itemDelegate"
            ],
            "remove_item": [
                "indexFromItem",
                "model",
                "removeRows",
                "row"
            ],
            "select_item": [
                "indexFromItem",
                "model",
                "select",
                "selectionModel"
            ],
            "find_item_by_shape": [
                "range",
                "rowCount",
                "model",
                "item",
                "shape"
            ],
            "clear": [
                "clear",
                "model"
            ],
            "item_at_index": [
                "item",
                "model"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/brightness_contrast_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/brightness_contrast_dialog.py",
        "imports": [
            "PIL.Image",
            "PIL.ImageEnhance",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "utils.image.pil_to_qimage"
        ],
        "classes": [
            {
                "class_name": "BrightnessContrastDialog",
                "methods": [
                    "__init__",
                    "move_to_center",
                    "update_image",
                    "update_brightness_label",
                    "update_contrast_label",
                    "on_new_value",
                    "reset_values",
                    "confirm_values",
                    "_create_slider"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setModal",
                "setWindowTitle",
                "tr",
                "setFixedSize",
                "setWindowFlags",
                "windowFlags",
                "setStyleSheet",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QHBoxLayout",
                "QLabel",
                "setMinimumWidth",
                "addWidget",
                "_create_slider",
                "value",
                "setFixedWidth",
                "setAlignment",
                "connect",
                "addLayout",
                "addSpacing",
                "QPushButton",
                "addStretch",
                "setLayout",
                "move_to_center"
            ],
            "move_to_center": [
                "frameGeometry",
                "center",
                "availableGeometry",
                "QDesktopWidget",
                "moveCenter",
                "move",
                "topLeft"
            ],
            "update_image": [
                "isinstance"
            ],
            "update_brightness_label": [
                "setText",
                "on_new_value"
            ],
            "update_contrast_label": [
                "setText",
                "on_new_value"
            ],
            "on_new_value": [
                "value",
                "enhance",
                "Brightness",
                "Contrast",
                "pil_to_qimage",
                "callback"
            ],
            "reset_values": [
                "setValue",
                "on_new_value"
            ],
            "confirm_values": [
                "accept"
            ],
            "_create_slider": [
                "QSlider",
                "setRange",
                "setValue",
                "setTracking",
                "setFixedHeight"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/chatbot_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/chatbot_dialog.py",
        "imports": [
            "base64",
            "datetime",
            "json",
            "os",
            "re",
            "shutil",
            "threading",
            "zipfile",
            "openai.OpenAI",
            "PIL.Image",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtCore.QEvent",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QButtonGroup",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QSplitter",
            "PyQt5.QtWidgets.QTabWidget",
            "PyQt5.QtWidgets.QSlider",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtGui.QCursor",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QTextCursor",
            "PyQt5.QtGui.QTextCharFormat",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.chatbot.*",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.general.open_url",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.widgets.model_dropdown_widget.ModelDropdown"
        ],
        "classes": [
            {
                "class_name": "ChatbotDialog",
                "methods": [
                    "__init__",
                    "show_model_dropdown",
                    "on_model_selected",
                    "on_provider_selected",
                    "switch_provider",
                    "on_api_address_changed",
                    "on_api_key_changed",
                    "resize_input",
                    "restore_send_button",
                    "update_image_preview",
                    "load_initial_data",
                    "update_import_buttons_visibility",
                    "open_image_file_or_folder",
                    "add_message",
                    "scroll_to_bottom",
                    "start_generation",
                    "stop_generation",
                    "add_loading_message",
                    "update_output",
                    "on_stream_finished",
                    "handle_loading_state",
                    "toggle_api_key_visibility",
                    "navigate_image",
                    "load_chat_for_current_image",
                    "run_all_images",
                    "show_progress_dialog_and_process",
                    "process_next_image",
                    "cancel_operation",
                    "finish_processing",
                    "import_export_dataset",
                    "eventFilter",
                    "stream_generation",
                    "set_components_enabled",
                    "set_chat_message_buttons_enabled",
                    "handle_error",
                    "resizeEvent",
                    "resubmit_edited_message",
                    "clear_messages_after",
                    "regenerate_response",
                    "on_text_changed",
                    "clear_conversation",
                    "hideAllTooltips",
                    "closeEvent",
                    "wheelEvent",
                    "show_message_input_context_menu"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "setWindowFlags",
                "resize",
                "get_dialog_style",
                "get_menu_style",
                "setStyleSheet",
                "init_model_config",
                "get_providers_data",
                "CustomTooltip",
                "tr",
                "QPixmap",
                "new_icon_path",
                "scaled",
                "QCursor",
                "StreamingHandler",
                "connect",
                "QHBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QSplitter",
                "setHandleWidth",
                "get_main_splitter_style",
                "QWidget",
                "QVBoxLayout",
                "QButtonGroup",
                "keys",
                "QPushButton",
                "capitalize",
                "setIcon",
                "QIcon",
                "new_icon",
                "lower",
                "setCheckable",
                "setFixedHeight",
                "setIconSize",
                "QSize",
                "get_provider_button_style",
                "switch_provider",
                "addButton",
                "setattr",
                "addWidget",
                "setChecked",
                "getattr",
                "addStretch",
                "get_left_widget_style",
                "setMinimumWidth",
                "setMaximumWidth",
                "get_middle_widget_style",
                "get_chat_container_style",
                "QScrollArea",
                "setWidgetResizable",
                "setFrameShape",
                "setHorizontalScrollBarPolicy",
                "get_chat_scroll_area_style",
                "setWidget",
                "get_input_container_style",
                "QFrame",
                "setObjectName",
                "get_input_frame_style",
                "QTextEdit",
                "setPlaceholderText",
                "get_message_input_style",
                "setAcceptRichText",
                "setMinimumHeight",
                "setMaximumHeight",
                "setVerticalScrollBarPolicy",
                "setFrameShadow",
                "setLineWrapMode",
                "setContextMenuPolicy",
                "document",
                "setDocumentMargin",
                "setDocument",
                "textCursor",
                "blockFormat",
                "setBottomMargin",
                "setTopMargin",
                "setBlockFormat",
                "setTextCursor",
                "installEventFilter",
                "resize_input",
                "get_send_button_style",
                "setFixedSize",
                "setEnabled",
                "QLabel",
                "get_image_preview_style",
                "setAlignment",
                "setScaledContents",
                "get_button_style",
                "navigate_image",
                "setVisible",
                "zip",
                "open_image_file_or_folder",
                "addLayout",
                "QTabWidget",
                "get_tab_widget_style",
                "setUsesScrollButtons",
                "setDocumentMode",
                "setElideMode",
                "get_settings_label_style",
                "get_help_btn_style",
                "setCursor",
                "open_url",
                "QLineEdit",
                "get_settings_edit_style",
                "text",
                "setEchoMode",
                "get_model_button_style",
                "setText",
                "get_default_model_id",
                "QSlider",
                "setMinimum",
                "setMaximum",
                "setValue",
                "get_slider_style",
                "get_temperature_label_style",
                "addSpacing",
                "QSpinBox",
                "setSingleStep",
                "setButtonSymbols",
                "get_spinbox_style",
                "addTab",
                "setExpanding",
                "tabBar",
                "get_settings_tabs_style",
                "get_right_splitter_style",
                "setSizes",
                "get_right_widget_style",
                "setFixedWidth",
                "setStretchFactor",
                "get_models_data",
                "ModelDropdown",
                "hide",
                "setFocus"
            ],
            "show_model_dropdown": [
                "isChecked",
                "getattr",
                "get_models_data",
                "update_models_data",
                "rect",
                "mapToGlobal",
                "QPoint",
                "x",
                "width",
                "y",
                "resize",
                "height",
                "move",
                "int",
                "show"
            ],
            "on_model_selected": [
                "setText"
            ],
            "on_provider_selected": [
                "setChecked",
                "getattr",
                "switch_provider"
            ],
            "switch_provider": [
                "setText",
                "get_models_data",
                "update_models_data",
                "findChild",
                "setVisible",
                "disconnect",
                "connect",
                "open_url"
            ],
            "on_api_address_changed": [
                "isChecked",
                "getattr",
                "text",
                "save_json"
            ],
            "on_api_key_changed": [
                "isChecked",
                "getattr",
                "text",
                "save_json"
            ],
            "resize_input": [
                "document",
                "height",
                "size",
                "contentsMargins",
                "top",
                "bottom",
                "setMinimumHeight",
                "int",
                "setMaximumHeight",
                "setVerticalScrollBarPolicy",
                "textCursor",
                "ensureCursorVisible",
                "max",
                "updateGeometry",
                "processEvents"
            ],
            "restore_send_button": [
                "setIcon",
                "QIcon",
                "new_icon",
                "setEnabled",
                "disconnect",
                "connect"
            ],
            "update_image_preview": [
                "parent",
                "QPixmap",
                "isNull",
                "size",
                "width",
                "height",
                "scaled",
                "setPixmap",
                "setAlignment",
                "singleShot",
                "int",
                "setText",
                "tr"
            ],
            "load_initial_data": [
                "parent",
                "isinstance",
                "add_message",
                "update_image_preview",
                "singleShot",
                "int",
                "update_import_buttons_visibility"
            ],
            "update_import_buttons_visibility": [
                "bool",
                "parent",
                "setVisible"
            ],
            "open_image_file_or_folder": [
                "open_file",
                "parent",
                "load_chat_for_current_image",
                "update_import_buttons_visibility",
                "open_folder_dialog",
                "setVisible"
            ],
            "add_message": [
                "count",
                "itemAt",
                "spacerItem",
                "removeItem",
                "strip",
                "sub",
                "parent",
                "ChatMessage",
                "addWidget",
                "addStretch",
                "append",
                "singleShot",
                "int"
            ],
            "scroll_to_bottom": [
                "verticalScrollBar",
                "setValue",
                "maximum",
                "processEvents"
            ],
            "start_generation": [
                "strip",
                "toPlainText",
                "add_message",
                "clear",
                "setPlainText",
                "setMinimumHeight",
                "setMaximumHeight",
                "set_components_enabled",
                "setIcon",
                "QIcon",
                "new_icon",
                "setEnabled",
                "disconnect",
                "connect",
                "add_loading_message",
                "reset",
                "Thread",
                "start"
            ],
            "stop_generation": [],
            "add_loading_message": [
                "count",
                "itemAt",
                "spacerItem",
                "removeItem",
                "QFrame",
                "QVBoxLayout",
                "setContentsMargins",
                "QWidget",
                "setObjectName",
                "setStyleSheet",
                "get_bubble_style",
                "QHBoxLayout",
                "get_role_label_background_style",
                "setSpacing",
                "QLabel",
                "QPixmap",
                "new_icon_path",
                "lower",
                "scaled",
                "setPixmap",
                "get_role_label_style",
                "addWidget",
                "addStretch",
                "addLayout",
                "PulsatingDot",
                "setMaximumWidth",
                "setAlignment",
                "singleShot"
            ],
            "update_output": [
                "hasattr",
                "stop_animation",
                "setParent",
                "deleteLater",
                "QLabel",
                "setWordWrap",
                "setTextFormat",
                "setStyleSheet",
                "get_fade_in_text_style",
                "setMinimumWidth",
                "setMaximumWidth",
                "addWidget",
                "layout",
                "text",
                "setText",
                "scroll_to_bottom"
            ],
            "on_stream_finished": [
                "isActive",
                "stop",
                "hasattr",
                "QPropertyAnimation",
                "setDuration",
                "setStartValue",
                "get_animation_style",
                "setEndValue",
                "start",
                "text",
                "add_message",
                "setParent",
                "deleteLater",
                "parent",
                "set_dirty",
                "set_components_enabled",
                "setFocus"
            ],
            "handle_loading_state": [
                "set_components_enabled"
            ],
            "toggle_api_key_visibility": [
                "echoMode",
                "setEchoMode",
                "setIcon",
                "QIcon",
                "new_icon"
            ],
            "navigate_image": [
                "parent",
                "index",
                "len",
                "load_file",
                "processEvents",
                "update_image_preview",
                "load_chat_for_current_image",
                "update_import_buttons_visibility",
                "error"
            ],
            "load_chat_for_current_image": [
                "count",
                "takeAt",
                "widget",
                "setParent",
                "deleteLater",
                "removeItem",
                "addStretch",
                "processEvents",
                "load_initial_data",
                "error"
            ],
            "run_all_images": [
                "len",
                "parent",
                "BatchProcessDialog",
                "exec_",
                "str",
                "show_progress_dialog_and_process"
            ],
            "show_progress_dialog_and_process": [
                "QProgressDialog",
                "tr",
                "len",
                "parent",
                "setWindowModality",
                "setWindowTitle",
                "setStyleSheet",
                "get_progress_dialog_style",
                "setFixedSize",
                "setWindowFlags",
                "windowFlags",
                "setMinimumDuration",
                "mapToGlobal",
                "center",
                "rect",
                "move",
                "x",
                "width",
                "y",
                "height",
                "connect",
                "show",
                "processEvents",
                "process_next_image"
            ],
            "process_next_image": [
                "len",
                "parent",
                "tr",
                "setLabelText",
                "value",
                "strip",
                "text",
                "int",
                "append",
                "sub",
                "open",
                "decode",
                "b64encode",
                "read",
                "OpenAI",
                "create",
                "set_dirty",
                "setValue",
                "navigate_image",
                "singleShot",
                "process_next_image",
                "finish_processing"
            ],
            "cancel_operation": [],
            "finish_processing": [
                "parent",
                "navigate_image",
                "close"
            ],
            "import_export_dataset": [
                "QDialog",
                "setWindowTitle",
                "tr",
                "setFixedSize",
                "setStyleSheet",
                "get_option_dialog_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "setAlignment",
                "QPushButton",
                "setCursor",
                "addWidget",
                "setLayout",
                "connect",
                "exec_"
            ],
            "export_dataset": [
                "accept",
                "parent",
                "warning",
                "tr",
                "dirname",
                "getExistingDirectory",
                "strftime",
                "now",
                "join",
                "expanduser",
                "exists",
                "rmtree",
                "makedirs",
                "listdir",
                "endswith",
                "open",
                "load",
                "get",
                "copy",
                "append",
                "error",
                "str",
                "dump",
                "ZipFile",
                "write",
                "information",
                "critical"
            ],
            "import_dataset": [
                "accept",
                "parent",
                "warning",
                "tr",
                "dirname",
                "getOpenFileName",
                "open",
                "load",
                "isinstance",
                "get",
                "basename",
                "join",
                "exists",
                "copy",
                "splitext",
                "append",
                "dump",
                "format",
                "information",
                "navigate_image",
                "index",
                "error",
                "str",
                "critical"
            ],
            "eventFilter": [
                "items",
                "objectName",
                "type",
                "mapToGlobal",
                "QPoint",
                "move",
                "adjustSize",
                "width",
                "height",
                "x",
                "y",
                "show",
                "hide",
                "key",
                "modifiers",
                "start_generation",
                "hasattr",
                "eventFilter",
                "super"
            ],
            "stream_generation": [
                "start_loading",
                "debug",
                "value",
                "strip",
                "text",
                "hasattr",
                "int",
                "append",
                "open",
                "decode",
                "b64encode",
                "read",
                "error",
                "OpenAI",
                "Event",
                "Thread",
                "start",
                "create",
                "append_text",
                "get_current_message",
                "emit",
                "stop_loading",
                "restore_send_button",
                "report_error",
                "str"
            ],
            "check_for_cancellation": [
                "is_set",
                "set",
                "get_current_message",
                "report_error",
                "emit",
                "stop_loading",
                "restore_send_button",
                "sleep"
            ],
            "set_components_enabled": [
                "setEnabled",
                "setCursor",
                "set_chat_message_buttons_enabled"
            ],
            "set_chat_message_buttons_enabled": [
                "range",
                "count",
                "itemAt",
                "widget",
                "isinstance",
                "hasattr",
                "set_action_buttons_enabled"
            ],
            "handle_error": [
                "isActive",
                "stop",
                "setParent",
                "deleteLater",
                "add_message"
            ],
            "resizeEvent": [
                "resizeEvent",
                "super",
                "hasattr",
                "isMaximized",
                "count",
                "takeAt",
                "widget",
                "setParent",
                "addStretch",
                "addWidget",
                "setFixedWidth",
                "setStretchFactor",
                "setMinimumWidth",
                "setMaximumWidth",
                "range",
                "itemAt",
                "update_width_constraint",
                "updateGeometry",
                "processEvents",
                "singleShot"
            ],
            "resubmit_edited_message": [
                "range",
                "count",
                "itemAt",
                "widget",
                "isinstance",
                "append",
                "index",
                "clear_messages_after",
                "setPlainText",
                "start_generation"
            ],
            "clear_messages_after": [
                "range",
                "count",
                "itemAt",
                "widget",
                "isinstance",
                "append",
                "enumerate",
                "reversed",
                "removeWidget",
                "setParent",
                "deleteLater",
                "len",
                "spacerItem",
                "addStretch",
                "processEvents"
            ],
            "regenerate_response": [
                "range",
                "count",
                "itemAt",
                "widget",
                "isinstance",
                "append",
                "enumerate",
                "clear_messages_after",
                "set_components_enabled",
                "add_loading_message",
                "reset",
                "Thread",
                "start"
            ],
            "on_text_changed": [
                "resize_input",
                "strip",
                "toPlainText",
                "setEnabled",
                "bool",
                "textCursor",
                "position",
                "document",
                "blockSignals",
                "select",
                "QTextCharFormat",
                "setCharFormat",
                "find",
                "setBackground",
                "QColor",
                "setForeground",
                "setPosition",
                "len",
                "setTextCursor"
            ],
            "clear_conversation": [
                "QMessageBox",
                "setText",
                "tr",
                "setStandardButtons",
                "setDefaultButton",
                "setIcon",
                "exec_",
                "count",
                "takeAt",
                "widget",
                "setParent",
                "deleteLater",
                "removeItem",
                "addStretch",
                "parent",
                "set_dirty"
            ],
            "hideAllTooltips": [
                "hide",
                "range",
                "count",
                "itemAt",
                "widget",
                "isinstance",
                "hasattr",
                "getattr"
            ],
            "closeEvent": [
                "hideAllTooltips",
                "isActive",
                "stop",
                "closeEvent",
                "super"
            ],
            "wheelEvent": [
                "hideAllTooltips",
                "wheelEvent",
                "super"
            ],
            "show_message_input_context_menu": [
                "createStandardContextMenu",
                "setStyleSheet",
                "get_menu_style",
                "exec_",
                "mapToGlobal"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/api_token_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/api_token_dialog.py",
        "imports": [
            "os",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtWidgets.QDialogButtonBox",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.style.get_lineedit_style",
            "anylabeling.views.labeling.utils.style.get_normal_button_style",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_cancel_btn_style"
        ],
        "classes": [
            {
                "class_name": "ApiTokenDialog",
                "methods": [
                    "__init__",
                    "_update_visibility_button",
                    "toggle_api_key_visibility",
                    "get_token",
                    "accept_and_update_cache"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "tr",
                "setMinimumWidth",
                "QVBoxLayout",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setEchoMode",
                "setPlaceholderText",
                "setStyleSheet",
                "get_lineedit_style",
                "setSizePolicy",
                "height",
                "sizeHint",
                "QPushButton",
                "setCheckable",
                "setFixedSize",
                "get_normal_button_style",
                "connect",
                "_update_visibility_button",
                "addLayout",
                "QDialogButtonBox",
                "button",
                "get_ok_btn_style",
                "setIcon",
                "QIcon",
                "get_cancel_btn_style"
            ],
            "_update_visibility_button": [
                "tr",
                "setIcon",
                "QIcon",
                "new_icon",
                "setText",
                "setToolTip"
            ],
            "toggle_api_key_visibility": [
                "setEchoMode",
                "_update_visibility_button"
            ],
            "get_token": [
                "text"
            ],
            "accept_and_update_cache": [
                "get_token",
                "accept"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/filter_label_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/filter_label_widget.py",
        "imports": [
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QComboBox"
        ],
        "classes": [
            {
                "class_name": "GroupIDFilterComboBox",
                "methods": [
                    "__init__",
                    "update_items"
                ]
            },
            {
                "class_name": "LabelFilterComboBox",
                "methods": [
                    "__init__",
                    "update_items"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "QComboBox",
                "setToolTip",
                "tr",
                "addItems",
                "connect",
                "QHBoxLayout",
                "addWidget",
                "setLayout"
            ],
            "update_items": [
                "clear",
                "addItems"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/color_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/color_dialog.py",
        "imports": [
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ColorDialog",
                "methods": [
                    "__init__",
                    "get_color",
                    "check_restore"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setOption",
                "widget",
                "itemAt",
                "layout",
                "addButton",
                "connect"
            ],
            "get_color": [
                "setWindowTitle",
                "setCurrentColor",
                "exec_",
                "currentColor"
            ],
            "check_restore": [
                "buttonRole",
                "setCurrentColor"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/overview_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/overview_dialog.py",
        "imports": [
            "os",
            "csv",
            "json",
            "zipfile",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QVBoxLayout",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_progress_dialog_style",
            "anylabeling.views.labeling.widgets.popup.Popup"
        ],
        "classes": [
            {
                "class_name": "OverviewDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "move_to_center",
                    "get_image_file_list",
                    "get_label_infos",
                    "get_total_infos",
                    "get_shape_infos_table",
                    "populate_table",
                    "update_range",
                    "export_to_csv",
                    "toggle_info"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "get_image_file_list",
                "len",
                "init_ui"
            ],
            "init_ui": [
                "setWindowTitle",
                "tr",
                "setWindowFlags",
                "windowFlags",
                "resize",
                "move_to_center",
                "QVBoxLayout",
                "QTableWidget",
                "populate_table",
                "addWidget",
                "setEditTriggers",
                "setSectionResizeMode",
                "horizontalHeader",
                "QHBoxLayout",
                "addStretch",
                "QLabel",
                "QSpinBox",
                "setMinimum",
                "setMaximum",
                "len",
                "setSingleStep",
                "setValue",
                "setProperty",
                "QPushButton",
                "connect",
                "addLayout",
                "setStyleSheet",
                "exec_"
            ],
            "move_to_center": [
                "frameGeometry",
                "center",
                "availableGeometry",
                "QDesktopWidget",
                "moveCenter",
                "move",
                "topLeft"
            ],
            "get_image_file_list": [
                "count",
                "range",
                "text",
                "item",
                "append"
            ],
            "get_label_infos": [
                "range",
                "len",
                "QProgressDialog",
                "tr",
                "setWindowModality",
                "setWindowTitle",
                "setMinimumWidth",
                "setMinimumHeight",
                "setStyleSheet",
                "get_progress_dialog_style",
                "enumerate",
                "split",
                "join",
                "splitext",
                "exists",
                "open",
                "load",
                "get",
                "warning",
                "dict",
                "zip",
                "append",
                "setValue",
                "wasCanceled",
                "close",
                "sorted"
            ],
            "get_total_infos": [
                "get_label_infos",
                "range",
                "len",
                "items",
                "append",
                "sum",
                "zip"
            ],
            "get_shape_infos_table": [
                "str",
                "append"
            ],
            "populate_table": [
                "get_total_infos",
                "len",
                "setRowCount",
                "setColumnCount",
                "setHorizontalHeaderLabels",
                "list",
                "map",
                "enumerate",
                "QTableWidgetItem",
                "setItem",
                "get_label_infos",
                "get_shape_infos_table",
                "setToolTip",
                "setSectionResizeMode",
                "horizontalHeader"
            ],
            "update_range": [
                "text",
                "int",
                "len",
                "setValue",
                "populate_table"
            ],
            "export_to_csv": [
                "getExistingDirectory",
                "tr",
                "accept",
                "get_total_infos",
                "len",
                "get_shape_infos_table",
                "join",
                "open",
                "writer",
                "writerow",
                "write",
                "ZipFile",
                "basename",
                "remove",
                "Popup",
                "new_icon_path",
                "show_popup",
                "error"
            ],
            "toggle_info": [
                "setText",
                "tr",
                "populate_table"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/polygon_sides_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/polygon_sides_dialog.py",
        "imports": [
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QVBoxLayout",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "PolygonSidesDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "get_value"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "tr",
                "setFixedSize",
                "setModal",
                "init_ui"
            ],
            "init_ui": [
                "QVBoxLayout",
                "setSpacing",
                "setContentsMargins",
                "QLabel",
                "tr",
                "setStyleSheet",
                "addWidget",
                "QSpinBox",
                "setMinimum",
                "setMaximum",
                "setValue",
                "setFixedHeight",
                "new_icon_path",
                "QHBoxLayout",
                "QPushButton",
                "setFixedSize",
                "connect",
                "addStretch",
                "addLayout",
                "setLayout"
            ],
            "get_value": [
                "value"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/canvas.py": {
        "file_name": "/anylabeling/views/labeling/widgets/canvas.py",
        "imports": [
            "math",
            "copy.deepcopy",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QWheelEvent",
            "anylabeling.services.auto_labeling.types.AutoLabelingMode",
            "anylabeling.views.labeling.utils.colormap.label_colormap",
            ".utils",
            "shape.Shape"
        ],
        "classes": [
            {
                "class_name": "Canvas",
                "methods": [
                    "__init__",
                    "set_loading",
                    "set_auto_labeling_mode",
                    "set_auto_decode_mode",
                    "reset_auto_decode_state",
                    "fill_drawing",
                    "set_fill_drawing",
                    "create_mode",
                    "create_mode",
                    "store_shapes",
                    "store_moving_shape",
                    "is_shape_restorable",
                    "restore_shape",
                    "enterEvent",
                    "leaveEvent",
                    "focusOutEvent",
                    "is_visible",
                    "drawing",
                    "editing",
                    "set_auto_labeling",
                    "get_mode",
                    "set_editing",
                    "un_highlight",
                    "selected_vertex",
                    "selected_edge",
                    "_should_trigger_auto_decode",
                    "mouseMoveEvent",
                    "add_point_to_edge",
                    "remove_selected_point",
                    "on_auto_decode_timeout",
                    "mousePressEvent",
                    "mouseReleaseEvent",
                    "end_move",
                    "hide_background_shapes",
                    "set_hiding",
                    "can_close_shape",
                    "mouseDoubleClickEvent",
                    "select_shapes",
                    "select_shape_point",
                    "calculate_offsets",
                    "get_adjoint_points",
                    "get_cross_point",
                    "bounded_move_vertex",
                    "bounded_move_shapes",
                    "rotate_point",
                    "bounded_rotate_shapes",
                    "deselect_shape",
                    "delete_selected",
                    "delete_shape",
                    "duplicate_selected_shapes",
                    "bounded_shift_shapes",
                    "paintEvent",
                    "transform_pos",
                    "offset_to_center",
                    "out_off_pixmap",
                    "finalise",
                    "update_auto_labeling_marks",
                    "close_enough",
                    "intersection_point",
                    "intersecting_edges",
                    "sizeHint",
                    "minimumSizeHint",
                    "wheelEvent",
                    "_scale_rectangle",
                    "_adjust_rectangle_edge",
                    "move_by_keyboard",
                    "rotate_by_keyboard",
                    "keyPressEvent",
                    "keyReleaseEvent",
                    "set_last_label",
                    "undo_last_line",
                    "undo_last_point",
                    "load_pixmap",
                    "load_shapes",
                    "set_shape_visible",
                    "current_cursor",
                    "override_cursor",
                    "restore_cursor",
                    "reset_state",
                    "set_cross_line",
                    "gen_new_group_id",
                    "merge_group_ids",
                    "group_selected_shapes",
                    "ungroup_selected_shapes"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "pop",
                "ValueError",
                "get",
                "__init__",
                "super",
                "Shape",
                "QPoint",
                "QPointF",
                "QPixmap",
                "QPainter",
                "QMenu",
                "setMouseTracking",
                "setFocusPolicy",
                "tr",
                "QTimer",
                "connect",
                "setSingleShot"
            ],
            "set_loading": [
                "update"
            ],
            "set_auto_labeling_mode": [
                "toggle_draw_mode"
            ],
            "set_auto_decode_mode": [
                "reset_auto_decode_state"
            ],
            "reset_auto_decode_state": [
                "isActive",
                "stop",
                "clear"
            ],
            "fill_drawing": [],
            "set_fill_drawing": [],
            "create_mode": [
                "ValueError"
            ],
            "store_shapes": [
                "append",
                "copy",
                "len"
            ],
            "store_moving_shape": [
                "copy",
                "index",
                "len",
                "store_shapes",
                "emit"
            ],
            "is_shape_restorable": [
                "len"
            ],
            "restore_shape": [
                "pop",
                "update"
            ],
            "enterEvent": [
                "override_cursor"
            ],
            "leaveEvent": [
                "store_moving_shape",
                "un_highlight",
                "restore_cursor",
                "emit"
            ],
            "focusOutEvent": [
                "restore_cursor"
            ],
            "is_visible": [
                "get"
            ],
            "drawing": [],
            "editing": [],
            "set_auto_labeling": [
                "toggle_draw_mode"
            ],
            "get_mode": [
                "tr"
            ],
            "set_editing": [
                "un_highlight",
                "deselect_shape",
                "emit"
            ],
            "un_highlight": [
                "highlight_clear",
                "update"
            ],
            "selected_vertex": [],
            "selected_edge": [],
            "_should_trigger_auto_decode": [
                "x",
                "y"
            ],
            "mouseMoveEvent": [
                "transform_pos",
                "localPos",
                "repaint",
                "_should_trigger_auto_decode",
                "isActive",
                "start",
                "drawing",
                "hex_to_rgb",
                "QColor",
                "override_cursor",
                "int",
                "abs",
                "x",
                "y",
                "emit",
                "out_off_pixmap",
                "intersection_point",
                "len",
                "close_enough",
                "highlight_vertex",
                "close",
                "highlight_clear",
                "buttons",
                "bounded_move_shapes",
                "copy",
                "selected_vertex",
                "bounded_move_vertex",
                "width",
                "height",
                "editing",
                "setToolTip",
                "tr",
                "reversed",
                "is_visible",
                "nearest_vertex",
                "nearest_edge",
                "setStatusTip",
                "toolTip",
                "update",
                "can_add_point",
                "contains_point",
                "format",
                "modifiers",
                "select_shape_point",
                "un_highlight"
            ],
            "add_point_to_edge": [
                "insert_point",
                "highlight_vertex"
            ],
            "remove_selected_point": [
                "remove_point",
                "highlight_clear"
            ],
            "on_auto_decode_timeout": [
                "len",
                "pop",
                "int",
                "x",
                "y",
                "append",
                "emit"
            ],
            "mousePressEvent": [
                "transform_pos",
                "localPos",
                "button",
                "drawing",
                "add_point",
                "is_closed",
                "finalise",
                "len",
                "reach_max_points",
                "x",
                "y",
                "QPointF",
                "int",
                "modifiers",
                "emit",
                "out_off_pixmap",
                "on_auto_decode_timeout",
                "Shape",
                "set_hiding",
                "update",
                "editing",
                "selected_edge",
                "add_point_to_edge",
                "selected_vertex",
                "remove_selected_point",
                "override_cursor",
                "select_shape_point",
                "repaint"
            ],
            "mouseReleaseEvent": [
                "button",
                "len",
                "restore_cursor",
                "exec_",
                "mapToGlobal",
                "pos",
                "repaint",
                "editing",
                "emit",
                "store_moving_shape"
            ],
            "end_move": [
                "len",
                "enumerate",
                "append",
                "repaint",
                "store_shapes"
            ],
            "hide_background_shapes": [
                "set_hiding",
                "update"
            ],
            "set_hiding": [],
            "can_close_shape": [
                "drawing",
                "len"
            ],
            "mouseDoubleClickEvent": [
                "emit",
                "can_close_shape",
                "len",
                "pop_point",
                "finalise"
            ],
            "select_shapes": [
                "set_hiding",
                "emit",
                "update"
            ],
            "select_shape_point": [
                "selected_vertex",
                "highlight_vertex",
                "set_hiding",
                "emit",
                "calculate_offsets",
                "reversed",
                "is_visible",
                "len",
                "contains_point",
                "deselect_shape"
            ],
            "calculate_offsets": [
                "width",
                "height",
                "bounding_rect",
                "left",
                "right",
                "top",
                "bottom",
                "x",
                "y",
                "QPointF"
            ],
            "get_adjoint_points": [
                "tan",
                "QPointF",
                "x",
                "y",
                "get_cross_point"
            ],
            "get_cross_point": [
                "QPointF"
            ],
            "bounded_move_vertex": [
                "out_off_pixmap",
                "intersection_point",
                "get_adjoint_points",
                "move_vertex_by",
                "close",
                "QPointF",
                "x",
                "y"
            ],
            "bounded_move_shapes": [
                "append",
                "out_off_pixmap",
                "len",
                "QPoint",
                "min",
                "int",
                "x",
                "y",
                "width",
                "height",
                "move_by"
            ],
            "rotate_point": [
                "cos",
                "sin",
                "x",
                "y",
                "QPointF"
            ],
            "bounded_rotate_shapes": [
                "deepcopy",
                "len",
                "QPointF",
                "x",
                "y",
                "append",
                "enumerate",
                "rotate_point"
            ],
            "deselect_shape": [
                "set_hiding",
                "emit",
                "update"
            ],
            "delete_selected": [
                "remove",
                "append",
                "store_shapes",
                "update"
            ],
            "delete_shape": [
                "remove",
                "store_shapes",
                "update"
            ],
            "duplicate_selected_shapes": [
                "copy",
                "bounded_shift_shapes",
                "end_move"
            ],
            "bounded_shift_shapes": [
                "QPointF",
                "bounded_move_shapes"
            ],
            "paintEvent": [
                "width",
                "height",
                "paintEvent",
                "super",
                "begin",
                "setRenderHint",
                "scale",
                "translate",
                "offset_to_center",
                "drawPixmap",
                "setPen",
                "setBrush",
                "QColor",
                "drawRect",
                "rect",
                "save",
                "rotate",
                "drawEllipse",
                "drawLine",
                "restore",
                "setFont",
                "QFont",
                "drawText",
                "end",
                "update",
                "QPen",
                "append",
                "float",
                "bounding_rect",
                "min",
                "x",
                "y",
                "max",
                "int",
                "len",
                "setStyle",
                "setWidth",
                "round",
                "setColor",
                "QPointF",
                "drawPolygon",
                "QRectF",
                "atan2",
                "cos",
                "sin",
                "is_visible",
                "selected_vertex",
                "paint",
                "str",
                "degrees",
                "QFontMetrics",
                "font",
                "boundingRect",
                "fillRect",
                "QPainterPath",
                "addRect",
                "drawPath",
                "fillPath",
                "fill_drawing",
                "copy",
                "add_point",
                "tightBoundingRect",
                "descent",
                "QRect",
                "QPoint",
                "setOpacity",
                "hasattr",
                "items",
                "range",
                "join",
                "sum",
                "enumerate",
                "ascent",
                "zip"
            ],
            "transform_pos": [
                "offset_to_center"
            ],
            "offset_to_center": [
                "QPointF",
                "size",
                "super",
                "width",
                "height"
            ],
            "out_off_pixmap": [
                "width",
                "height",
                "x",
                "y"
            ],
            "finalise": [
                "close",
                "append",
                "store_shapes",
                "set_hiding",
                "emit",
                "update",
                "update_auto_labeling_marks"
            ],
            "update_auto_labeling_marks": [
                "append",
                "int",
                "x",
                "y",
                "emit"
            ],
            "close_enough": [
                "distance"
            ],
            "intersection_point": [
                "size",
                "width",
                "height",
                "min",
                "max",
                "x",
                "y",
                "intersecting_edges",
                "int",
                "QPoint"
            ],
            "intersecting_edges": [
                "range",
                "QPointF",
                "distance"
            ],
            "sizeHint": [
                "minimumSizeHint"
            ],
            "minimumSizeHint": [
                "size",
                "minimumSizeHint",
                "super"
            ],
            "wheelEvent": [
                "modifiers",
                "angleDelta",
                "editing",
                "len",
                "int",
                "transform_pos",
                "posF",
                "localPos",
                "y",
                "contains_point",
                "_scale_rectangle",
                "_adjust_rectangle_edge",
                "store_shapes",
                "emit",
                "update",
                "accept",
                "pos",
                "x"
            ],
            "_scale_rectangle": [
                "len",
                "width",
                "height",
                "x",
                "y",
                "sum",
                "QPointF",
                "max",
                "range",
                "append",
                "enumerate"
            ],
            "_adjust_rectangle_edge": [
                "len",
                "bounding_rect",
                "left",
                "right",
                "top",
                "bottom",
                "x",
                "abs",
                "y",
                "min",
                "width",
                "height",
                "enumerate",
                "max",
                "QPointF"
            ],
            "move_by_keyboard": [
                "bounded_move_shapes",
                "repaint"
            ],
            "rotate_by_keyboard": [
                "enumerate",
                "bounded_rotate_shapes",
                "repaint"
            ],
            "keyPressEvent": [
                "modifiers",
                "key",
                "drawing",
                "emit",
                "update",
                "can_close_shape",
                "finalise",
                "editing",
                "move_by_keyboard",
                "QPointF",
                "rotate_by_keyboard"
            ],
            "keyReleaseEvent": [
                "modifiers",
                "drawing",
                "int",
                "editing",
                "index",
                "store_shapes",
                "emit"
            ],
            "set_last_label": [
                "pop",
                "store_shapes"
            ],
            "undo_last_line": [
                "pop",
                "set_open",
                "emit"
            ],
            "undo_last_point": [
                "is_closed",
                "pop_point",
                "len",
                "emit",
                "update"
            ],
            "load_pixmap": [
                "update"
            ],
            "load_shapes": [
                "list",
                "extend",
                "store_shapes",
                "update"
            ],
            "set_shape_visible": [
                "update"
            ],
            "current_cursor": [
                "overrideCursor",
                "shape"
            ],
            "override_cursor": [
                "current_cursor",
                "setOverrideCursor",
                "changeOverrideCursor"
            ],
            "restore_cursor": [
                "restoreOverrideCursor"
            ],
            "reset_state": [
                "restore_cursor",
                "update"
            ],
            "set_cross_line": [
                "update"
            ],
            "gen_new_group_id": [
                "max"
            ],
            "merge_group_ids": [],
            "group_selected_shapes": [
                "len",
                "set",
                "add",
                "min",
                "gen_new_group_id",
                "merge_group_ids",
                "update"
            ],
            "ungroup_selected_shapes": [
                "len",
                "set",
                "add",
                "update"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/file_dialog_preview.py": {
        "file_name": "/anylabeling/views/labeling/widgets/file_dialog_preview.py",
        "imports": [
            "json",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ScrollAreaPreview",
                "methods": [
                    "__init__",
                    "set_text",
                    "set_pixmap",
                    "clear"
                ]
            },
            {
                "class_name": "FileDialogPreview",
                "methods": [
                    "__init__",
                    "on_change"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWidgetResizable",
                "QWidget",
                "setWidget",
                "QVBoxLayout",
                "QLabel",
                "setWordWrap",
                "addWidget",
                "setOption",
                "ScrollAreaPreview",
                "setFixedSize",
                "setHidden",
                "addStretch",
                "width",
                "height",
                "addLayout",
                "layout",
                "connect"
            ],
            "set_text": [
                "setText"
            ],
            "set_pixmap": [
                "setPixmap"
            ],
            "clear": [
                "clear"
            ],
            "on_change": [
                "endswith",
                "lower",
                "open",
                "load",
                "set_text",
                "dumps",
                "setAlignment",
                "setHidden",
                "QPixmap",
                "isNull",
                "clear",
                "set_pixmap",
                "scaled",
                "width",
                "height"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/escapable_qlist_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/escapable_qlist_widget.py",
        "imports": [
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt"
        ],
        "classes": [
            {
                "class_name": "EscapableQListWidget",
                "methods": [
                    "keyPressEvent"
                ]
            }
        ],
        "functions": {
            "keyPressEvent": [
                "keyPressEvent",
                "super",
                "key",
                "clearSelection"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/crosshair_settings_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/crosshair_settings_dialog.py",
        "imports": [
            "PyQt5.QtWidgets",
            "PyQt5.QtCore",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "CrosshairSettingsDialog",
                "methods": [
                    "__init__",
                    "move_to_center",
                    "update_width_slider",
                    "update_width_spinbox",
                    "update_opacity_slider",
                    "update_opacity_spinbox",
                    "choose_color",
                    "reset_settings",
                    "get_settings"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "tr",
                "setModal",
                "setFixedSize",
                "setWindowFlags",
                "windowFlags",
                "setStyleSheet",
                "new_icon_path",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QHBoxLayout",
                "QLabel",
                "setMinimumWidth",
                "QCheckBox",
                "setChecked",
                "addWidget",
                "addStretch",
                "QSlider",
                "setMinimum",
                "setMaximum",
                "setValue",
                "int",
                "setTickInterval",
                "QDoubleSpinBox",
                "setRange",
                "setSingleStep",
                "setFixedWidth",
                "setAlignment",
                "QLineEdit",
                "setText",
                "QPushButton",
                "connect",
                "addLayout",
                "setLayout",
                "move_to_center"
            ],
            "move_to_center": [
                "frameGeometry",
                "center",
                "availableGeometry",
                "QDesktopWidget",
                "moveCenter",
                "move",
                "topLeft"
            ],
            "update_width_slider": [
                "setValue",
                "int"
            ],
            "update_width_spinbox": [
                "setValue"
            ],
            "update_opacity_slider": [
                "setValue",
                "int"
            ],
            "update_opacity_spinbox": [
                "setValue"
            ],
            "choose_color": [
                "getColor",
                "isValid",
                "setText",
                "name"
            ],
            "reset_settings": [
                "setChecked",
                "setValue",
                "int",
                "setText"
            ],
            "get_settings": [
                "isChecked",
                "value",
                "text"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/model_dropdown_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/model_dropdown_widget.py",
        "imports": [
            "difflib.SequenceMatcher",
            "pathlib.Path",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtGui.QIcon",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.utils.load_json",
            "anylabeling.views.labeling.chatbot.utils.save_json",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "SearchBar",
                "methods": [
                    "__init__",
                    "on_resize"
                ]
            },
            {
                "class_name": "ModelItem",
                "methods": [
                    "__init__",
                    "enterEvent",
                    "leaveEvent",
                    "mousePressEvent",
                    "toggle_favorite",
                    "update_selection",
                    "update_favorite"
                ]
            },
            {
                "class_name": "ProviderSection",
                "methods": [
                    "__init__",
                    "add_model_item"
                ]
            },
            {
                "class_name": "ModelDropdown",
                "methods": [
                    "__init__",
                    "update_models_data",
                    "save_models_data",
                    "setup_model_list",
                    "select_model",
                    "toggle_favorite",
                    "filter_models"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setPlaceholderText",
                "setFixedHeight",
                "setStyleSheet",
                "QLabel",
                "setPixmap",
                "pixmap",
                "QIcon",
                "new_icon",
                "QSize",
                "setFixedSize",
                "size",
                "get",
                "setFrameShape",
                "QHBoxLayout",
                "setContentsMargins",
                "addWidget",
                "addStretch",
                "QPushButton",
                "setIcon",
                "setVisible",
                "connect",
                "QVBoxLayout",
                "lower",
                "addLayout",
                "setWindowFlags",
                "resize",
                "new_icon_path",
                "SearchBar",
                "QScrollArea",
                "setWidgetResizable",
                "QWidget",
                "setSpacing",
                "setWidget",
                "setup_model_list"
            ],
            "on_resize": [
                "height",
                "move",
                "resizeEvent",
                "super"
            ],
            "enterEvent": [
                "setVisible",
                "enterEvent",
                "super"
            ],
            "leaveEvent": [
                "setVisible",
                "leaveEvent",
                "super"
            ],
            "mousePressEvent": [
                "emit",
                "mousePressEvent",
                "super"
            ],
            "toggle_favorite": [
                "setIcon",
                "QIcon",
                "new_icon",
                "emit",
                "items",
                "save_models_data",
                "setup_model_list"
            ],
            "update_selection": [
                "setPixmap",
                "pixmap",
                "QIcon",
                "new_icon",
                "QSize",
                "setStyleSheet",
                "clear"
            ],
            "update_favorite": [
                "setIcon",
                "QIcon",
                "new_icon",
                "setVisible",
                "underMouse"
            ],
            "add_model_item": [
                "addWidget"
            ],
            "update_models_data": [
                "setup_model_list"
            ],
            "save_models_data": [
                "load_json",
                "save_json",
                "error"
            ],
            "setup_model_list": [
                "reversed",
                "range",
                "count",
                "itemAt",
                "widget",
                "deleteLater",
                "spacerItem",
                "removeItem",
                "items",
                "get",
                "append",
                "ProviderSection",
                "addWidget",
                "ModelItem",
                "connect",
                "add_model_item",
                "QFrame",
                "setFrameShape",
                "setFrameShadow",
                "addStretch",
                "update",
                "adjustSize",
                "parentWidget"
            ],
            "select_model": [
                "items",
                "update_selection",
                "save_models_data",
                "emit",
                "close"
            ],
            "filter_models": [
                "reversed",
                "range",
                "count",
                "widget",
                "itemAt",
                "isinstance",
                "text",
                "deleteLater",
                "setVisible",
                "items",
                "lower",
                "ratio",
                "SequenceMatcher",
                "QLabel",
                "setAlignment",
                "setStyleSheet",
                "addWidget",
                "isVisible",
                "frameShape"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/searchable_model_dropdown.py": {
        "file_name": "/anylabeling/views/labeling/widgets/searchable_model_dropdown.py",
        "imports": [
            "difflib.SequenceMatcher",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtGui.QIcon",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.utils.load_json",
            "anylabeling.views.labeling.chatbot.utils.save_json",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "SearchBar",
                "methods": [
                    "__init__",
                    "on_resize"
                ]
            },
            {
                "class_name": "ProviderSection",
                "methods": [
                    "__init__",
                    "add_model_item"
                ]
            },
            {
                "class_name": "ModelItem",
                "methods": [
                    "__init__",
                    "enterEvent",
                    "leaveEvent",
                    "mousePressEvent",
                    "toggle_favorite",
                    "update_selection",
                    "update_favorite"
                ]
            },
            {
                "class_name": "SearchableModelDropdownPopup",
                "methods": [
                    "__init__",
                    "setup_model_list",
                    "select_model",
                    "update_models_data",
                    "toggle_favorite",
                    "save_models_data",
                    "filter_models"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setPlaceholderText",
                "setFixedHeight",
                "setStyleSheet",
                "QLabel",
                "setPixmap",
                "pixmap",
                "QIcon",
                "new_icon",
                "QSize",
                "setFixedSize",
                "size",
                "QVBoxLayout",
                "setContentsMargins",
                "QHBoxLayout",
                "lower",
                "addWidget",
                "addStretch",
                "addLayout",
                "get",
                "setFrameShape",
                "QPushButton",
                "setIcon",
                "setVisible",
                "connect",
                "setWindowFlags",
                "setMinimumWidth",
                "new_icon_path",
                "SearchBar",
                "QScrollArea",
                "setWidgetResizable",
                "setHorizontalScrollBarPolicy",
                "QWidget",
                "setSpacing",
                "setWidget",
                "setup_model_list"
            ],
            "on_resize": [
                "height",
                "move",
                "resizeEvent",
                "super"
            ],
            "add_model_item": [
                "addWidget"
            ],
            "enterEvent": [
                "setVisible",
                "enterEvent",
                "super"
            ],
            "leaveEvent": [
                "setVisible",
                "leaveEvent",
                "super"
            ],
            "mousePressEvent": [
                "emit",
                "mousePressEvent",
                "super"
            ],
            "toggle_favorite": [
                "setIcon",
                "QIcon",
                "new_icon",
                "emit",
                "items",
                "save_models_data",
                "setup_model_list"
            ],
            "update_selection": [
                "setPixmap",
                "pixmap",
                "QIcon",
                "new_icon",
                "QSize",
                "setStyleSheet",
                "clear"
            ],
            "update_favorite": [
                "setIcon",
                "QIcon",
                "new_icon",
                "setVisible",
                "underMouse"
            ],
            "setup_model_list": [
                "reversed",
                "range",
                "count",
                "itemAt",
                "widget",
                "deleteLater",
                "spacerItem",
                "removeItem",
                "items",
                "get",
                "append",
                "ProviderSection",
                "addWidget",
                "ModelItem",
                "connect",
                "add_model_item",
                "QFrame",
                "setFrameShape",
                "setFrameShadow",
                "addStretch",
                "update",
                "adjustSize",
                "parentWidget"
            ],
            "select_model": [
                "items",
                "update_selection",
                "save_models_data",
                "emit",
                "close",
                "adjustSize",
                "parentWidget"
            ],
            "update_models_data": [
                "setup_model_list"
            ],
            "save_models_data": [
                "exists",
                "load_json",
                "save_json"
            ],
            "filter_models": [
                "reversed",
                "range",
                "count",
                "widget",
                "itemAt",
                "isinstance",
                "text",
                "deleteLater",
                "setVisible",
                "items",
                "lower",
                "ratio",
                "SequenceMatcher",
                "QLabel",
                "setAlignment",
                "setStyleSheet",
                "addWidget",
                "isVisible",
                "frameShape"
            ]
        }
    },
    "anylabeling/views/labeling/widgets/auto_labeling/__init__.py": {
        "file_name": "/anylabeling/views/labeling/widgets/auto_labeling/__init__.py",
        "imports": [
            "auto_labeling.*"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/widgets/auto_labeling/auto_labeling.py": {
        "file_name": "/anylabeling/views/labeling/widgets/auto_labeling/auto_labeling.py",
        "imports": [
            "os",
            "yaml",
            "collections",
            "PyQt5.uic",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.pyqtSlot",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QWidget",
            "anylabeling.services.auto_labeling.model_manager.ModelManager",
            "anylabeling.services.auto_labeling.types.AutoLabelingMode",
            "anylabeling.services.auto_labeling._AUTO_LABELING_IOU_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_CONF_MODELS",
            "anylabeling.services.auto_labeling._SKIP_DET_MODELS",
            "anylabeling.services.auto_labeling._SKIP_PREDICTION_ON_NEW_MARKS_MODELS",
            "anylabeling.views.labeling.chatbot.style.ChatbotDialogStyle",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.style.get_lineedit_style",
            "anylabeling.views.labeling.utils.style.get_double_spinbox_style",
            "anylabeling.views.labeling.utils.style.get_normal_button_style",
            "anylabeling.views.labeling.utils.style.get_highlight_button_style",
            "anylabeling.views.labeling.utils.style.get_toggle_button_style",
            "anylabeling.views.labeling.widgets.api_token_dialog.ApiTokenDialog",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown.load_json",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown.save_json",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown._MODELS_CONFIG_PATH",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown.SearchableModelDropdownPopup"
        ],
        "classes": [
            {
                "class_name": "AutoLabelingWidget",
                "methods": [
                    "__init__",
                    "init_model_data",
                    "_sort_model_data",
                    "show_model_dropdown",
                    "on_model_selected",
                    "populate_upn_combobox",
                    "populate_gd_combobox",
                    "populate_florence2_combobox",
                    "update_button_colors",
                    "set_auto_labeling_mode",
                    "run_prediction",
                    "run_vl_prediction",
                    "unload_and_hide",
                    "on_new_model_status",
                    "on_new_model_loaded",
                    "update_upn_mode_ui",
                    "update_groundingdino_mode_ui",
                    "update_florence2_mode_ui",
                    "on_output_modes_changed",
                    "update_visible_widgets",
                    "hide_labeling_widgets",
                    "on_new_marks",
                    "on_open",
                    "on_close",
                    "on_conf_value_changed",
                    "on_iou_value_changed",
                    "on_preserve_existing_annotations_state_changed",
                    "on_reset_tracker",
                    "on_set_api_token",
                    "on_cache_auto_label_changed",
                    "add_new_prompt",
                    "on_upn_mode_changed",
                    "on_gd_mode_changed",
                    "on_florence2_mode_changed",
                    "update_florence2_widgets",
                    "on_auto_decode_toggled",
                    "on_clear_clicked",
                    "on_finish_clicked",
                    "on_skip_detection_toggled",
                    "_extract_shapes_for_recognition",
                    "on_mask_fineness_changed"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "dirname",
                "loadUi",
                "join",
                "ModelManager",
                "connect",
                "new_shapes_from_auto_labeling",
                "set_output_mode",
                "currentData",
                "set_enable_tools",
                "init_model_data",
                "SearchableModelDropdownPopup",
                "hide",
                "setStyleSheet",
                "get_normal_button_style",
                "setShortcut",
                "get_highlight_button_style",
                "setToolTip",
                "tr",
                "get_double_spinbox_style",
                "get_lineedit_style",
                "set_auto_labeling_mode",
                "setChecked",
                "setCheckable",
                "setText",
                "get_slider_style",
                "on_mask_fineness_changed",
                "value",
                "hide_labeling_widgets",
                "emit",
                "populate_upn_combobox",
                "populate_florence2_combobox",
                "populate_gd_combobox"
            ],
            "set_enable_tools": [
                "setEnabled"
            ],
            "init_model_data": [
                "load_json",
                "items",
                "exists",
                "startswith",
                "get_model_configs",
                "get",
                "update",
                "_sort_model_data"
            ],
            "_sort_model_data": [
                "sorted",
                "keys",
                "OrderedDict",
                "items"
            ],
            "top_level_sort_key": [],
            "inner_sort_key": [
                "get"
            ],
            "show_model_dropdown": [
                "mapToGlobal",
                "QPoint",
                "move",
                "int",
                "x",
                "y",
                "adjustSize",
                "show"
            ],
            "on_model_selected": [
                "unload_model",
                "QFileDialog",
                "setFileMode",
                "setNameFilter",
                "exec_",
                "hide_labeling_widgets",
                "selectedFiles",
                "load_custom_model",
                "setText",
                "open",
                "safe_load",
                "startswith",
                "init_model_data",
                "save_json",
                "update_models_data",
                "emit",
                "setEnabled"
            ],
            "populate_upn_combobox": [
                "clear",
                "tr",
                "items",
                "addItem"
            ],
            "populate_gd_combobox": [
                "clear",
                "items",
                "addItem"
            ],
            "populate_florence2_combobox": [
                "clear",
                "tr",
                "items",
                "addItem"
            ],
            "update_button_colors": [
                "setStyleSheet",
                "get_normal_button_style",
                "get_toggle_button_style",
                "pyqtSlot"
            ],
            "set_auto_labeling_mode": [
                "AutoLabelingMode",
                "emit"
            ],
            "run_prediction": [
                "isChecked",
                "_extract_shapes_for_recognition",
                "predict_shapes_threading"
            ],
            "run_vl_prediction": [
                "predict_shapes_threading",
                "text"
            ],
            "unload_and_hide": [
                "hide"
            ],
            "on_new_model_status": [
                "setText"
            ],
            "on_new_model_loaded": [
                "setEnabled",
                "setValue",
                "on_reset_tracker",
                "on_iou_value_changed",
                "on_conf_value_changed",
                "on_preserve_existing_annotations_state_changed",
                "get",
                "update_upn_mode_ui",
                "update_florence2_mode_ui",
                "update_groundingdino_mode_ui"
            ],
            "update_upn_mode_ui": [
                "findData",
                "setCurrentIndex"
            ],
            "update_groundingdino_mode_ui": [
                "findData",
                "setCurrentIndex"
            ],
            "update_florence2_mode_ui": [
                "findData",
                "setCurrentIndex",
                "update_florence2_widgets"
            ],
            "on_output_modes_changed": [
                "disconnect",
                "clear",
                "items",
                "addItem",
                "setCurrentIndex",
                "findData",
                "connect",
                "set_output_mode",
                "currentData"
            ],
            "update_visible_widgets": [
                "get_required_widgets",
                "hasattr",
                "show",
                "getattr",
                "warning"
            ],
            "hide_labeling_widgets": [
                "hide",
                "getattr"
            ],
            "on_new_marks": [
                "set_auto_labeling_marks",
                "run_prediction"
            ],
            "on_open": [],
            "on_close": [],
            "on_conf_value_changed": [
                "set_auto_labeling_conf"
            ],
            "on_iou_value_changed": [
                "set_auto_labeling_iou"
            ],
            "on_preserve_existing_annotations_state_changed": [
                "set_auto_labeling_preserve_existing_annotations_state"
            ],
            "on_reset_tracker": [
                "set_auto_labeling_reset_tracker"
            ],
            "on_set_api_token": [
                "ApiTokenDialog",
                "exec_",
                "get_token",
                "set_auto_labeling_api_token",
                "error"
            ],
            "on_cache_auto_label_changed": [
                "set_cache_auto_label"
            ],
            "add_new_prompt": [
                "set_auto_labeling_prompt"
            ],
            "on_upn_mode_changed": [
                "currentData",
                "set_upn_mode",
                "pyqtSlot"
            ],
            "on_gd_mode_changed": [
                "currentData",
                "set_groundingdino_mode",
                "pyqtSlot"
            ],
            "on_florence2_mode_changed": [
                "currentData",
                "set_florence2_mode",
                "update_florence2_widgets",
                "pyqtSlot"
            ],
            "update_florence2_widgets": [
                "get",
                "hide",
                "getattr",
                "setPlaceholderText",
                "show",
                "disconnect",
                "setText",
                "connect",
                "on_preserve_existing_annotations_state_changed"
            ],
            "on_auto_decode_toggled": [
                "isChecked",
                "setText",
                "setStyleSheet",
                "get_toggle_button_style",
                "get_normal_button_style",
                "emit"
            ],
            "on_clear_clicked": [
                "emit"
            ],
            "on_finish_clicked": [
                "emit",
                "add_new_prompt"
            ],
            "on_skip_detection_toggled": [
                "isChecked",
                "setText",
                "tr",
                "setStyleSheet",
                "get_toggle_button_style",
                "get_normal_button_style"
            ],
            "_extract_shapes_for_recognition": [
                "append",
                "tr",
                "emit",
                "ValueError"
            ],
            "on_mask_fineness_changed": [
                "setText",
                "set_mask_fineness",
                "emit"
            ]
        }
    },
    "anylabeling/views/labeling/utils/colormap.py": {
        "file_name": "/anylabeling/views/labeling/utils/colormap.py",
        "imports": [
            "numpy"
        ],
        "classes": [],
        "functions": {
            "label_colormap": [
                "zeros",
                "len",
                "range"
            ]
        }
    },
    "anylabeling/views/labeling/utils/batch.py": {
        "file_name": "/anylabeling/views/labeling/utils/batch.py",
        "imports": [
            "base64",
            "json",
            "os.path",
            "PIL.Image",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QDialogButtonBox",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils._io.io_open",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_msg_box_style",
            "anylabeling.views.labeling.widgets.popup.Popup"
        ],
        "classes": [
            {
                "class_name": "TextInputDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "get_input_text"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "init_ui"
            ],
            "init_ui": [
                "setWindowTitle",
                "tr",
                "setFixedSize",
                "setWindowFlags",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "setStyleSheet",
                "addWidget",
                "QLineEdit",
                "setPlaceholderText",
                "QDialogButtonBox",
                "connect",
                "setLayout"
            ],
            "get_input_text": [
                "exec_",
                "strip",
                "text"
            ],
            "get_image_size": [
                "open"
            ],
            "finish_processing": [
                "import_image_folder",
                "dirname",
                "close",
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup"
            ],
            "cancel_operation": [],
            "save_auto_labeling_result": [
                "splitext",
                "join",
                "basename",
                "to_dict",
                "exists",
                "io_open",
                "load",
                "extend",
                "open",
                "read",
                "decode",
                "b64encode",
                "get_image_size",
                "dump",
                "error",
                "str"
            ],
            "process_next_image": [
                "len",
                "load_file",
                "predict_shapes",
                "save_auto_labeling_result",
                "setValue",
                "finish_processing",
                "close",
                "error",
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup"
            ],
            "show_progress_dialog_and_process": [
                "QProgressDialog",
                "tr",
                "len",
                "setWindowModality",
                "setWindowTitle",
                "setMinimumWidth",
                "setMinimumHeight",
                "setLabelText",
                "findChild",
                "connect",
                "setStyleSheet",
                "cancel_operation",
                "show",
                "singleShot",
                "process_next_image"
            ],
            "update_progress": [
                "setLabelText",
                "len"
            ],
            "run_all_images": [
                "len",
                "emit",
                "tr",
                "warning",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "info",
                "str",
                "TextInputDialog",
                "get_input_text",
                "show_progress_dialog_and_process"
            ]
        }
    },
    "anylabeling/views/labeling/utils/crop.py": {
        "file_name": "/anylabeling/views/labeling/utils/crop.py",
        "imports": [
            "json",
            "multiprocessing",
            "os",
            "os.path",
            "shutil",
            "sys",
            "pathlib.Path",
            "cv2",
            "numpy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QMessageBox",
            "anylabeling.views.labeling.chatbot.style.ChatbotDialogStyle",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_cancel_btn_style",
            "anylabeling.views.labeling.utils.style.get_export_option_style",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_msg_box_style",
            "anylabeling.views.labeling.utils.style.get_progress_dialog_style"
        ],
        "classes": [],
        "functions": {
            "crop_and_save": [
                "Path",
                "boundingRect",
                "imdecode",
                "fromfile",
                "str",
                "ValueError",
                "error",
                "max",
                "min",
                "warning",
                "mkdir",
                "get",
                "imencode",
                "open",
                "write",
                "tobytes"
            ],
            "process_single_image": [
                "basename",
                "join",
                "splitext",
                "exists",
                "open",
                "load",
                "get",
                "Path",
                "imdecode",
                "fromfile",
                "str",
                "ValueError",
                "error",
                "astype",
                "array",
                "len",
                "boundingRect",
                "max",
                "min",
                "warning",
                "mkdir",
                "imencode",
                "write",
                "tobytes"
            ],
            "save_crop": [
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "dirname",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "QSpinBox",
                "setRange",
                "setValue",
                "get_spinbox_style",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "show",
                "processEvents",
                "splitext",
                "basename",
                "open",
                "load",
                "get",
                "value",
                "copy",
                "getattr",
                "info",
                "enumerate",
                "process_single_image",
                "wasCanceled",
                "max",
                "int",
                "cpu_count",
                "Pool",
                "imap",
                "terminate",
                "close",
                "error"
            ],
            "browse_export_path": [
                "getExistingDirectory",
                "tr",
                "text",
                "setText"
            ]
        }
    },
    "anylabeling/views/labeling/utils/shape.py": {
        "file_name": "/anylabeling/views/labeling/utils/shape.py",
        "imports": [
            "json",
            "math",
            "uuid",
            "numpy",
            "PIL.Image",
            "PIL.ImageDraw",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QProgressDialog",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.widgets.PolygonSidesDialog",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.*",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta"
        ],
        "classes": [],
        "functions": {
            "get_conversion_params": [
                "PolygonSidesDialog",
                "exec_",
                "get_value"
            ],
            "shape_conversion": [
                "get_label_file_list",
                "len",
                "get_conversion_params",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "tr",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumWidth",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "show",
                "enumerate",
                "open",
                "load",
                "range",
                "array",
                "int",
                "min",
                "max",
                "astype",
                "reshape",
                "get_bounding_boxes",
                "tolist",
                "calculate_rotation_theta",
                "sqrt",
                "get",
                "cos",
                "sin",
                "append",
                "dump",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "load_file",
                "error"
            ],
            "polygons_to_mask": [
                "warning",
                "shape_to_mask"
            ],
            "shape_to_mask": [
                "zeros",
                "fromarray",
                "Draw",
                "tuple",
                "len",
                "sqrt",
                "ellipse",
                "rectangle",
                "polygon",
                "line",
                "array"
            ],
            "shapes_to_label": [
                "zeros",
                "zeros_like",
                "get",
                "uuid1",
                "append",
                "index",
                "shape_to_mask"
            ],
            "masks_to_bboxes": [
                "ValueError",
                "argwhere",
                "min",
                "max",
                "append",
                "asarray"
            ],
            "rectangle_from_diagonal": []
        }
    },
    "anylabeling/views/labeling/utils/__init__.py": {
        "file_name": "/anylabeling/views/labeling/utils/__init__.py",
        "imports": [
            "batch.run_all_images",
            "colormap.label_colormap",
            "crop.save_crop",
            "export.export_yolo_annotation",
            "export.export_voc_annotation",
            "export.export_coco_annotation",
            "export.export_dota_annotation",
            "export.export_mask_annotation",
            "export.export_mot_annotation",
            "export.export_odvg_annotation",
            "export.export_pporc_annotation",
            "export.export_vlm_r1_ovd_annotation",
            "general.gradient_text",
            "general.hex_to_rgb",
            "general.is_chinese",
            "general.find_most_similar_label",
            "image.check_img_exif",
            "image.get_pil_img_dim",
            "image.img_arr_to_b64",
            "image.img_b64_to_arr",
            "image.img_data_to_arr",
            "image.img_data_to_pil",
            "image.img_data_to_png_data",
            "image.img_pil_to_data",
            "image.process_image_exif",
            "_io.io_open",
            "qt.Struct",
            "qt.add_actions",
            "qt.scan_all_images",
            "qt.distance",
            "qt.distance_to_line",
            "qt.fmt_shortcut",
            "qt.label_validator",
            "qt.new_action",
            "qt.new_button",
            "qt.new_icon",
            "qt.on_thumbnail_click",
            "shape.masks_to_bboxes",
            "shape.polygons_to_mask",
            "shape.shape_to_mask",
            "shape.shapes_to_label",
            "shape.rectangle_from_diagonal",
            "shape.shape_conversion",
            "upload.upload_image_flags_file",
            "upload.upload_label_flags_file",
            "upload.upload_shape_attrs_file",
            "upload.upload_label_classes_file",
            "upload.upload_yolo_annotation",
            "upload.upload_voc_annotation",
            "upload.upload_coco_annotation",
            "upload.upload_dota_annotation",
            "upload.upload_mask_annotation",
            "upload.upload_mot_annotation",
            "upload.upload_odvg_annotation",
            "upload.upload_mmgd_annotation",
            "upload.upload_ppocr_annotation",
            "upload.upload_vlm_r1_ovd_annotation",
            "video.open_video_file"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/utils/video.py": {
        "file_name": "/anylabeling/views/labeling/utils/video.py",
        "imports": [
            "cv2",
            "os",
            "os.path",
            "shutil",
            "tempfile",
            "subprocess",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QApplication",
            "anylabeling.views.labeling.chatbot.style.ChatbotDialogStyle",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_msg_box_style",
            "anylabeling.views.labeling.utils.style.get_progress_dialog_style",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_cancel_btn_style",
            "anylabeling.views.labeling.widgets.Popup"
        ],
        "classes": [
            {
                "class_name": "FrameExtractionDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "update_example",
                    "get_values"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setup_ui"
            ],
            "setup_ui": [
                "setWindowTitle",
                "tr",
                "setStyleSheet",
                "get_msg_box_style",
                "QVBoxLayout",
                "QHBoxLayout",
                "QLabel",
                "QSpinBox",
                "setRange",
                "max",
                "setValue",
                "get_spinbox_style",
                "new_icon_path",
                "setMinimumWidth",
                "addWidget",
                "QLineEdit",
                "get_settings_edit_style",
                "setText",
                "addLayout",
                "update_example",
                "QPushButton",
                "get_ok_btn_style",
                "get_cancel_btn_style",
                "connect",
                "setLayout",
                "resize"
            ],
            "update_example": [
                "text",
                "zfill",
                "str",
                "value",
                "tr",
                "setText",
                "format"
            ],
            "get_values": [
                "value",
                "text"
            ],
            "extract_frames_from_video": [
                "str",
                "VideoCapture",
                "isOpened",
                "release",
                "warning",
                "open",
                "read",
                "splitext",
                "NamedTemporaryFile",
                "write",
                "close",
                "debug",
                "error",
                "Popup",
                "basename",
                "new_icon_path",
                "show_popup",
                "int",
                "get",
                "info",
                "FrameExtractionDialog",
                "exec_",
                "get_values",
                "makedirs",
                "which",
                "QProgressDialog",
                "tr",
                "setWindowModality",
                "setWindowTitle",
                "setMinimumWidth",
                "setMinimumHeight",
                "setStyleSheet",
                "get_progress_dialog_style",
                "show",
                "processEvents",
                "join",
                "Popen",
                "poll",
                "wasCanceled",
                "terminate",
                "wait",
                "kill",
                "communicate",
                "len",
                "listdir",
                "startswith",
                "endswith",
                "isVisible",
                "exception",
                "setValue",
                "zfill",
                "imwrite",
                "exists",
                "remove"
            ],
            "open_video_file": [
                "may_continue",
                "getOpenFileName",
                "tr",
                "exists",
                "warning",
                "join",
                "dirname",
                "splitext",
                "basename",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "format",
                "setInformativeText",
                "setStandardButtons",
                "setDefaultButton",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "info",
                "rmtree",
                "error",
                "Popup",
                "new_icon_path",
                "show_popup",
                "extract_frames_from_video",
                "import_image_folder",
                "listdir",
                "rmdir"
            ]
        }
    },
    "anylabeling/views/labeling/utils/image.py": {
        "file_name": "/anylabeling/views/labeling/utils/image.py",
        "imports": [
            "os",
            "os.path",
            "base64",
            "io",
            "shutil",
            "numpy",
            "PIL.Image",
            "PIL.ImageOps",
            "PyQt5.QtGui",
            "labeling.logger.logger"
        ],
        "classes": [],
        "functions": {
            "img_data_to_pil": [
                "BytesIO",
                "write",
                "open"
            ],
            "img_data_to_arr": [
                "img_data_to_pil",
                "array"
            ],
            "img_b64_to_arr": [
                "b64decode",
                "img_data_to_arr"
            ],
            "img_pil_to_data": [
                "BytesIO",
                "save",
                "getvalue"
            ],
            "pil_to_qimage": [
                "convert",
                "array",
                "QImage"
            ],
            "img_arr_to_b64": [
                "fromarray",
                "BytesIO",
                "save",
                "getvalue",
                "hasattr",
                "encodebytes",
                "encodestring"
            ],
            "img_data_to_png_data": [
                "BytesIO",
                "write",
                "open",
                "save",
                "seek",
                "read"
            ],
            "get_pil_img_dim": [
                "isinstance",
                "open",
                "BytesIO",
                "ValueError",
                "type",
                "error",
                "str"
            ],
            "check_img_exif": [
                "open",
                "getexif",
                "get"
            ],
            "process_image_exif": [
                "open",
                "getexif",
                "get",
                "exif_transpose",
                "join",
                "dirname",
                "makedirs",
                "basename",
                "copy2",
                "save",
                "error"
            ]
        }
    },
    "anylabeling/views/labeling/utils/export.py": {
        "file_name": "/anylabeling/views/labeling/utils/export.py",
        "imports": [
            "json",
            "os",
            "os.path",
            "pathlib",
            "shutil",
            "time",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "anylabeling.views.labeling.label_converter.LabelConverter",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.*"
        ],
        "classes": [
            {
                "class_name": "ExportThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "run": [
                "sleep",
                "custom_to_vlm_r1_ovd",
                "custom_to_mot",
                "custom_to_mots",
                "custom_to_odvg",
                "custom_to_coco",
                "emit",
                "str"
            ],
            "_check_filename_exist": [
                "may_continue",
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup"
            ],
            "export_yolo_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "LabelConverter",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "dirname",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "QCheckBox",
                "setChecked",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "isChecked",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "basename",
                "splitext",
                "custom_to_yolo",
                "copy",
                "remove",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "browse_export_path": [
                "getExistingDirectory",
                "tr",
                "text",
                "setText"
            ],
            "export_voc_annotation": [
                "_check_filename_exist",
                "QDialog",
                "setWindowTitle",
                "tr",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "dirname",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "QCheckBox",
                "setChecked",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "isChecked",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "LabelConverter",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "basename",
                "splitext",
                "custom_to_voc",
                "copy",
                "remove",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "export_coco_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "LabelConverter",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "dirname",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "ExportThread",
                "show",
                "start"
            ],
            "on_export_finished": [
                "close",
                "tr",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "export_dota_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "dirname",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "LabelConverter",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "basename",
                "splitext",
                "touch",
                "Path",
                "custom_to_dota",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "export_mask_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "open",
                "load",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "dirname",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "LabelConverter",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "enumerate",
                "basename",
                "splitext",
                "custom_to_mask",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "export_mot_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "LabelConverter",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "dirname",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "ExportThread",
                "show",
                "start"
            ],
            "export_odvg_annotation": [
                "export_mot_annotation"
            ],
            "export_pporc_annotation": [
                "_check_filename_exist",
                "QDialog",
                "setWindowTitle",
                "tr",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "dirname",
                "QLineEdit",
                "setText",
                "realpath",
                "join",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "get_msg_box_style",
                "clickedButton",
                "rmtree",
                "makedirs",
                "set",
                "LabelConverter",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "basename",
                "splitext",
                "custom_to_ppocr",
                "union",
                "setValue",
                "wasCanceled",
                "open",
                "writelines",
                "upper",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "export_vlm_r1_ovd_annotation": [
                "_check_filename_exist",
                "QDialog",
                "setWindowTitle",
                "tr",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "dirname",
                "realpath",
                "join",
                "QLineEdit",
                "setText",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "addStretch",
                "_update_preview",
                "setattr",
                "setWordWrap",
                "get_ok_btn_style",
                "setLayout",
                "exec_",
                "text",
                "strip",
                "exists",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "addButton",
                "setDefaultButton",
                "get_msg_box_style",
                "clickedButton",
                "LabelConverter",
                "error",
                "Popup",
                "new_icon_path",
                "show_popup",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "ExportThread",
                "show",
                "start",
                "str",
                "close"
            ],
            "browse_export_file": [
                "getSaveFileName",
                "tr",
                "text",
                "endswith",
                "setText"
            ],
            "_update_preview": [
                "text",
                "format",
                "tr",
                "setText"
            ],
            "_handle_class_file_upload": [
                "getOpenFileName",
                "tr",
                "setText"
            ]
        }
    },
    "anylabeling/views/labeling/utils/general.py": {
        "file_name": "/anylabeling/views/labeling/utils/general.py",
        "imports": [
            "re",
            "math",
            "textwrap",
            "platform",
            "subprocess",
            "webbrowser",
            "difflib.SequenceMatcher",
            "importlib_metadata.version",
            "typing.Iterator",
            "typing.Tuple"
        ],
        "classes": [],
        "functions": {
            "format_bold": [],
            "format_color": [],
            "gradient_text": [
                "gradient_gen",
                "len",
                "join",
                "zip"
            ],
            "color_function": [
                "tuple",
                "round",
                "interpolate",
                "zip"
            ],
            "interpolate": [
                "sin"
            ],
            "gradient_gen": [
                "color_function",
                "range"
            ],
            "hex_to_rgb": [
                "lstrip",
                "tuple",
                "int"
            ],
            "indent_text": [
                "indent"
            ],
            "is_chinese": [
                "bool",
                "search",
                "str"
            ],
            "is_possible_rectangle": [
                "len",
                "square_dist",
                "range",
                "sort"
            ],
            "square_dist": [],
            "collect_system_info": [
                "platform",
                "processor",
                "get_gpu_info",
                "get_cuda_version",
                "python_version",
                "get_installed_package_version"
            ],
            "find_most_similar_label": [
                "ratio",
                "SequenceMatcher"
            ],
            "get_installed_package_version": [
                "get_package_version"
            ],
            "get_cuda_version": [
                "decode",
                "check_output",
                "next",
                "split"
            ],
            "get_gpu_info": [
                "check_output",
                "join",
                "split",
                "strip"
            ],
            "open_url": [
                "system",
                "open",
                "lower",
                "read",
                "run"
            ]
        }
    },
    "anylabeling/views/labeling/utils/qt.py": {
        "file_name": "/anylabeling/views/labeling/utils/qt.py",
        "imports": [
            "natsort",
            "os",
            "os.path",
            "math.sqrt",
            "numpy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Struct",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": {
            "scan_all_images": [
                "lower",
                "decode",
                "data",
                "supportedImageFormats",
                "normpath",
                "abspath",
                "walk",
                "endswith",
                "tuple",
                "join",
                "str",
                "append",
                "natsorted",
                "warning",
                "sorted",
                "error"
            ],
            "new_icon": [
                "QIcon",
                "join"
            ],
            "new_icon_path": [],
            "new_button": [
                "QPushButton",
                "setIcon",
                "new_icon",
                "connect"
            ],
            "new_action": [
                "QAction",
                "setIconText",
                "replace",
                "setIcon",
                "new_icon",
                "isinstance",
                "setShortcuts",
                "setShortcut",
                "setToolTip",
                "setStatusTip",
                "connect",
                "setCheckable",
                "setEnabled",
                "setChecked",
                "emit"
            ],
            "add_actions": [
                "addSeparator",
                "isinstance",
                "addMenu",
                "addAction"
            ],
            "label_validator": [
                "QRegularExpressionValidator",
                "QRegularExpression"
            ],
            "__init__": [
                "update"
            ],
            "distance": [
                "sqrt",
                "x",
                "y"
            ],
            "distance_to_line": [
                "array",
                "x",
                "y",
                "dot",
                "norm",
                "cross"
            ],
            "fmt_shortcut": [
                "split"
            ],
            "on_thumbnail_click": [],
            "_on_click": [
                "isNull",
                "QDialog",
                "setWindowTitle",
                "tr",
                "setModal",
                "QVBoxLayout",
                "setContentsMargins",
                "QHBoxLayout",
                "setSpacing",
                "QLabel",
                "primaryScreen",
                "availableGeometry",
                "width",
                "height",
                "int",
                "min",
                "scaled",
                "setPixmap",
                "setFixedSize",
                "setAlignment",
                "addStretch",
                "addWidget",
                "addLayout",
                "accept",
                "setLayout",
                "move",
                "exec_"
            ]
        }
    },
    "anylabeling/views/labeling/utils/_io.py": {
        "file_name": "/anylabeling/views/labeling/utils/_io.py",
        "imports": [
            "io",
            "contextlib"
        ],
        "classes": [],
        "functions": {
            "io_open": [
                "open"
            ]
        }
    },
    "anylabeling/views/labeling/utils/upload.py": {
        "file_name": "/anylabeling/views/labeling/utils/upload.py",
        "imports": [
            "json",
            "jsonlines",
            "os",
            "os.path",
            "time",
            "yaml",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "anylabeling.views.labeling.label_converter.LabelConverter",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.*",
            "anylabeling.views.labeling.utils.export._check_filename_exist"
        ],
        "classes": [
            {
                "class_name": "UploadPPOCRThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            },
            {
                "class_name": "UploadOdvgThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            },
            {
                "class_name": "UploadMotThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            },
            {
                "class_name": "UploadCocoThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "run": [
                "sleep",
                "ppocr_to_custom",
                "emit",
                "str",
                "odvg_to_custom",
                "mot_to_custom",
                "coco_to_custom"
            ],
            "upload_vlm_r1_ovd_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "dirname",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumWidth",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "LabelConverter",
                "open",
                "list",
                "basename",
                "enumerate",
                "splitext",
                "join",
                "vlm_r1_ovd_to_custom",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "load_file",
                "str",
                "error"
            ],
            "upload_ppocr_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumWidth",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "LabelConverter",
                "dirname",
                "UploadPPOCRThread",
                "connect",
                "show",
                "start"
            ],
            "on_upload_finished": [
                "close",
                "load_file",
                "Popup",
                "tr",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "upload_odvg_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumWidth",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "LabelConverter",
                "dirname",
                "UploadOdvgThread",
                "connect",
                "show",
                "start"
            ],
            "upload_mmgd_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "open",
                "splitlines",
                "read",
                "Popup",
                "str",
                "new_icon_path",
                "show_popup",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setPlaceholderText",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "QScrollArea",
                "setWidgetResizable",
                "setMaximumHeight",
                "QWidget",
                "enumerate",
                "QCheckBox",
                "setChecked",
                "QDoubleSpinBox",
                "setRange",
                "setSingleStep",
                "setValue",
                "setDecimals",
                "addStretch",
                "setWidget",
                "get_ok_btn_style",
                "setLayout",
                "exec_",
                "items",
                "isChecked",
                "append",
                "value",
                "text",
                "dirname",
                "listdir",
                "LabelConverter",
                "QMessageBox",
                "setIcon",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "get_msg_box_style",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "splitext",
                "endswith",
                "mmgd_to_custom",
                "join",
                "wasCanceled",
                "close",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "load_file",
                "error"
            ],
            "browse_json_folder": [
                "getExistingDirectory",
                "tr",
                "setText"
            ],
            "on_ok_clicked": [
                "strip",
                "text",
                "warning",
                "tr",
                "accept"
            ],
            "upload_mot_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "Popup",
                "new_icon_path",
                "show_popup",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "open",
                "splitlines",
                "read",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumWidth",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "LabelConverter",
                "dirname",
                "UploadMotThread",
                "connect",
                "show",
                "start"
            ],
            "upload_mask_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "dirname",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "setStandardButtons",
                "get_msg_box_style",
                "open",
                "load",
                "list",
                "keys",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "text",
                "listdir",
                "LabelConverter",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "endswith",
                "splitext",
                "join",
                "mask_to_custom",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "load_file",
                "str",
                "error"
            ],
            "browse_upload_folder": [
                "getExistingDirectory",
                "tr",
                "text",
                "setText"
            ],
            "upload_dota_annotation": [
                "_check_filename_exist",
                "QDialog",
                "setWindowTitle",
                "tr",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "dirname",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "listdir",
                "LabelConverter",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "setStandardButtons",
                "get_msg_box_style",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "basename",
                "splitext",
                "join",
                "dota_to_custom",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "load_file",
                "str",
                "error"
            ],
            "upload_coco_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "dirname",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "QProgressDialog",
                "setWindowModality",
                "setMinimumWidth",
                "setMinimumHeight",
                "setRange",
                "get_progress_dialog_style",
                "UploadCocoThread",
                "LabelConverter",
                "connect",
                "show",
                "start"
            ],
            "upload_voc_annotation": [
                "_check_filename_exist",
                "QDialog",
                "setWindowTitle",
                "tr",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "dirname",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "listdir",
                "LabelConverter",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "setStandardButtons",
                "get_msg_box_style",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "basename",
                "splitext",
                "join",
                "voc_to_custom",
                "setValue",
                "wasCanceled",
                "close",
                "Popup",
                "new_icon_path",
                "show_popup",
                "load_file",
                "str",
                "error"
            ],
            "upload_yolo_annotation": [
                "_check_filename_exist",
                "getOpenFileName",
                "tr",
                "open",
                "safe_load",
                "items",
                "append",
                "extend",
                "LabelConverter",
                "splitlines",
                "read",
                "QDialog",
                "setWindowTitle",
                "setMinimumWidth",
                "setStyleSheet",
                "get_export_option_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "addWidget",
                "QHBoxLayout",
                "QLineEdit",
                "setText",
                "dirname",
                "QPushButton",
                "connect",
                "get_cancel_btn_style",
                "addLayout",
                "get_ok_btn_style",
                "addStretch",
                "setLayout",
                "exec_",
                "text",
                "listdir",
                "QMessageBox",
                "setIcon",
                "setInformativeText",
                "setStandardButtons",
                "get_msg_box_style",
                "QProgressDialog",
                "len",
                "setWindowModality",
                "setMinimumHeight",
                "get_progress_dialog_style",
                "enumerate",
                "endswith",
                "splitext",
                "join",
                "yolo_to_custom",
                "yolo_obb_to_custom",
                "yolo_pose_to_custom",
                "setValue",
                "wasCanceled",
                "close",
                "load_file",
                "Popup",
                "new_icon_path",
                "show_popup",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "str",
                "error"
            ],
            "upload_label_classes_file": [
                "getOpenFileName",
                "tr",
                "open",
                "strip",
                "readlines",
                "Popup",
                "new_icon_path",
                "show_popup",
                "QMessageBox",
                "setIcon",
                "setWindowTitle",
                "setText",
                "setInformativeText",
                "setStandardButtons",
                "setStyleSheet",
                "get_msg_box_style",
                "exec_",
                "clear",
                "load_labels",
                "addItems",
                "sort_labels",
                "len",
                "set",
                "str",
                "error"
            ],
            "upload_shape_attrs_file": [
                "getOpenFileName",
                "tr",
                "open",
                "load",
                "list",
                "keys",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "show",
                "disconnect",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "upload_label_flags_file": [
                "getOpenFileName",
                "tr",
                "open",
                "safe_load",
                "list",
                "keys",
                "find_items_by_label",
                "create_item_from_label",
                "addItem",
                "_get_rgb_by_label",
                "set_item_label",
                "upload_flags",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ],
            "upload_image_flags_file": [
                "getOpenFileName",
                "tr",
                "open",
                "splitlines",
                "read",
                "load_flags",
                "show",
                "load_file",
                "Popup",
                "new_icon_path",
                "show_popup",
                "str",
                "error"
            ]
        }
    },
    "anylabeling/views/labeling/utils/update_checker.py": {
        "file_name": "/anylabeling/views/labeling/utils/update_checker.py",
        "imports": [
            "requests",
            "threading",
            "packaging.version",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [],
        "functions": {
            "check_for_updates_async": [
                "Thread",
                "start"
            ],
            "update_check_thread": [
                "get",
                "json",
                "lstrip",
                "parse",
                "info",
                "callback"
            ],
            "check_for_updates_sync": [
                "get",
                "json",
                "lstrip",
                "parse"
            ]
        }
    },
    "anylabeling/views/labeling/utils/style.py": {
        "file_name": "/anylabeling/views/labeling/utils/style.py",
        "imports": [
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [],
        "functions": {
            "get_progress_dialog_style": [],
            "get_msg_box_style": [],
            "get_ok_btn_style": [],
            "get_cancel_btn_style": [],
            "get_export_option_style": [
                "new_icon_path"
            ],
            "get_normal_button_style": [],
            "get_toggle_button_style": [],
            "get_highlight_button_style": [],
            "get_spinbox_style": [
                "new_icon_path"
            ],
            "get_double_spinbox_style": [
                "new_icon_path"
            ],
            "get_lineedit_style": []
        }
    },
    "anylabeling/views/labeling/utils/opencv.py": {
        "file_name": "/anylabeling/views/labeling/utils/opencv.py",
        "imports": [
            "os.path",
            "cv2",
            "numpy",
            "qimage2ndarray",
            "PyQt5.QtGui",
            "PyQt5.QtGui.QImage"
        ],
        "classes": [],
        "functions": {
            "qt_img_to_rgb_cv_img": [
                "exists",
                "imdecode",
                "fromfile",
                "cvtColor",
                "format",
                "rgb_view",
                "raw_view",
                "normalize",
                "array",
                "len",
                "merge"
            ],
            "qt_img_to_cv_img": [
                "rgb_view"
            ],
            "cv_img_to_qt_img": [
                "QImage",
                "array2qimage"
            ],
            "get_bounding_boxes": [
                "boundingRect",
                "array",
                "minAreaRect",
                "boxPoints",
                "mean",
                "sorted",
                "arctan2",
                "int64"
            ]
        }
    },
    "anylabeling/views/labeling/chatbot/render.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/render.py",
        "imports": [
            "markdown",
            "markdown.extensions.fenced_code",
            "markdown.extensions.codehilite",
            "markdown.extensions.tables",
            "markdown.extensions.toc",
            "markdown.extensions.attr_list",
            "markdown.extensions.smarty"
        ],
        "classes": [],
        "functions": {
            "convert_markdown_to_html": [
                "markdown"
            ]
        }
    },
    "anylabeling/views/labeling/chatbot/provider.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/provider.py",
        "imports": [
            "json",
            "os",
            "subprocess",
            "threading",
            "time",
            "openai.OpenAI",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.utils.EventTracker",
            "anylabeling.views.labeling.chatbot.utils.load_json",
            "anylabeling.views.labeling.chatbot.utils.save_json",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [],
        "functions": {
            "init_model_config": [
                "exists",
                "dict",
                "save_json",
                "load_json"
            ],
            "get_models_data": [
                "load_json",
                "increment",
                "time",
                "reset",
                "get_count",
                "lower",
                "Thread",
                "start"
            ],
            "fetch_models_async": [
                "get_models_id_list",
                "any",
                "lower",
                "dict",
                "save_json",
                "debug"
            ],
            "get_models_id_list": [
                "run",
                "loads",
                "get",
                "debug",
                "OpenAI",
                "list"
            ],
            "get_default_model_id": [
                "exists",
                "load_json"
            ],
            "get_providers_data": [
                "exists",
                "save_json",
                "load_json",
                "items"
            ]
        }
    },
    "anylabeling/views/labeling/chatbot/utils.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/utils.py",
        "imports": [
            "json",
            "os",
            "time"
        ],
        "classes": [
            {
                "class_name": "EventTracker",
                "methods": [
                    "__new__",
                    "increment",
                    "get_count",
                    "get_all_counts",
                    "reset"
                ]
            }
        ],
        "functions": {
            "__new__": [
                "__new__",
                "super"
            ],
            "increment": [
                "time"
            ],
            "get_count": [
                "get"
            ],
            "get_all_counts": [
                "copy"
            ],
            "reset": [],
            "load_json": [
                "open",
                "load"
            ],
            "save_json": [
                "exists",
                "makedirs",
                "dirname",
                "open",
                "dump"
            ],
            "set_icon_path": []
        }
    },
    "anylabeling/views/labeling/chatbot/__init__.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/__init__.py",
        "imports": [
            "animation.*",
            "chat.*",
            "config.*",
            "general.*",
            "handler.*",
            "provider.*",
            "render.*",
            "style.*",
            "utils.*"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/chatbot/handler.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/handler.py",
        "imports": [
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal"
        ],
        "classes": [
            {
                "class_name": "StreamingHandler",
                "methods": [
                    "__init__",
                    "reset",
                    "append_text",
                    "get_current_message",
                    "start_loading",
                    "stop_loading",
                    "start_typing",
                    "stop_typing",
                    "report_error"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "reset": [],
            "append_text": [
                "emit"
            ],
            "get_current_message": [],
            "start_loading": [
                "emit"
            ],
            "stop_loading": [
                "emit"
            ],
            "start_typing": [
                "emit"
            ],
            "stop_typing": [
                "emit"
            ],
            "report_error": [
                "emit"
            ]
        }
    },
    "anylabeling/views/labeling/chatbot/config.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/config.py",
        "imports": [
            "os"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/chatbot/general.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/general.py",
        "imports": [
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QTextEdit"
        ],
        "classes": [
            {
                "class_name": "BatchProcessDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "center_on_parent",
                    "get_prompt",
                    "exec_"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "tr",
                "setMinimumWidth",
                "setup_ui"
            ],
            "setup_ui": [
                "setStyleSheet",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QLabel",
                "tr",
                "addWidget",
                "QTextEdit",
                "setPlaceholderText",
                "setAcceptRichText",
                "setMinimumHeight",
                "setMaximumHeight",
                "setVerticalScrollBarPolicy",
                "QHBoxLayout",
                "addStretch",
                "QPushButton",
                "setCursor",
                "connect",
                "addLayout",
                "setAttribute",
                "setWindowFlags",
                "windowFlags"
            ],
            "center_on_parent": [
                "mapToGlobal",
                "center",
                "rect",
                "move",
                "x",
                "width",
                "y",
                "height"
            ],
            "get_prompt": [
                "strip",
                "toPlainText"
            ],
            "exec_": [
                "adjustSize",
                "center_on_parent",
                "exec_",
                "super",
                "get_prompt",
                "emit"
            ]
        }
    },
    "anylabeling/views/labeling/chatbot/chat.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/chat.py",
        "imports": [
            "PyQt5.QtCore.QEasingCurve",
            "PyQt5.QtCore.QPropertyAnimation",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtGui.QTextCursor",
            "PyQt5.QtGui.QDesktopServices",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QMenu",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWebEngineWidgets.QWebEngineView",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.render.*",
            "anylabeling.views.labeling.chatbot.style.*",
            "anylabeling.views.labeling.chatbot.utils.*",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "ChatMessage",
                "methods": [
                    "__init__",
                    "_process_content",
                    "_create_content_label",
                    "set_action_buttons_enabled",
                    "update_width_constraint",
                    "resizeEvent",
                    "copy_content_to_clipboard",
                    "reset_copy_button",
                    "adjust_height_after_animation",
                    "apply_webview_height",
                    "enter_edit_mode",
                    "save_edit",
                    "exit_edit_mode",
                    "resend_message",
                    "adjust_height_during_edit",
                    "regenerate_response",
                    "confirm_delete_message",
                    "delete_message",
                    "enterEvent",
                    "leaveEvent",
                    "show_context_menu",
                    "handle_external_link"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setContextMenuPolicy",
                "connect",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QHBoxLayout",
                "QWidget",
                "setObjectName",
                "setStyleSheet",
                "get_bubble_style",
                "addStretch",
                "addWidget",
                "QFrame",
                "get_role_label_background_style",
                "QLabel",
                "QPixmap",
                "new_icon_path",
                "scaled",
                "setPixmap",
                "get_role_label_style",
                "addLayout",
                "QPushButton",
                "setIcon",
                "QIcon",
                "new_icon",
                "setFixedSize",
                "get_button_style",
                "copy_content_to_clipboard",
                "setVisible",
                "_process_content",
                "_create_content_label",
                "setSizePolicy",
                "setAlignment",
                "setMinimumHeight",
                "setLayout",
                "QTextEdit",
                "setPlainText",
                "get_edit_area_style",
                "setFrameShape",
                "setFrameShadow",
                "setWordWrapMode",
                "tr",
                "get_resend_button_style",
                "get_cancel_button_style",
                "get_save_button_style",
                "get_edit_button_wdiget_style",
                "width",
                "int",
                "hasattr",
                "setMaximumWidth",
                "adjust_height_after_animation",
                "adjust_height_during_edit",
                "updateGeometry",
                "setMaximumHeight",
                "QPropertyAnimation",
                "setDuration",
                "setStartValue",
                "height",
                "sizeHint",
                "top",
                "contentsMargins",
                "bottom",
                "spacing",
                "max",
                "setEndValue",
                "setEasingCurve",
                "start"
            ],
            "_process_content": [
                "len",
                "range"
            ],
            "_create_content_label": [
                "QLabel",
                "setWordWrap",
                "setMinimumWidth",
                "setTextFormat",
                "setStyleSheet",
                "get_content_label_style",
                "setTextInteractionFlags",
                "setSizePolicy",
                "font",
                "setFont",
                "setAlignment",
                "setMinimumHeight",
                "QWebEngineView",
                "connect",
                "adjust_height_after_animation",
                "page",
                "setHtml",
                "convert_markdown_to_html"
            ],
            "set_action_buttons_enabled": [
                "setEnabled"
            ],
            "update_width_constraint": [
                "parent",
                "width",
                "int",
                "hasattr",
                "setMaximumWidth",
                "adjust_height_after_animation",
                "updateGeometry"
            ],
            "resizeEvent": [
                "resizeEvent",
                "super",
                "update_width_constraint"
            ],
            "copy_content_to_clipboard": [
                "clipboard",
                "setText",
                "setIcon",
                "QIcon",
                "new_icon",
                "singleShot",
                "reset_copy_button"
            ],
            "reset_copy_button": [
                "setIcon",
                "QIcon",
                "new_icon",
                "setStyleSheet",
                "get_button_style"
            ],
            "adjust_height_after_animation": [
                "isinstance",
                "runJavaScript",
                "page",
                "heightForWidth",
                "width",
                "height",
                "sizeHint",
                "setMaximumHeight",
                "int",
                "updateGeometry",
                "processEvents"
            ],
            "apply_webview_height": [
                "isinstance",
                "height",
                "sizeHint",
                "setFixedHeight",
                "setMaximumHeight",
                "int",
                "updateGeometry",
                "processEvents"
            ],
            "enter_edit_mode": [
                "setVisible",
                "hasattr",
                "setPlainText",
                "setFocus",
                "moveCursor",
                "adjust_height_during_edit"
            ],
            "save_edit": [
                "strip",
                "toPlainText",
                "isinstance",
                "setText",
                "setHtml",
                "convert_markdown_to_html",
                "window",
                "range",
                "count",
                "itemAt",
                "widget",
                "append",
                "index",
                "hasattr",
                "len",
                "callable",
                "parent",
                "set_dirty",
                "exit_edit_mode"
            ],
            "exit_edit_mode": [
                "setVisible",
                "setPlainText",
                "adjust_height_after_animation"
            ],
            "resend_message": [
                "strip",
                "toPlainText",
                "window",
                "hasattr",
                "setVisible",
                "resubmit_edited_message",
                "setText",
                "exit_edit_mode"
            ],
            "adjust_height_during_edit": [
                "height",
                "size",
                "document",
                "sizeHint",
                "setMaximumHeight",
                "int",
                "updateGeometry",
                "processEvents"
            ],
            "regenerate_response": [
                "window",
                "hasattr",
                "regenerate_response"
            ],
            "confirm_delete_message": [
                "QMessageBox",
                "window",
                "setText",
                "tr",
                "setStandardButtons",
                "setDefaultButton",
                "setIcon",
                "exec_",
                "delete_message"
            ],
            "delete_message": [
                "window",
                "range",
                "count",
                "itemAt",
                "widget",
                "isinstance",
                "append",
                "index",
                "removeWidget",
                "hasattr",
                "len",
                "pop",
                "callable",
                "parent",
                "set_dirty",
                "setParent",
                "deleteLater"
            ],
            "enterEvent": [
                "setVisible",
                "enterEvent",
                "super"
            ],
            "leaveEvent": [
                "setVisible",
                "leaveEvent",
                "super"
            ],
            "show_context_menu": [
                "QMenu",
                "setStyleSheet",
                "get_menu_style",
                "addAction",
                "tr",
                "connect",
                "copy_content_to_clipboard",
                "addSeparator",
                "exec_",
                "mapToGlobal"
            ],
            "handle_external_link": [
                "toString",
                "startswith",
                "stop",
                "parent",
                "sender",
                "openUrl",
                "setHtml",
                "convert_markdown_to_html"
            ]
        }
    },
    "anylabeling/views/labeling/chatbot/style.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/style.py",
        "imports": [
            "typing.Dict",
            "typing.List",
            "typing.Tuple",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QGridLayout",
            "PyQt5.QtCore.Qt",
            "anylabeling.views.labeling.chatbot.config.*"
        ],
        "classes": [
            {
                "class_name": "CustomTooltip",
                "methods": [
                    "__init__",
                    "show_at"
                ]
            },
            {
                "class_name": "ChatbotDialogStyle",
                "methods": [
                    "get_menu_style",
                    "get_dialog_style",
                    "get_main_splitter_style",
                    "get_provider_button_style",
                    "get_left_widget_style",
                    "get_middle_widget_style",
                    "get_chat_container_style",
                    "get_chat_scroll_area_style",
                    "get_input_container_style",
                    "get_input_frame_style",
                    "get_message_input_style",
                    "get_send_button_style",
                    "get_image_preview_style",
                    "get_button_style",
                    "get_model_button_style",
                    "get_settings_label_style",
                    "get_help_btn_style",
                    "get_settings_edit_style",
                    "get_right_splitter_style",
                    "get_right_widget_style",
                    "get_temperature_label_style",
                    "get_tab_widget_style",
                    "get_slider_style",
                    "get_settings_tabs_style",
                    "get_spinbox_style",
                    "get_progress_dialog_style",
                    "get_option_dialog_style"
                ]
            },
            {
                "class_name": "ChatMessageStyle",
                "methods": [
                    "get_bubble_style",
                    "get_role_label_style",
                    "get_role_label_background_style",
                    "get_button_style",
                    "get_content_label_style",
                    "get_fade_in_text_style",
                    "get_animation_style",
                    "get_edit_area_style",
                    "get_edit_button_wdiget_style",
                    "get_resend_button_style",
                    "get_cancel_button_style",
                    "get_save_button_style"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setWindowFlags",
                "setAttribute",
                "QFrame",
                "setObjectName",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "addWidget",
                "QLabel",
                "setStyleSheet",
                "QGridLayout",
                "setHorizontalSpacing",
                "setVerticalSpacing",
                "enumerate",
                "setAlignment",
                "addLayout"
            ],
            "show_at": [
                "move",
                "adjustSize",
                "show"
            ],
            "get_menu_style": [],
            "get_dialog_style": [],
            "get_main_splitter_style": [],
            "get_provider_button_style": [],
            "get_left_widget_style": [],
            "get_middle_widget_style": [],
            "get_chat_container_style": [],
            "get_chat_scroll_area_style": [],
            "get_input_container_style": [],
            "get_input_frame_style": [],
            "get_message_input_style": [],
            "get_send_button_style": [],
            "get_image_preview_style": [],
            "get_button_style": [],
            "get_model_button_style": [],
            "get_settings_label_style": [],
            "get_help_btn_style": [],
            "get_settings_edit_style": [],
            "get_right_splitter_style": [],
            "get_right_widget_style": [],
            "get_temperature_label_style": [],
            "get_tab_widget_style": [],
            "get_slider_style": [],
            "get_settings_tabs_style": [],
            "get_spinbox_style": [],
            "get_progress_dialog_style": [],
            "get_option_dialog_style": [],
            "get_bubble_style": [],
            "get_role_label_style": [],
            "get_role_label_background_style": [],
            "get_content_label_style": [],
            "get_fade_in_text_style": [],
            "get_animation_style": [],
            "get_edit_area_style": [],
            "get_edit_button_wdiget_style": [],
            "get_resend_button_style": [],
            "get_cancel_button_style": [],
            "get_save_button_style": []
        }
    },
    "anylabeling/views/labeling/chatbot/animation.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/animation.py",
        "imports": [
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QPropertyAnimation",
            "PyQt5.QtCore.QEasingCurve",
            "PyQt5.QtCore.pyqtProperty",
            "PyQt5.QtGui.QPainter",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QBrush"
        ],
        "classes": [
            {
                "class_name": "PulsatingDot",
                "methods": [
                    "__init__",
                    "_toggle_size_animation",
                    "_toggle_color_animation",
                    "get_dot_size",
                    "set_dot_size",
                    "get_dot_color",
                    "set_dot_color",
                    "paintEvent",
                    "stop_animation"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "QColor",
                "setFixedSize",
                "QPropertyAnimation",
                "setDuration",
                "setStartValue",
                "setEndValue",
                "setEasingCurve",
                "connect",
                "start"
            ],
            "_toggle_size_animation": [
                "endValue",
                "startValue",
                "setStartValue",
                "setEndValue",
                "start"
            ],
            "_toggle_color_animation": [
                "endValue",
                "startValue",
                "setStartValue",
                "setEndValue",
                "start"
            ],
            "get_dot_size": [],
            "set_dot_size": [
                "update"
            ],
            "get_dot_color": [],
            "set_dot_color": [
                "QColor",
                "int",
                "update"
            ],
            "paintEvent": [
                "QPainter",
                "setRenderHint",
                "width",
                "height",
                "setPen",
                "setBrush",
                "QBrush",
                "drawEllipse",
                "int"
            ],
            "stop_animation": [
                "hasattr",
                "stop"
            ]
        }
    },
    "anylabeling/views/labeling/vqa/utils.py": {
        "file_name": "/anylabeling/views/labeling/vqa/utils.py",
        "imports": [
            "base64",
            "json",
            "os",
            "re",
            "requests",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "anylabeling.views.labeling.chatbot.config.MODELS_CONFIG_PATH",
            "anylabeling.views.labeling.chatbot.config.PROVIDERS_CONFIG_PATH",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.vqa.config.REQUEST_TIMEOUT"
        ],
        "classes": [
            {
                "class_name": "AIWorkerThread",
                "methods": [
                    "__init__",
                    "run",
                    "process_special_references",
                    "cancel",
                    "load_models_config",
                    "load_providers_config",
                    "call_openai_api"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super"
            ],
            "run": [
                "load_models_config",
                "load_providers_config",
                "emit",
                "get",
                "process_special_references",
                "call_openai_api",
                "str"
            ],
            "process_special_references": [
                "replace",
                "exists",
                "Exception",
                "strip",
                "sub"
            ],
            "cancel": [],
            "load_models_config": [
                "exists",
                "open",
                "load",
                "error"
            ],
            "load_providers_config": [
                "exists",
                "open",
                "load",
                "error"
            ],
            "call_openai_api": [
                "append",
                "hasattr",
                "open",
                "decode",
                "b64encode",
                "read",
                "endswith",
                "post",
                "raise_for_status",
                "json",
                "strip"
            ],
            "apply_option_mapping": [
                "isinstance",
                "get"
            ],
            "value_contains_deleted_options": [
                "isinstance",
                "any"
            ],
            "get_default_value": [],
            "get_label_file_path": [
                "splitext",
                "basename",
                "join",
                "dirname"
            ],
            "get_real_modified_options": [
                "len",
                "range"
            ]
        }
    },
    "anylabeling/views/labeling/vqa/__init__.py": {
        "file_name": "/anylabeling/views/labeling/vqa/__init__.py",
        "imports": [
            "config.*",
            "dialogs.*",
            "layout.*",
            "style.*",
            "utils.*",
            "widgets.*"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/vqa/dialogs.py": {
        "file_name": "/anylabeling/views/labeling/vqa/dialogs.py",
        "imports": [
            "json",
            "os",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QWheelEvent",
            "PyQt5.QtGui.QTextCharFormat",
            "PyQt5.QtGui.QTextCursor",
            "PyQt5.QtWidgets.QAbstractItemView",
            "PyQt5.QtWidgets.QCheckBox",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QHeaderView",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QGraphicsDropShadowEffect",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "anylabeling.views.labeling.vqa.config.DEFAULT_COMPONENT_WINDOW_SIZE",
            "anylabeling.views.labeling.vqa.config.DEFAULT_TEMPLATES",
            "anylabeling.views.labeling.vqa.config.PROMPTS_CONFIG_PATH",
            "anylabeling.views.labeling.vqa.config.SUPPORTED_WIDGETS",
            "anylabeling.views.labeling.vqa.style.get_content_input_style",
            "anylabeling.views.labeling.vqa.style.get_component_dialog_combobox_style",
            "anylabeling.views.labeling.vqa.style.get_dialog_button_style",
            "anylabeling.views.labeling.vqa.style.get_filename_label_style",
            "anylabeling.views.labeling.vqa.style.get_name_input_style",
            "anylabeling.views.labeling.vqa.style.get_message_label_style",
            "anylabeling.views.labeling.vqa.style.get_page_input_style",
            "anylabeling.views.labeling.vqa.style.get_prompt_input_style",
            "anylabeling.views.labeling.vqa.style.get_status_label_style",
            "anylabeling.views.labeling.vqa.style.get_table_style",
            "anylabeling.views.labeling.vqa.style.get_title_label_style",
            "anylabeling.views.labeling.vqa.style.get_ui_style"
        ],
        "classes": [
            {
                "class_name": "QComboBox",
                "methods": [
                    "wheelEvent"
                ]
            },
            {
                "class_name": "PromptTemplateDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "get_default_templates",
                    "load_templates",
                    "populate_table",
                    "on_checkbox_toggled",
                    "add_template",
                    "delete_template",
                    "save_user_template",
                    "remove_user_template",
                    "get_selected_template",
                    "on_item_double_clicked",
                    "update_user_template"
                ]
            },
            {
                "class_name": "AddTemplateDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "prefill_data",
                    "validate_and_accept",
                    "get_template_data"
                ]
            },
            {
                "class_name": "AILoadingDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "setup_animation",
                    "update_dots",
                    "center_on_parent",
                    "exec_",
                    "closeEvent",
                    "reject"
                ]
            },
            {
                "class_name": "AIPromptDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "open_template_library",
                    "center_on_parent",
                    "get_prompt",
                    "exec_",
                    "on_text_changed"
                ]
            },
            {
                "class_name": "ComponentDialog",
                "methods": [
                    "__init__",
                    "on_type_changed",
                    "validate_and_accept",
                    "get_component_data"
                ]
            },
            {
                "class_name": "DeleteComponentDialog",
                "methods": [
                    "__init__",
                    "populate_table",
                    "on_select_all_changed",
                    "on_item_selection_changed",
                    "get_selected_count",
                    "update_ui_state",
                    "get_selected_indices",
                    "get_selected_index"
                ]
            },
            {
                "class_name": "ExportLabelsDialog",
                "methods": [
                    "__init__",
                    "populate_table",
                    "on_select_all_changed",
                    "on_item_selection_changed",
                    "get_selected_count",
                    "update_ui_state",
                    "get_export_config"
                ]
            }
        ],
        "functions": {
            "wheelEvent": [],
            "__init__": [
                "__init__",
                "super",
                "setWindowTitle",
                "tr",
                "setMinimumSize",
                "setup_ui",
                "load_templates",
                "setModal",
                "setFixedSize",
                "prefill_data",
                "setup_animation",
                "setMinimumWidth",
                "QVBoxLayout",
                "QLabel",
                "setStyleSheet",
                "get_filename_label_style",
                "QLineEdit",
                "get_page_input_style",
                "setText",
                "addWidget",
                "QComboBox",
                "addItems",
                "setCurrentText",
                "setEnabled",
                "QTextEdit",
                "setFixedHeight",
                "join",
                "QHBoxLayout",
                "addStretch",
                "QPushButton",
                "get_dialog_button_style",
                "connect",
                "addLayout",
                "on_type_changed",
                "max",
                "len",
                "min",
                "QCheckBox",
                "setToolTip",
                "QTableWidget",
                "setRowCount",
                "setColumnCount",
                "setHorizontalHeaderLabels",
                "setSelectionBehavior",
                "setSelectionMode",
                "setEditTriggers",
                "setAlternatingRowColors",
                "setVisible",
                "verticalHeader",
                "setFocusPolicy",
                "setDefaultSectionSize",
                "setMinimumHeight",
                "get_component_dialog_combobox_style",
                "horizontalHeader",
                "setSectionResizeMode",
                "setColumnWidth",
                "populate_table",
                "resizeRowsToContents",
                "get_status_label_style",
                "setSpacing",
                "setMaximumHeight"
            ],
            "setup_ui": [
                "setStyleSheet",
                "get_ui_style",
                "QVBoxLayout",
                "setContentsMargins",
                "setSpacing",
                "QTableWidget",
                "setColumnCount",
                "setHorizontalHeaderLabels",
                "tr",
                "get_table_style",
                "setEditTriggers",
                "setSelectionMode",
                "setAlternatingRowColors",
                "setShowGrid",
                "setVisible",
                "verticalHeader",
                "connect",
                "horizontalHeader",
                "setSectionResizeMode",
                "resizeSection",
                "addWidget",
                "QHBoxLayout",
                "QPushButton",
                "get_dialog_button_style",
                "addStretch",
                "addLayout",
                "QLabel",
                "get_filename_label_style",
                "QLineEdit",
                "get_name_input_style",
                "QTextEdit",
                "get_content_input_style",
                "setMinimumHeight",
                "setAlignment",
                "get_title_label_style",
                "get_message_label_style",
                "setCursor",
                "setWindowFlags",
                "QGraphicsDropShadowEffect",
                "setBlurRadius",
                "setColor",
                "QColor",
                "setOffset",
                "setGraphicsEffect",
                "setPlaceholderText",
                "get_prompt_input_style",
                "setAcceptRichText",
                "setMaximumHeight",
                "setVerticalScrollBarPolicy",
                "setAttribute",
                "windowFlags"
            ],
            "get_default_templates": [
                "items"
            ],
            "load_templates": [
                "get_default_templates",
                "exists",
                "open",
                "load",
                "print",
                "populate_table"
            ],
            "populate_table": [
                "setRowCount",
                "len",
                "range",
                "setRowHeight",
                "enumerate",
                "QCheckBox",
                "connect",
                "on_checkbox_toggled",
                "QWidget",
                "QVBoxLayout",
                "addWidget",
                "setAlignment",
                "setContentsMargins",
                "setSpacing",
                "setCellWidget",
                "QTableWidgetItem",
                "setForeground",
                "QColor",
                "setToolTip",
                "setTextAlignment",
                "setItem",
                "QPushButton",
                "tr",
                "setFixedSize",
                "setEnabled",
                "setStyleSheet",
                "get_dialog_button_style",
                "delete_template",
                "get",
                "setData",
                "QHBoxLayout",
                "setFlags",
                "flags",
                "QLineEdit",
                "setText",
                "get_page_input_style",
                "setChecked",
                "update_ui_state"
            ],
            "on_checkbox_toggled": [
                "range",
                "rowCount",
                "cellWidget",
                "findChild",
                "blockSignals",
                "setChecked",
                "item",
                "text",
                "toolTip"
            ],
            "add_template": [
                "AddTemplateDialog",
                "exec_",
                "get_template_data",
                "save_user_template",
                "load_templates"
            ],
            "delete_template": [
                "item",
                "question",
                "tr",
                "remove_user_template",
                "text",
                "load_templates"
            ],
            "save_user_template": [
                "exists",
                "open",
                "load",
                "append",
                "makedirs",
                "dirname",
                "dump"
            ],
            "remove_user_template": [
                "exists",
                "open",
                "load",
                "dump",
                "print"
            ],
            "get_selected_template": [],
            "on_item_double_clicked": [
                "column",
                "row",
                "item",
                "color",
                "foreground",
                "QColor",
                "text",
                "toolTip",
                "AddTemplateDialog",
                "exec_",
                "get_template_data",
                "update_user_template",
                "load_templates"
            ],
            "update_user_template": [
                "exists",
                "open",
                "load",
                "dump",
                "print"
            ],
            "prefill_data": [
                "setText",
                "setPlainText"
            ],
            "validate_and_accept": [
                "strip",
                "text",
                "toPlainText",
                "warning",
                "tr",
                "accept",
                "hasattr",
                "check_duplicate_title",
                "currentText",
                "split",
                "len",
                "set"
            ],
            "get_template_data": [
                "strip",
                "text",
                "toPlainText"
            ],
            "setup_animation": [
                "QTimer",
                "connect",
                "start"
            ],
            "update_dots": [
                "tr",
                "setText"
            ],
            "center_on_parent": [
                "mapToGlobal",
                "center",
                "rect",
                "move",
                "x",
                "width",
                "y",
                "height"
            ],
            "exec_": [
                "center_on_parent",
                "exec_",
                "super",
                "adjustSize"
            ],
            "closeEvent": [
                "stop",
                "closeEvent",
                "super"
            ],
            "reject": [
                "stop",
                "reject",
                "super"
            ],
            "open_template_library": [
                "PromptTemplateDialog",
                "exec_",
                "get_selected_template",
                "setPlainText"
            ],
            "get_prompt": [
                "strip",
                "toPlainText"
            ],
            "on_text_changed": [
                "textCursor",
                "position",
                "document",
                "toPlainText",
                "blockSignals",
                "select",
                "QTextCharFormat",
                "setCharFormat",
                "find",
                "setBackground",
                "QColor",
                "setForeground",
                "setPosition",
                "len",
                "setTextCursor"
            ],
            "on_type_changed": [
                "currentText",
                "setEnabled"
            ],
            "get_component_data": [
                "toPlainText",
                "split",
                "text",
                "currentText"
            ],
            "on_select_all_changed": [
                "range",
                "rowCount",
                "cellWidget",
                "findChild",
                "blockSignals",
                "setChecked",
                "update_ui_state"
            ],
            "on_item_selection_changed": [
                "get_selected_count",
                "rowCount",
                "blockSignals",
                "setCheckState",
                "update_ui_state"
            ],
            "get_selected_count": [
                "range",
                "rowCount",
                "cellWidget",
                "findChild",
                "isChecked"
            ],
            "update_ui_state": [
                "get_selected_count",
                "setEnabled",
                "tr",
                "setText"
            ],
            "get_selected_indices": [
                "range",
                "rowCount",
                "cellWidget",
                "findChild",
                "isChecked",
                "append",
                "sorted"
            ],
            "get_selected_index": [
                "get_selected_indices"
            ],
            "get_export_config": [
                "range",
                "rowCount",
                "cellWidget",
                "findChild",
                "isChecked",
                "text",
                "item",
                "strip"
            ]
        }
    },
    "anylabeling/views/labeling/vqa/widgets.py": {
        "file_name": "/anylabeling/views/labeling/vqa/widgets.py",
        "imports": [
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QTextEdit"
        ],
        "classes": [
            {
                "class_name": "AutoResizeTextEdit",
                "methods": [
                    "__init__",
                    "adjust_height"
                ]
            },
            {
                "class_name": "PageInputLineEdit",
                "methods": [
                    "__init__",
                    "keyPressEvent"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setFixedHeight",
                "setHorizontalScrollBarPolicy",
                "setVerticalScrollBarPolicy",
                "setLineWrapMode",
                "connect"
            ],
            "adjust_height": [
                "document",
                "height",
                "size",
                "int",
                "max",
                "setVerticalScrollBarPolicy",
                "setFixedHeight"
            ],
            "keyPressEvent": [
                "key",
                "strip",
                "text",
                "restore_current_page_number",
                "switch_image",
                "keyPressEvent",
                "super"
            ],
            "create_truncated_widget": [
                "widget_class",
                "fontMetrics",
                "horizontalAdvance",
                "elidedText",
                "setText",
                "setToolTip",
                "setMaximumWidth"
            ]
        }
    },
    "anylabeling/views/labeling/vqa/config.py": {
        "file_name": "/anylabeling/views/labeling/vqa/config.py",
        "imports": [
            "os"
        ],
        "classes": [],
        "functions": {}
    },
    "anylabeling/views/labeling/vqa/layout.py": {
        "file_name": "/anylabeling/views/labeling/vqa/layout.py",
        "imports": [
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.QRect",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtWidgets.QLayout",
            "PyQt5.QtWidgets.QSizePolicy"
        ],
        "classes": [
            {
                "class_name": "FlowLayout",
                "methods": [
                    "__init__",
                    "__del__",
                    "addItem",
                    "count",
                    "itemAt",
                    "takeAt",
                    "expandingDirections",
                    "hasHeightForWidth",
                    "heightForWidth",
                    "setGeometry",
                    "sizeHint",
                    "minimumSize",
                    "doLayout",
                    "clear"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "__init__",
                "super",
                "setContentsMargins",
                "setSpacing"
            ],
            "__del__": [
                "takeAt"
            ],
            "addItem": [
                "append"
            ],
            "count": [
                "len"
            ],
            "itemAt": [
                "len"
            ],
            "takeAt": [
                "len",
                "pop"
            ],
            "expandingDirections": [
                "Orientations",
                "Orientation"
            ],
            "hasHeightForWidth": [],
            "heightForWidth": [
                "doLayout",
                "QRect"
            ],
            "setGeometry": [
                "setGeometry",
                "super",
                "doLayout"
            ],
            "sizeHint": [
                "minimumSize"
            ],
            "minimumSize": [
                "QSize",
                "expandedTo",
                "minimumSize"
            ],
            "doLayout": [
                "x",
                "y",
                "spacing",
                "widget",
                "layoutSpacing",
                "style",
                "width",
                "sizeHint",
                "right",
                "setGeometry",
                "QRect",
                "QPoint",
                "max",
                "height"
            ],
            "clear": [
                "takeAt",
                "widget",
                "deleteLater"
            ]
        }
    },
    "anylabeling/views/labeling/vqa/style.py": {
        "file_name": "/anylabeling/views/labeling/vqa/style.py",
        "imports": [
            "typing.Dict",
            "anylabeling.views.labeling.vqa.config.BORDER_RADIUS",
            "anylabeling.views.labeling.vqa.config.BUTTON_COLORS",
            "anylabeling.views.labeling.vqa.config.FONT_SIZE_SMALL",
            "anylabeling.views.labeling.vqa.config.FONT_SIZE_NORMAL",
            "anylabeling.views.labeling.vqa.config.FONT_SIZE_LARGE",
            "anylabeling.views.labeling.vqa.config.THEME",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [],
        "functions": {
            "get_filename_label_style": [],
            "get_image_label_style": [],
            "get_image_container_style": [],
            "get_page_label_style": [],
            "get_message_label_style": [],
            "get_title_label_style": [],
            "get_status_label_style": [],
            "get_ui_style": [],
            "get_main_splitter_style": [],
            "get_component_dialog_combobox_style": [],
            "get_content_input_style": [],
            "get_name_input_style": [],
            "get_page_input_style": [],
            "get_prompt_input_style": [],
            "get_table_style": [
                "new_icon_path"
            ],
            "get_button_style": [],
            "get_dialog_button_style": [
                "get",
                "replace"
            ]
        }
    },
    "tools/label_drawer.py": {
        "file_name": "/tools/label_drawer.py",
        "imports": [
            "os",
            "os.path",
            "json",
            "argparse",
            "sys",
            "subprocess",
            "cv2",
            "natsort",
            "numpy",
            "tqdm.tqdm",
            "supervision",
            "supervision"
        ],
        "classes": [],
        "functions": {
            "create_video_from_images": [
                "listdir",
                "splitext",
                "natsorted",
                "ValueError",
                "join",
                "imread",
                "VideoWriter_fourcc",
                "VideoWriter",
                "tqdm",
                "write",
                "release",
                "print"
            ],
            "draw_polygon_from_custom": [
                "makedirs",
                "listdir",
                "natsorted",
                "enumerate",
                "tqdm",
                "endswith",
                "join",
                "splitext",
                "print",
                "imread",
                "exists",
                "imwrite",
                "open",
                "load",
                "index",
                "append",
                "array",
                "polygon_to_xyxy",
                "polygon_to_mask",
                "stack",
                "Detections",
                "copy",
                "BoxAnnotator",
                "annotate",
                "LabelAnnotator",
                "MaskAnnotator"
            ],
            "draw_rectangle_from_custom": [
                "makedirs",
                "listdir",
                "natsorted",
                "enumerate",
                "tqdm",
                "endswith",
                "join",
                "splitext",
                "print",
                "imread",
                "exists",
                "imwrite",
                "open",
                "load",
                "index",
                "append",
                "len",
                "array",
                "min",
                "max",
                "stack",
                "Detections",
                "copy",
                "BoxAnnotator",
                "annotate",
                "LabelAnnotator"
            ],
            "draw_rotation_from_custom": [
                "makedirs",
                "listdir",
                "natsorted",
                "enumerate",
                "tqdm",
                "endswith",
                "join",
                "splitext",
                "print",
                "imread",
                "exists",
                "imwrite",
                "open",
                "load",
                "index",
                "append",
                "polygon_to_xyxy",
                "array",
                "stack",
                "Detections",
                "copy",
                "OrientedBoxAnnotator",
                "annotate",
                "LabelAnnotator"
            ],
            "main": [
                "ArgumentParser",
                "add_argument",
                "parse_args",
                "len",
                "endswith",
                "open",
                "strip",
                "print",
                "create_video_from_images",
                "draw_polygon_from_custom",
                "draw_rectangle_from_custom",
                "draw_rotation_from_custom"
            ]
        }
    },
    "tools/label_converter.py": {
        "file_name": "/tools/label_converter.py",
        "imports": [
            "argparse",
            "json",
            "os",
            "os.path",
            "cv2",
            "time",
            "math",
            "PIL.Image",
            "PIL.ImageDraw",
            "tqdm.tqdm",
            "datetime.date",
            "numpy",
            "xml.dom.minidom",
            "xml.etree.ElementTree",
            "sys",
            "anylabeling.app_info.__version__",
            "pycocotools.mask",
            "pycocotools.mask",
            "pycocotools.mask",
            "pycocotools.mask"
        ],
        "classes": [
            {
                "class_name": "JsonEncoder",
                "methods": [
                    "default"
                ]
            },
            {
                "class_name": "BaseLabelConverter",
                "methods": [
                    "__init__",
                    "reset",
                    "get_image_size",
                    "get_minimal_enclosing_rectangle",
                    "get_poly_area",
                    "get_coco_data",
                    "ensure_output_path"
                ]
            },
            {
                "class_name": "RectLabelConverter",
                "methods": [
                    "custom_to_voc2017",
                    "voc2017_to_custom",
                    "custom_to_yolov5",
                    "yolov5_to_custom",
                    "custom_to_coco",
                    "coco_to_custom"
                ]
            },
            {
                "class_name": "PolyLabelConvert",
                "methods": [
                    "mask2box",
                    "polygons_to_mask",
                    "custom_to_coco",
                    "custom_to_yolov5",
                    "yolov5_to_custom",
                    "coco_to_custom"
                ]
            },
            {
                "class_name": "RotateLabelConverter",
                "methods": [
                    "custom_to_dota",
                    "dota_to_custom",
                    "dota_to_dcoco",
                    "dcoco_to_dota",
                    "dxml_to_dota",
                    "rotatePoint",
                    "rbndbox_to_dota",
                    "hbndbox_to_dota"
                ]
            },
            {
                "class_name": "MOTSConverter",
                "methods": [
                    "custom_to_gt",
                    "polygon_to_rle",
                    "rle_to_polygon",
                    "draw_rle_to_image"
                ]
            }
        ],
        "functions": {
            "default": [
                "isinstance",
                "item",
                "tolist",
                "default",
                "super"
            ],
            "__init__": [
                "open",
                "splitlines",
                "read",
                "print"
            ],
            "reset": [
                "dict"
            ],
            "get_image_size": [
                "open"
            ],
            "get_minimal_enclosing_rectangle": [
                "len",
                "range",
                "min",
                "max"
            ],
            "get_poly_area": [
                "len",
                "range",
                "abs",
                "sum"
            ],
            "get_coco_data": [
                "str",
                "today"
            ],
            "ensure_output_path": [
                "isfile",
                "endswith",
                "lower",
                "ValueError",
                "exists",
                "makedirs"
            ],
            "custom_to_voc2017": [
                "open",
                "load",
                "Element",
                "SubElement",
                "dirname",
                "basename",
                "str",
                "get",
                "int",
                "tostring",
                "parseString",
                "toprettyxml",
                "write"
            ],
            "voc2017_to_custom": [
                "reset",
                "parse",
                "getroot",
                "find",
                "int",
                "findall",
                "str",
                "float",
                "bool",
                "append",
                "open",
                "dump"
            ],
            "custom_to_yolov5": [
                "open",
                "load",
                "index",
                "abs",
                "write",
                "array",
                "join",
                "str",
                "tolist"
            ],
            "yolov5_to_custom": [
                "reset",
                "open",
                "readlines",
                "get_image_size",
                "split",
                "strip",
                "int",
                "float",
                "append",
                "basename",
                "dump",
                "array",
                "zip",
                "float64",
                "tolist"
            ],
            "custom_to_coco": [
                "DeprecationWarning",
                "get_coco_data",
                "enumerate",
                "append",
                "listdir",
                "tqdm",
                "endswith",
                "join",
                "open",
                "load",
                "splitext",
                "basename",
                "get",
                "index",
                "min",
                "max",
                "int",
                "dump",
                "polygons_to_mask",
                "mask2box",
                "list",
                "flatten",
                "asarray"
            ],
            "coco_to_custom": [
                "DeprecationWarning",
                "listdir",
                "open",
                "load",
                "append",
                "bool",
                "int",
                "str",
                "get",
                "tqdm",
                "values",
                "reset",
                "join",
                "splitext",
                "dump",
                "range",
                "len",
                "float"
            ],
            "mask2box": [
                "argwhere",
                "min",
                "max"
            ],
            "polygons_to_mask": [
                "zeros",
                "fromarray",
                "list",
                "map",
                "polygon",
                "Draw",
                "array"
            ],
            "custom_to_dota": [
                "open",
                "load",
                "get",
                "write",
                "int"
            ],
            "dota_to_custom": [
                "reset",
                "open",
                "readlines",
                "get_image_size",
                "split",
                "strip",
                "float",
                "bool",
                "int",
                "append",
                "basename",
                "dump"
            ],
            "dota_to_dcoco": [
                "ensure_output_path",
                "get_coco_data",
                "enumerate",
                "append",
                "listdir",
                "tqdm",
                "join",
                "splitext",
                "get_image_size",
                "open",
                "readlines",
                "split",
                "strip",
                "list",
                "map",
                "get_poly_area",
                "get_minimal_enclosing_rectangle",
                "index",
                "isdir",
                "dump"
            ],
            "dcoco_to_dota": [
                "ensure_output_path",
                "open",
                "load",
                "get",
                "append",
                "items",
                "basename",
                "join",
                "write",
                "int"
            ],
            "dxml_to_dota": [
                "parse",
                "getroot",
                "open",
                "findall",
                "find",
                "hbndbox_to_dota",
                "rbndbox_to_dota",
                "write"
            ],
            "rotatePoint": [
                "cos",
                "sin"
            ],
            "rbndbox_to_dota": [
                "float",
                "find",
                "rotatePoint"
            ],
            "hbndbox_to_dota": [
                "int",
                "find"
            ],
            "custom_to_gt": [
                "open",
                "readlines",
                "split",
                "strip",
                "int",
                "flatten",
                "array",
                "eval",
                "polygon_to_rle",
                "append",
                "dirname",
                "makedirs",
                "write",
                "join",
                "map"
            ],
            "polygon_to_rle": [
                "frPyObjects",
                "merge"
            ],
            "rle_to_polygon": [
                "decode",
                "findContours",
                "astype",
                "tolist",
                "flatten"
            ],
            "draw_rle_to_image": [
                "imread",
                "decode",
                "astype",
                "bitwise_and",
                "findContours",
                "drawContours",
                "dirname",
                "imwrite",
                "join"
            ],
            "main": [
                "ArgumentParser",
                "add_argument",
                "parse_args",
                "print",
                "time",
                "RectLabelConverter",
                "PolyLabelConvert",
                "RotateLabelConverter",
                "MOTSConverter",
                "listdir",
                "makedirs",
                "tqdm",
                "endswith",
                "join",
                "splitext",
                "custom_to_voc2017",
                "voc2017_to_custom",
                "custom_to_yolov5",
                "rsplit",
                "yolov5_to_custom",
                "custom_to_coco",
                "coco_to_custom",
                "custom_to_dota",
                "dota_to_custom",
                "dota_to_dcoco",
                "dcoco_to_dota",
                "dxml_to_dota",
                "custom_to_gt"
            ]
        }
    },
    "tools/onnx_exporter/export_rfdetr_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_rfdetr_onnx.py",
        "imports": [
            "cv2",
            "os",
            "random",
            "numpy",
            "onnxruntime",
            "PIL.Image"
        ],
        "classes": [],
        "functions": {
            "sigmoid": [
                "exp",
                "logaddexp"
            ],
            "box_cxcywh_to_xyxy": [
                "maximum",
                "stack"
            ],
            "preprocess": [
                "convert",
                "resize",
                "array",
                "astype",
                "transpose",
                "reshape",
                "expand_dims",
                "ascontiguousarray"
            ],
            "postprocess": [
                "sigmoid",
                "reshape",
                "argpartition",
                "take_along_axis",
                "argsort",
                "box_cxcywh_to_xyxy",
                "expand_dims",
                "tile",
                "array"
            ],
            "main": [
                "InferenceSession",
                "open",
                "preprocess",
                "run",
                "postprocess",
                "imread",
                "zip",
                "astype",
                "rectangle",
                "putText",
                "imshow",
                "waitKey",
                "exists",
                "dirname",
                "makedirs",
                "imwrite",
                "print"
            ]
        }
    },
    "tools/onnx_exporter/export_internimage_model_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_internimage_model_onnx.py",
        "imports": [
            "os",
            "os.path",
            "typing.Any",
            "cv2",
            "random",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "Model",
                "methods": [
                    "__init__",
                    "__call__",
                    "preprocess",
                    "softmax",
                    "postprocess",
                    "predict"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "SessionOptions",
                "int",
                "lower",
                "InferenceSession",
                "__init__",
                "super",
                "len",
                "get",
                "get_input_shape",
                "randint",
                "range"
            ],
            "get_ort_inference": [
                "get_input_name",
                "run",
                "squeeze"
            ],
            "get_input_name": [
                "get_inputs"
            ],
            "get_input_shape": [
                "get_inputs"
            ],
            "get_output_name": [
                "get_outputs"
            ],
            "__call__": [
                "predict"
            ],
            "preprocess": [
                "resize",
                "transpose",
                "array",
                "astype",
                "zeros",
                "range",
                "reshape"
            ],
            "softmax": [
                "reshape",
                "exp",
                "max",
                "sum"
            ],
            "postprocess": [
                "tolist",
                "softmax",
                "array",
                "argmax",
                "str"
            ],
            "predict": [
                "preprocess",
                "get_ort_inference",
                "postprocess"
            ]
        }
    },
    "tools/onnx_exporter/export_u_rtdetr_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_u_rtdetr_onnx.py",
        "imports": [
            "os",
            "cv2",
            "random",
            "numpy",
            "onnxruntime"
        ],
        "classes": [],
        "functions": {
            "read_labels": [
                "open",
                "append",
                "strip"
            ],
            "preprocess": [
                "resize",
                "cvtColor",
                "astype",
                "transpose",
                "expand_dims",
                "ascontiguousarray"
            ],
            "bbox_cxcywh_to_xyxy": [
                "append"
            ],
            "is_normalized": [],
            "normalize_scores": [
                "range",
                "len",
                "exp"
            ],
            "rescale_boxes": [
                "array",
                "floor",
                "clip",
                "ceil",
                "range",
                "len",
                "append"
            ],
            "draw_boxes": [
                "enumerate",
                "zip",
                "map",
                "rectangle",
                "getTextSize",
                "putText"
            ],
            "process_rtdetr": [
                "preprocess",
                "run",
                "len",
                "range",
                "append",
                "array",
                "bbox_cxcywh_to_xyxy",
                "is_normalized",
                "normalize_scores",
                "max",
                "argmax",
                "rescale_boxes"
            ],
            "process_image": [
                "InferenceSession",
                "get_inputs",
                "imread",
                "ValueError",
                "process_rtdetr",
                "draw_boxes",
                "copy",
                "makedirs",
                "dirname",
                "imwrite",
                "print"
            ],
            "process_video": [
                "InferenceSession",
                "get_inputs",
                "VideoCapture",
                "isOpened",
                "ValueError",
                "get",
                "int",
                "makedirs",
                "dirname",
                "VideoWriter_fourcc",
                "VideoWriter",
                "read",
                "getTickCount",
                "process_rtdetr",
                "draw_boxes",
                "copy",
                "getTickFrequency",
                "putText",
                "write",
                "imshow",
                "waitKey",
                "ord",
                "release",
                "destroyAllWindows"
            ],
            "main": [
                "process_image",
                "process_video",
                "print"
            ]
        }
    },
    "tools/onnx_exporter/export_pulc_attribute_model_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_pulc_attribute_model_onnx.py",
        "imports": [
            "argparse",
            "os",
            "cv2",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "PULC_Attribute",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "SessionOptions",
                "int",
                "lower",
                "InferenceSession",
                "ValueError",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "get_ort_inference": [
                "get_input_name",
                "run",
                "squeeze"
            ],
            "get_input_name": [
                "get_inputs"
            ],
            "get_input_shape": [
                "get_inputs"
            ],
            "get_output_name": [
                "get_outputs"
            ],
            "preprocess": [
                "resize",
                "astype",
                "reshape",
                "array",
                "float32",
                "transpose",
                "expand_dims"
            ],
            "postprocess": [
                "tolist",
                "items",
                "len",
                "argmax"
            ],
            "predict_shapes": [
                "preprocess",
                "get_ort_inference",
                "postprocess"
            ],
            "unload": [],
            "main": [
                "ArgumentParser",
                "add_argument",
                "parse_args",
                "PULC_Attribute",
                "imread",
                "predict_shapes",
                "print",
                "items"
            ]
        }
    },
    "tools/onnx_exporter/export_geco_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_geco_onnx.py",
        "imports": [
            "argparse",
            "os",
            "os.path",
            "cv2",
            "time",
            "shutil",
            "numpy",
            "tempfile.mkdtemp",
            "types.MethodType",
            "collections.OrderedDict",
            "onnx",
            "onnxruntime",
            "onnx.external_data_helper.convert_model_to_external_data",
            "onnxruntime.quantization.QuantType",
            "onnxruntime.quantization.quantize.quantize_dynamic",
            "torch",
            "models.geco_infer.GeCo",
            "utils.box_ops.boxes_with_scores"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "GeCo",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "update",
                "SessionOptions",
                "int",
                "lower",
                "InferenceSession",
                "isfile",
                "FileNotFoundError",
                "print",
                "OnnxBaseModel"
            ],
            "get_ort_inference": [
                "get_input_name",
                "run",
                "squeeze"
            ],
            "get_input_name": [
                "get_inputs"
            ],
            "get_input_shape": [
                "get_inputs"
            ],
            "get_output_name": [
                "get_outputs"
            ],
            "preprocess": [
                "min",
                "int",
                "resize",
                "copyMakeBorder",
                "astype",
                "transpose"
            ],
            "postprocess": [
                "max",
                "copy",
                "NMSBoxes",
                "tolist",
                "clip",
                "array"
            ],
            "predict_shapes": [
                "preprocess",
                "time",
                "get_ort_inference",
                "array",
                "astype",
                "print",
                "format",
                "postprocess",
                "append"
            ],
            "unload": [],
            "export_onnx": [
                "mkdtemp",
                "join",
                "no_grad",
                "export",
                "randn",
                "load",
                "convert_model_to_external_data",
                "replace",
                "basename",
                "save",
                "rmtree",
                "tuple",
                "map",
                "split",
                "splitext",
                "print",
                "quantize_dynamic",
                "MethodType",
                "values",
                "list",
                "keys"
            ],
            "decoder_forward": [
                "create_prototypes",
                "expand",
                "adapt_features",
                "get_dense_pe",
                "permute",
                "view",
                "class_embed",
                "sigmoid",
                "bbox_embed",
                "boxes_with_scores"
            ]
        }
    },
    "tools/onnx_exporter/export_yolov8_obb_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_yolov8_obb_onnx.py",
        "imports": [
            "os",
            "cv2",
            "time",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "Colors",
                "methods": [
                    "__init__",
                    "__call__",
                    "hex2rgb"
                ]
            },
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "YOLOv8_OBB",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes"
                ]
            }
        ],
        "functions": {
            "clip_boxes": [
                "clip"
            ],
            "scale_boxes": [
                "min",
                "round",
                "clip_boxes"
            ],
            "letterbox": [
                "isinstance",
                "min",
                "int",
                "round",
                "mod",
                "resize",
                "copyMakeBorder"
            ],
            "box_area": [],
            "box_iou": [
                "box_area",
                "maximum",
                "minimum"
            ],
            "numpy_nms": [
                "argsort",
                "append",
                "box_iou",
                "array"
            ],
            "numpy_nms_rotated": [
                "len",
                "empty",
                "argsort",
                "batch_probiou",
                "triu",
                "nonzero",
                "max"
            ],
            "batch_probiou": [
                "split",
                "squeeze",
                "_get_covariance_matrix",
                "power",
                "log",
                "sqrt",
                "clip",
                "exp"
            ],
            "_get_covariance_matrix": [
                "concatenate",
                "power",
                "split",
                "cos",
                "sin"
            ],
            "non_max_suppression_v8": [
                "ValueError",
                "isinstance",
                "amax",
                "transpose",
                "zeros",
                "enumerate",
                "len",
                "arange",
                "astype",
                "concatenate",
                "where",
                "max",
                "argmax",
                "flatten",
                "any",
                "array",
                "argsort",
                "numpy_nms_rotated"
            ],
            "xywhr2xyxyxyxy": [
                "range",
                "cos",
                "sin",
                "concatenate",
                "stack"
            ],
            "box_label": [
                "max",
                "round",
                "sum",
                "int",
                "polylines",
                "asarray",
                "rectangle",
                "getTextSize",
                "putText"
            ],
            "__init__": [
                "hex2rgb",
                "len",
                "array",
                "SessionOptions",
                "int",
                "lower",
                "InferenceSession",
                "isfile",
                "FileNotFoundError",
                "print",
                "OnnxBaseModel",
                "get_input_shape"
            ],
            "__call__": [
                "int"
            ],
            "hex2rgb": [
                "tuple",
                "int"
            ],
            "get_ort_inference": [
                "get_input_name",
                "run",
                "squeeze"
            ],
            "get_input_name": [
                "get_inputs"
            ],
            "get_input_shape": [
                "get_inputs"
            ],
            "get_output_name": [
                "get_outputs"
            ],
            "preprocess": [
                "letterbox",
                "transpose",
                "astype",
                "ascontiguousarray"
            ],
            "postprocess": [
                "non_max_suppression_v8",
                "scale_boxes",
                "concatenate"
            ],
            "predict_shapes": [
                "preprocess",
                "time",
                "get_ort_inference",
                "print",
                "format",
                "postprocess",
                "zip",
                "int",
                "xywhr2xyxyxyxy",
                "squeeze",
                "reshape",
                "box_label",
                "colors",
                "imwrite"
            ]
        }
    },
    "tools/onnx_exporter/export_yolov10_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_yolov10_onnx.py",
        "imports": [
            "os",
            "cv2",
            "random",
            "numpy",
            "onnxruntime"
        ],
        "classes": [],
        "functions": {
            "letterbox": [
                "isinstance",
                "min",
                "int",
                "round",
                "mod",
                "resize",
                "copyMakeBorder"
            ],
            "rescale_coords": [
                "min",
                "clip",
                "astype"
            ],
            "preprocess": [
                "letterbox",
                "transpose",
                "astype",
                "ascontiguousarray"
            ],
            "postprocess": [
                "astype",
                "rescale_coords"
            ],
            "main": [
                "InferenceSession",
                "imread",
                "preprocess",
                "run",
                "postprocess",
                "zip",
                "rectangle",
                "putText",
                "imshow",
                "waitKey",
                "exists",
                "dirname",
                "makedirs",
                "imwrite",
                "print"
            ]
        }
    },
    "tools/onnx_exporter/export_yolow_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_yolow_onnx.py",
        "imports": [
            "cv2",
            "time",
            "numpy",
            "onnxruntime"
        ],
        "classes": [],
        "functions": {
            "denormalize_bbox": [
                "int"
            ],
            "preprocess_image": [
                "imread",
                "resize",
                "astype",
                "transpose",
                "expand_dims"
            ],
            "inference": [
                "run"
            ],
            "postprocess_results": [
                "enumerate",
                "denormalize_bbox",
                "int",
                "rectangle",
                "putText"
            ],
            "forward": [
                "InferenceSession",
                "get_inputs",
                "preprocess_image",
                "inference",
                "postprocess_results"
            ],
            "main": [
                "forward",
                "imshow",
                "waitKey",
                "destroyAllWindows",
                "print",
                "imwrite"
            ]
        }
    },
    "tools/onnx_exporter/export_recognize_anything_model_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_recognize_anything_model_onnx.py",
        "imports": [
            "os",
            "os.path",
            "argparse",
            "cv2",
            "numpy",
            "onnxruntime",
            "torch",
            "ram.models.ram",
            "onnx",
            "onnxruntime.quantization.QuantType",
            "onnxruntime.quantization.quantize.quantize_dynamic",
            "onnx"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "RAM",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "load_tag_list",
                    "unload"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "SessionOptions",
                "int",
                "lower",
                "InferenceSession",
                "isfile",
                "FileNotFoundError",
                "print",
                "OnnxBaseModel",
                "get_input_shape",
                "load_tag_list"
            ],
            "get_ort_inference": [
                "get_input_name",
                "run",
                "squeeze"
            ],
            "get_input_name": [
                "get_inputs"
            ],
            "get_input_shape": [
                "get_inputs"
            ],
            "get_output_name": [
                "get_outputs"
            ],
            "preprocess": [
                "resize",
                "array",
                "transpose",
                "astype",
                "expand_dims"
            ],
            "postprocess": [
                "range",
                "argwhere",
                "squeeze",
                "append",
                "join"
            ],
            "predict_shapes": [
                "preprocess",
                "get_ort_inference",
                "postprocess",
                "print"
            ],
            "load_tag_list": [
                "open",
                "splitlines",
                "read",
                "array"
            ],
            "unload": [],
            "export_onnx": [
                "exists",
                "ram",
                "eval",
                "to",
                "randn",
                "export",
                "check_model",
                "load",
                "splitext",
                "tuple",
                "map",
                "split",
                "print",
                "quantize_dynamic"
            ]
        }
    },
    "tools/onnx_exporter/export_grounding_dino_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_grounding_dino_onnx.py",
        "imports": [
            "argparse",
            "os",
            "os.path",
            "cv2",
            "time",
            "numpy",
            "onnxruntime",
            "typing.Dict",
            "tokenizers.Tokenizer",
            "onnxruntime.quantization.QuantType",
            "onnxruntime.quantization.quantize.quantize_dynamic",
            "onnx",
            "torch",
            "groundingdino.models.build_model",
            "groundingdino.util.slconfig.SLConfig",
            "groundingdino.util.utils.clean_state_dict"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "Grounding_DINO",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "update",
                "SessionOptions",
                "int",
                "lower",
                "InferenceSession",
                "isfile",
                "FileNotFoundError",
                "print",
                "OnnxBaseModel",
                "get_configs",
                "get_tokenizer"
            ],
            "get_ort_inference": [
                "get_input_name",
                "run",
                "squeeze"
            ],
            "get_input_name": [
                "get_inputs"
            ],
            "get_input_shape": [
                "get_inputs"
            ],
            "get_output_name": [
                "get_outputs"
            ],
            "preprocess": [
                "resize",
                "astype",
                "array",
                "transpose",
                "expand_dims",
                "get_caption",
                "encode",
                "generate_masks_with_special_tokens_and_transfer_map"
            ],
            "postprocess": [
                "squeeze",
                "sig",
                "max",
                "encode",
                "array",
                "get_phrases_from_posmap",
                "append"
            ],
            "predict_shapes": [
                "preprocess",
                "time",
                "get_ort_inference",
                "print",
                "format",
                "postprocess",
                "rescale_boxes",
                "zip",
                "append"
            ],
            "sig": [
                "exp"
            ],
            "rescale_boxes": [
                "array",
                "append"
            ],
            "get_configs": [
                "Args",
                "ValueError",
                "print"
            ],
            "get_caption": [
                "lower",
                "strip",
                "endswith"
            ],
            "get_tokenizer": [
                "from_file"
            ],
            "get_phrases_from_posmap": [
                "isinstance",
                "where",
                "decode",
                "NotImplementedError"
            ],
            "generate_masks_with_special_tokens_and_transfer_map": [
                "zeros",
                "argwhere",
                "reshape",
                "eye",
                "tile",
                "range",
                "arange",
                "append",
                "stack"
            ],
            "unload": [],
            "load_pt_model": [
                "fromfile",
                "build_model",
                "load",
                "load_state_dict",
                "clean_state_dict",
                "eval"
            ],
            "export_onnx": [
                "tokenizer",
                "tensor",
                "randn",
                "export",
                "tuple",
                "map",
                "split",
                "splitext",
                "print",
                "quantize_dynamic"
            ]
        }
    },
    "tools/onnx_exporter/export_dfine_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_dfine_onnx.py",
        "imports": [
            "cv2",
            "os",
            "random",
            "numpy",
            "onnxruntime",
            "PIL.Image"
        ],
        "classes": [],
        "functions": {
            "preprocess": [
                "min",
                "int",
                "resize",
                "new",
                "paste",
                "array",
                "astype",
                "transpose",
                "expand_dims"
            ],
            "postprocess": [
                "enumerate",
                "int",
                "max",
                "min",
                "append"
            ],
            "main": [
                "InferenceSession",
                "convert",
                "open",
                "preprocess",
                "run",
                "postprocess",
                "imread",
                "zip",
                "rectangle",
                "putText",
                "imshow",
                "waitKey",
                "exists",
                "dirname",
                "makedirs",
                "imwrite",
                "print"
            ]
        }
    },
    "tests/__init__.py": {
        "file_name": "/tests/__init__.py",
        "imports": [],
        "classes": [],
        "functions": {}
    },
    "tests/test_models/rmbg_v_1_4.py": {
        "file_name": "/tests/test_models/rmbg_v_1_4.py",
        "imports": [
            "numpy",
            "onnxruntime",
            "skimage.io",
            "PIL.Image",
            "cv2"
        ],
        "classes": [
            {
                "class_name": "ImageBackgroundRemover",
                "methods": [
                    "__init__",
                    "preprocess_image",
                    "postprocess_image",
                    "remove_background"
                ]
            }
        ],
        "functions": {
            "__init__": [
                "InferenceSession"
            ],
            "preprocess_image": [
                "len",
                "expand_dims",
                "resize",
                "astype",
                "transpose"
            ],
            "postprocess_image": [
                "resize",
                "squeeze",
                "max",
                "min",
                "astype"
            ],
            "remove_background": [
                "imread",
                "preprocess_image",
                "get_inputs",
                "run",
                "postprocess_image",
                "fromarray",
                "open",
                "convert",
                "new",
                "paste",
                "save",
                "print"
            ]
        }
    },
    "tests/test_utils/test_general.py": {
        "file_name": "/tests/test_utils/test_general.py",
        "imports": [
            "unittest",
            "anylabeling.views.labeling.utils.general.is_possible_rectangle"
        ],
        "classes": [
            {
                "class_name": "TestIsRectangle",
                "methods": [
                    "test_normal_rectangle",
                    "test_irregular_shape",
                    "test_rectangle_with_square_shape",
                    "test_rectangle_with_diagonal_points",
                    "test_lese_than_four_points",
                    "test_more_than_four_points"
                ]
            }
        ],
        "functions": {
            "test_normal_rectangle": [
                "assertEqual",
                "is_possible_rectangle"
            ],
            "test_irregular_shape": [
                "assertEqual",
                "is_possible_rectangle"
            ],
            "test_rectangle_with_square_shape": [
                "assertEqual",
                "is_possible_rectangle"
            ],
            "test_rectangle_with_diagonal_points": [
                "assertEqual",
                "is_possible_rectangle"
            ],
            "test_lese_than_four_points": [
                "assertEqual",
                "is_possible_rectangle"
            ],
            "test_more_than_four_points": [
                "assertEqual",
                "is_possible_rectangle"
            ]
        }
    }
}
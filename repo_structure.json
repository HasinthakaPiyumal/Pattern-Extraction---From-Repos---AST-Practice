{
    "scripts/generate_languages.py": {
        "file_name": "/scripts/generate_languages.py",
        "imports": [
            "os",
            "glob",
            "PyQt5.QtCore"
        ],
        "classes": [],
        "functions": []
    },
    "scripts/compile_languages.py": {
        "file_name": "/scripts/compile_languages.py",
        "imports": [
            "os"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/app.py": {
        "file_name": "/anylabeling/app.py",
        "imports": [
            "os",
            "argparse",
            "codecs",
            "logging",
            "sys",
            "pathlib.Path",
            "yaml",
            "PyQt5.QtCore",
            "PyQt5.QtWidgets",
            "anylabeling.app_info.__appname__",
            "anylabeling.app_info.__version__",
            "anylabeling.app_info.__url__",
            "anylabeling.config.get_config",
            "anylabeling.config",
            "anylabeling.views.mainwindow.MainWindow",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.new_icon",
            "anylabeling.views.labeling.utils.gradient_text",
            "anylabeling.views.labeling.utils.update_checker.check_for_updates_async",
            "anylabeling.resources.resources"
        ],
        "classes": [],
        "functions": [
            "main",
            "delayed_update_check"
        ]
    },
    "anylabeling/utils.py": {
        "file_name": "/anylabeling/utils.py",
        "imports": [
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.pyqtSlot"
        ],
        "classes": [
            {
                "class_name": "GenericWorker",
                "methods": [
                    "__init__",
                    "run"
                ]
            }
        ],
        "functions": [
            "__init__",
            "run"
        ]
    },
    "anylabeling/checks.py": {
        "file_name": "/anylabeling/checks.py",
        "imports": [
            "sys",
            "pathlib.Path",
            "logging",
            "pprint",
            "app_info.__appname__",
            "app_info.__version__",
            "app_info.__preferred_device__",
            "views.labeling.utils.general.collect_system_info",
            "views.labeling.utils.general.format_bold",
            "views.labeling.utils.general.format_color",
            "views.labeling.utils.general.indent_text"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/__init__.py": {
        "file_name": "/anylabeling/__init__.py",
        "imports": [
            "app_info.__appdescription__",
            "app_info.__appname__",
            "app_info.__version__"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/config.py": {
        "file_name": "/anylabeling/config.py",
        "imports": [
            "os.path",
            "shutil",
            "yaml",
            "importlib.resources",
            "anylabeling.configs",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [],
        "functions": [
            "update_dict",
            "save_config",
            "get_default_config",
            "validate_config_item",
            "get_config"
        ]
    },
    "anylabeling/app_info.py": {
        "file_name": "/anylabeling/app_info.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/configs/__init__.py": {
        "file_name": "/anylabeling/configs/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/configs/auto_labeling/__init__.py": {
        "file_name": "/anylabeling/configs/auto_labeling/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/resources/__init__.py": {
        "file_name": "/anylabeling/resources/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/resources/resources.py": {
        "file_name": "/anylabeling/resources/resources.py",
        "imports": [
            "PyQt5.QtCore"
        ],
        "classes": [],
        "functions": [
            "qInitResources",
            "qCleanupResources"
        ]
    },
    "anylabeling/services/__init__.py": {
        "file_name": "/anylabeling/services/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/rmbg.py": {
        "file_name": "/anylabeling/services/auto_labeling/rmbg.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "._THUMBNAIL_RENDER_MODELS"
        ],
        "classes": [
            {
                "class_name": "RMBG",
                "methods": [
                    "__init__",
                    "preprocess",
                    "forward",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "preprocess",
            "forward",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov8_det_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_det_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Det_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/model_manager.py": {
        "file_name": "/anylabeling/services/auto_labeling/model_manager.py",
        "imports": [
            "os",
            "copy",
            "time",
            "yaml",
            "importlib.resources",
            "threading.Lock",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.pyqtSlot",
            "anylabeling.configs",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.config.get_config",
            "anylabeling.config.save_config",
            "anylabeling.services.auto_labeling.types.AutoLabelingResult",
            "anylabeling.services.auto_labeling.utils.TimeoutContext",
            "anylabeling.services.auto_labeling._CUSTOM_MODELS",
            "anylabeling.services.auto_labeling._CACHED_AUTO_LABELING_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_MARKS_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_API_TOKEN_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_RESET_TRACKER_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_CONF_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_IOU_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_MASK_FINENESS_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_PRESERVE_EXISTING_ANNOTATIONS_STATE_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_PROMPT_MODELS",
            "anylabeling.services.auto_labeling._ON_NEXT_FILES_CHANGED_MODELS",
            "yolov5.YOLOv5",
            "yolov6.YOLOv6",
            "yolov7.YOLOv7",
            "yolov5_sahi.YOLOv5_SAHI",
            "yolov8_sahi.YOLOv8_SAHI",
            "yolov8.YOLOv8",
            "yolov9.YOLOv9",
            "yolov10.YOLOv10",
            "yolo11.YOLO11",
            "yolow.YOLOW",
            "yolov5_seg.YOLOv5_Seg",
            "yolov5_ram.YOLOv5_RAM",
            "yolow_ram.YOLOW_RAM",
            "yolov8_seg.YOLOv8_Seg",
            "yolo11_seg.YOLO11_Seg",
            "yolov8_obb.YOLOv8_OBB",
            "yolo11_obb.YOLO11_OBB",
            "yolov8_pose.YOLOv8_Pose",
            "yolo11_pose.YOLO11_Pose",
            "yolox.YOLOX",
            "yolo_nas.YOLO_NAS",
            "damo_yolo.DAMO_YOLO",
            "gold_yolo.Gold_YOLO",
            "grounding_dino.Grounding_DINO",
            "grounding_dino_api.Grounding_DINO_API",
            "ram.RAM",
            "internimage_cls.InternImage_CLS",
            "pulc_attribute.PULC_Attribute",
            "yolov5_sam.YOLOv5SegmentAnything",
            "yolov8_sam2.YOLOv8SegmentAnything2",
            "grounding_sam.GroundingSAM",
            "grounding_sam2.GroundingSAM2",
            "open_vision.OpenVision",
            "doclayout_yolo.DocLayoutYOLO",
            "yolov5_obb.YOLOv5OBB",
            "segment_anything.SegmentAnything",
            "segment_anything_2.SegmentAnything2",
            "segment_anything_2_video.SegmentAnything2Video",
            "efficientvit_sam.EfficientViT_SAM",
            "sam_med2d.SAM_Med2D",
            "edge_sam.EdgeSAM",
            "sam_hq.SAM_HQ",
            "yolov5_resnet.YOLOv5_ResNet",
            "rtdetr.RTDETR",
            "rtdetrv2.RTDETRv2",
            "yolov6_face.YOLOv6Face",
            "yolox_dwpose.YOLOX_DWPose",
            "rtmdet_pose.RTMDet_Pose",
            "clrnet.CLRNet",
            "ppocr_v4.PPOCRv4",
            "ppocr_v5.PPOCRv5",
            "yolov5_cls.YOLOv5_CLS",
            "yolov5_car_plate.YOLOv5CarPlateDetRec",
            "yolov8_cls.YOLOv8_CLS",
            "yolo11_cls.YOLO11_CLS",
            "yolov5_det_track.YOLOv5_Det_Tracker",
            "yolov8_det_track.YOLOv8_Det_Tracker",
            "yolo11_det_track.YOLO11_Det_Tracker",
            "yolov8_seg_track.YOLOv8_Seg_Tracker",
            "yolo11_seg_track.YOLO11_Seg_Tracker",
            "yolov8_obb_track.YOLOv8_Obb_Tracker",
            "yolo11_obb_track.YOLO11_Obb_Tracker",
            "yolov8_pose_track.YOLOv8_Pose_Tracker",
            "yolo11_pose_track.YOLO11_Pose_Tracker",
            "rmbg.RMBG",
            "depth_anything.DepthAnything",
            "depth_anything_v2.DepthAnythingV2",
            "upn.UPN",
            "florence2.Florence2",
            "geco.GeCo",
            "rfdetr.RFDETR",
            "dfine.DFINE",
            "yolo12.YOLO12",
            "yoloe.YOLOE",
            "u_rtdetr.U_RTDETR"
        ],
        "classes": [
            {
                "class_name": "ModelManager",
                "methods": [
                    "__init__",
                    "load_model_configs",
                    "get_model_configs",
                    "set_output_mode",
                    "on_model_download_finished",
                    "load_custom_model",
                    "load_model",
                    "_load_model",
                    "set_cache_auto_label",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_api_token",
                    "set_auto_labeling_reset_tracker",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "set_auto_labeling_prompt",
                    "unload_model",
                    "predict_shapes",
                    "predict_shapes_threading",
                    "on_next_files_changed",
                    "set_upn_mode",
                    "set_groundingdino_mode",
                    "set_florence2_mode",
                    "set_mask_fineness"
                ]
            }
        ],
        "functions": [
            "__init__",
            "load_model_configs",
            "get_model_configs",
            "set_output_mode",
            "on_model_download_finished",
            "load_custom_model",
            "load_model",
            "_load_model",
            "_load_florence2",
            "_load_geco",
            "set_cache_auto_label",
            "set_auto_labeling_marks",
            "set_auto_labeling_api_token",
            "set_auto_labeling_reset_tracker",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "set_auto_labeling_preserve_existing_annotations_state",
            "set_auto_labeling_prompt",
            "unload_model",
            "predict_shapes",
            "predict_shapes_threading",
            "on_next_files_changed",
            "set_upn_mode",
            "set_groundingdino_mode",
            "set_florence2_mode",
            "set_mask_fineness"
        ]
    },
    "anylabeling/services/auto_labeling/rtdetrv2.py": {
        "file_name": "/anylabeling/services/auto_labeling/rtdetrv2.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "RTDETRv2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov8_sam2.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_sam2.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "engines.build_onnx_engine.OnnxBaseModel",
            "lru_cache.LRUCache",
            "types.AutoLabelingResult",
            "__base__.sam2.SegmentAnything2ONNX",
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8SegmentAnything2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_marks",
            "post_process",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/segment_anything.py": {
        "file_name": "/anylabeling/services/auto_labeling/segment_anything.py",
        "imports": [
            "os",
            "traceback",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "sam_onnx.SegmentAnythingONNX",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "post_process",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/depth_anything.py": {
        "file_name": "/anylabeling/services/auto_labeling/depth_anything.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "._THUMBNAIL_RENDER_MODELS"
        ],
        "classes": [
            {
                "class_name": "Resize",
                "methods": [
                    "__init__",
                    "constrain_to_multiple_of",
                    "get_size",
                    "__call__"
                ]
            },
            {
                "class_name": "NormalizeImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "PrepareForNet",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "DepthAnything",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "constrain_to_multiple_of",
            "get_size",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov8_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_cls.py",
        "imports": [
            "yolov5_cls.YOLOv5_CLS"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_CLS",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/types.py": {
        "file_name": "/anylabeling/services/auto_labeling/types.py",
        "imports": [],
        "classes": [
            {
                "class_name": "AutoLabelingResult",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "AutoLabelingMode",
                "methods": [
                    "__init__",
                    "get_default_mode",
                    "__eq__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__init__",
            "get_default_mode",
            "__eq__"
        ]
    },
    "anylabeling/services/auto_labeling/gold_yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/gold_yolo.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "Gold_YOLO",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov8.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov9.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov9.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv9",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/dfine.py": {
        "file_name": "/anylabeling/services/auto_labeling/dfine.py",
        "imports": [
            "os",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "DFINE",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolo11_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_cls.py",
        "imports": [
            "yolov5_cls.YOLOv5_CLS"
        ],
        "classes": [
            {
                "class_name": "YOLO11_CLS",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolo12.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo12.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO12",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolo11_seg.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_seg.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Seg",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/rtdetr.py": {
        "file_name": "/anylabeling/services/auto_labeling/rtdetr.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "utils.points_conversion.cxywh2xyxy"
        ],
        "classes": [
            {
                "class_name": "RTDETR",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/segment_anything_2.py": {
        "file_name": "/anylabeling/services/auto_labeling/segment_anything_2.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.clip.ChineseClipONNX",
            "__base__.sam2.SegmentAnything2ONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "post_process",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/damo_yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/damo_yolo.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "DAMO_YOLO",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov5_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_cls.py",
        "imports": [
            "numpy",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "utils.softmax"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_CLS",
                "methods": [
                    "postprocess",
                    "predict_shapes"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "postprocess",
            "predict_shapes"
        ]
    },
    "anylabeling/services/auto_labeling/yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolo11_pose_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_pose_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Pose_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov8_pose.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_pose.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Pose",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/sam_hq.py": {
        "file_name": "/anylabeling/services/auto_labeling/sam_hq.py",
        "imports": [
            "os",
            "gc",
            "cv2",
            "traceback",
            "onnxruntime",
            "numpy",
            "copy.deepcopy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks"
                ]
            },
            {
                "class_name": "SAM_HQ",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "get_input_points",
            "run_encoder",
            "get_preprocess_shape",
            "apply_coords",
            "run_decoder",
            "transform_masks",
            "encode",
            "predict_masks",
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "post_process",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/yolov5_det_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_det_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_Det_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/internimage_cls.py": {
        "file_name": "/anylabeling/services/auto_labeling/internimage_cls.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.softmax",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "InternImage_CLS",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov5_car_plate.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_car_plate.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "utils.xywh2xyxy"
        ],
        "classes": [
            {
                "class_name": "YOLOv5CarPlateDetRec",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "rec_pre_processing",
                    "get_plate_result",
                    "rec_plate",
                    "predict_shapes",
                    "four_point_transform",
                    "decodePlate",
                    "get_split_merge",
                    "order_points",
                    "restore_box",
                    "_nms",
                    "_letterbox",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "preprocess",
            "postprocess",
            "rec_pre_processing",
            "get_plate_result",
            "rec_plate",
            "predict_shapes",
            "four_point_transform",
            "decodePlate",
            "get_split_merge",
            "order_points",
            "restore_box",
            "_nms",
            "_letterbox",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/rfdetr.py": {
        "file_name": "/anylabeling/services/auto_labeling/rfdetr.py",
        "imports": [
            "os",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "utils.general.sigmoid",
            "utils.points_conversion.cxcywh2xyxy"
        ],
        "classes": [
            {
                "class_name": "RFDETR",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/open_vision.py": {
        "file_name": "/anylabeling/services/auto_labeling/open_vision.py",
        "imports": [
            "warnings",
            "os",
            "cv2",
            "argparse",
            "traceback",
            "numpy",
            "PIL.Image",
            "typing.List",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "lru_cache.LRUCache",
            "__base__.sam2.SegmentAnything2ONNX",
            "torch",
            "visualgd.datasets.transforms",
            "visualgd.registry.MODULE_BUILD_FUNCS",
            "visualgd.util.misc.nested_tensor_from_tensor_list",
            "visualgd.config.cfg_handler.ConfigurationHandler"
        ],
        "classes": [
            {
                "class_name": "OpenVision",
                "methods": [
                    "__init__",
                    "build_transforms",
                    "build_model",
                    "set_auto_labeling_marks",
                    "post_process",
                    "get_visual_prompt",
                    "get_boxes",
                    "predict_shapes",
                    "is_rectangle_mode",
                    "rescale_boxes",
                    "get_ind_to_filter",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "build_transforms",
            "build_model",
            "set_auto_labeling_marks",
            "post_process",
            "get_visual_prompt",
            "get_boxes",
            "predict_shapes",
            "is_rectangle_mode",
            "rescale_boxes",
            "get_ind_to_filter",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/segment_anything_2_video.py": {
        "file_name": "/anylabeling/services/auto_labeling/segment_anything_2_video.py",
        "imports": [
            "warnings",
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "torch",
            "sam2.build_sam.build_sam2",
            "sam2.build_sam.build_sam2_camera_predictor",
            "sam2.sam2_image_predictor.SAM2ImagePredictor"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything2Video",
                "methods": [
                    "__init__",
                    "set_mask_fineness",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "set_cache_auto_label",
                    "set_auto_labeling_reset_tracker",
                    "set_auto_labeling_prompt",
                    "marks_to_prompts",
                    "post_process",
                    "image_process",
                    "video_process",
                    "predict_shapes",
                    "get_ann_frame_idx",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_mask_fineness",
            "set_auto_labeling_marks",
            "set_auto_labeling_preserve_existing_annotations_state",
            "set_cache_auto_label",
            "set_auto_labeling_reset_tracker",
            "set_auto_labeling_prompt",
            "marks_to_prompts",
            "post_process",
            "image_process",
            "video_process",
            "predict_shapes",
            "get_ann_frame_idx",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov8_seg_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_seg_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Seg_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/ppocr_v4.py": {
        "file_name": "/anylabeling/services/auto_labeling/ppocr_v4.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "onnxruntime",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.ppocr_utils.text_system.TextSystem",
            "views.labeling.utils.general.is_possible_rectangle"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "PPOCRv4",
                "methods": [
                    "load_model",
                    "__init__",
                    "parse_args",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "load_model",
            "__init__",
            "parse_args",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov10.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov10.py",
        "imports": [
            "PyQt5.QtCore.QCoreApplication",
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv10",
                "methods": []
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov5_sahi.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_sahi.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.sahi.predict.get_sliced_prediction",
            "utils.sahi.models.yolov5_onnx.Yolov5OnnxDetectionModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_SAHI",
                "methods": [
                    "__init__",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/rtmdet_pose.py": {
        "file_name": "/anylabeling/services/auto_labeling/rtmdet_pose.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.rtmdet.RTMDet",
            "pose.rtmo_onnx.RTMO"
        ],
        "classes": [
            {
                "class_name": "RTMDet_Pose",
                "methods": [
                    "__init__",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/grounding_dino_api.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_dino_api.py",
        "imports": [
            "base64",
            "cv2",
            "json",
            "os",
            "re",
            "requests",
            "time",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "Grounding_DINO_API",
                "methods": [
                    "__init__",
                    "set_auto_labeling_api_token",
                    "set_groundingdino_mode",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_api_token",
            "set_groundingdino_mode",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "set_auto_labeling_preserve_existing_annotations_state",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/sam_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/sam_onnx.py",
        "imports": [
            "gc",
            "copy.deepcopy",
            "cv2",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_input_points",
            "run_encoder",
            "get_preprocess_shape",
            "apply_coords",
            "run_decoder",
            "transform_masks",
            "encode",
            "predict_masks"
        ]
    },
    "anylabeling/services/auto_labeling/edge_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/edge_sam.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.sam.EdgeSAMONNX",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "EdgeSAM",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "post_process",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/clrnet.py": {
        "file_name": "/anylabeling/services/auto_labeling/clrnet.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "onnxruntime",
            "scipy.interpolate.InterpolatedUnivariateSpline",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "CLRNet",
                "methods": [
                    "__init__",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "pre_process",
                    "post_process",
                    "predict_shapes",
                    "softmax",
                    "land_iou",
                    "numpy_land_nms",
                    "convert_outputs",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_preserve_existing_annotations_state",
            "pre_process",
            "post_process",
            "predict_shapes",
            "softmax",
            "land_iou",
            "numpy_land_nms",
            "convert_outputs",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov6.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov6.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv6",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/u_rtdetr.py": {
        "file_name": "/anylabeling/services/auto_labeling/u_rtdetr.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "U_RTDETR",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/grounding_sam2.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_sam2.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "typing.Dict",
            "tokenizers.Tokenizer",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "lru_cache.LRUCache",
            "utils.general.Args",
            "engines.build_onnx_engine.OnnxBaseModel",
            "__base__.sam2.SegmentAnything2ONNX",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "GroundingSAM2",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "preprocess",
                    "postprocess",
                    "post_process",
                    "predict_shapes",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenlizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "preprocess",
            "postprocess",
            "post_process",
            "predict_shapes",
            "sig",
            "rescale_boxes",
            "get_configs",
            "get_caption",
            "get_tokenlizer",
            "get_phrases_from_posmap",
            "generate_masks_with_special_tokens_and_transfer_map",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/ppocr_v5.py": {
        "file_name": "/anylabeling/services/auto_labeling/ppocr_v5.py",
        "imports": [
            "ppocr_v4.PPOCRv4"
        ],
        "classes": [
            {
                "class_name": "PPOCRv5",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/grounding_dino.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_dino.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "typing.Dict",
            "tokenizers.Tokenizer",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.general.Args",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "Grounding_DINO",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenlizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "sig",
            "rescale_boxes",
            "get_configs",
            "get_caption",
            "get_tokenlizer",
            "get_phrases_from_posmap",
            "generate_masks_with_special_tokens_and_transfer_map",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov5_obb.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_obb.py",
        "imports": [
            "os",
            "cv2",
            "math",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.general.letterbox",
            "utils.points_conversion.rbox2poly",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5OBB",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "calculate_rotation_theta",
                    "scale_polys",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "calculate_rotation_theta",
            "scale_polys",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/florence2.py": {
        "file_name": "/anylabeling/services/auto_labeling/florence2.py",
        "imports": [
            "warnings",
            "gc",
            "PIL.Image",
            "unittest.mock.patch",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "types.AutoLabelingMode",
            "torch",
            "transformers.AutoModelForCausalLM",
            "transformers.AutoProcessor",
            "transformers.dynamic_module_utils.get_imports"
        ],
        "classes": [
            {
                "class_name": "Florence2",
                "methods": [
                    "__init__",
                    "set_florence2_mode",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "_forward",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "fixed_get_imports",
            "set_florence2_mode",
            "set_auto_labeling_marks",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "_forward",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolo_nas.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo_nas.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "Preprocessing",
                "methods": [
                    "__init__",
                    "__rescale_img",
                    "_standarize",
                    "_det_rescale",
                    "_det_long_max_rescale",
                    "_bot_right_pad",
                    "_center_pad",
                    "_normalize",
                    "_call_fn",
                    "__call__"
                ]
            },
            {
                "class_name": "Postprocessing",
                "methods": [
                    "__init__",
                    "_rescale_boxes",
                    "_shift_bboxes",
                    "_call_fn",
                    "__call__"
                ]
            },
            {
                "class_name": "YOLO_NAS",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "__rescale_img",
            "_standarize",
            "_det_rescale",
            "_det_long_max_rescale",
            "_bot_right_pad",
            "_center_pad",
            "_normalize",
            "_call_fn",
            "__call__",
            "__init__",
            "_rescale_boxes",
            "_shift_bboxes",
            "_call_fn",
            "__call__",
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "set_auto_labeling_preserve_existing_annotations_state",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolox_dwpose.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolox_dwpose.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "onnxruntime",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "pose.dwpose_onnx.inference_pose"
        ],
        "classes": [
            {
                "class_name": "YOLOX_DWPose",
                "methods": [
                    "__init__",
                    "det_pre_process",
                    "det_post_process",
                    "predict_shapes",
                    "pose_rescale",
                    "det_rescale",
                    "multiclass_nms_class_agnostic",
                    "nms",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "det_pre_process",
            "det_post_process",
            "predict_shapes",
            "pose_rescale",
            "det_rescale",
            "multiclass_nms_class_agnostic",
            "nms",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolo11_pose.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_pose.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Pose",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov8_pose_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_pose_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Pose_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov5_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_sam.py",
        "imports": [
            "os",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "__base__.sam.SegmentAnythingONNX",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5SegmentAnything",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "get_sam_results",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "get_sam_results",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/pulc_attribute.py": {
        "file_name": "/anylabeling/services/auto_labeling/pulc_attribute.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "PULC_Attribute",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolo11_obb.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_obb.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_OBB",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/upn.py": {
        "file_name": "/anylabeling/services/auto_labeling/upn.py",
        "imports": [
            "warnings",
            "os",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.upn.UPNWrapper"
        ],
        "classes": [
            {
                "class_name": "UPN",
                "methods": [
                    "__init__",
                    "_check_prompt_type",
                    "set_upn_mode",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "_check_prompt_type",
            "set_upn_mode",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/depth_anything_v2.py": {
        "file_name": "/anylabeling/services/auto_labeling/depth_anything_v2.py",
        "imports": [
            "os",
            "cv2",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "._THUMBNAIL_RENDER_MODELS"
        ],
        "classes": [
            {
                "class_name": "DepthAnythingV2",
                "methods": [
                    "__init__",
                    "preprocess",
                    "forward",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "preprocess",
            "forward",
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov8_sahi.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_sahi.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "utils.sahi.predict.get_sliced_prediction",
            "utils.sahi.models.yolov8_onnx.Yolov8OnnxDetectionModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_SAHI",
                "methods": [
                    "__init__",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov7.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov7.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv7",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/doclayout_yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/doclayout_yolo.py",
        "imports": [
            "yolov10.YOLOv10"
        ],
        "classes": [
            {
                "class_name": "DocLayoutYOLO",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yoloe.py": {
        "file_name": "/anylabeling/services/auto_labeling/yoloe.py",
        "imports": [
            "os",
            "numpy",
            "PIL.Image",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "model.Model",
            "types.AutoLabelingResult",
            "torch",
            "supervision",
            "supervision.detection.utils.converters.mask_to_polygons",
            "supervision.detection.utils.mask_to_polygons",
            "ultralytics.YOLOE",
            "ultralytics.models.yolo.yoloe.predict_vp.YOLOEVPSegPredictor",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs.ram"
        ],
        "classes": [
            {
                "class_name": "YOLOE",
                "methods": [
                    "__init__",
                    "build_model",
                    "set_auto_labeling_marks",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "postprocess",
                    "_get_text_model",
                    "_get_visual_model",
                    "_get_prompt_free_model",
                    "predict_shapes",
                    "load_tag_list",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "build_model",
            "set_auto_labeling_marks",
            "set_auto_labeling_iou",
            "set_auto_labeling_conf",
            "set_auto_labeling_preserve_existing_annotations_state",
            "postprocess",
            "_get_text_model",
            "_get_visual_model",
            "_get_prompt_free_model",
            "predict_shapes",
            "load_tag_list",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov6_face.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov6_face.py",
        "imports": [
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "utils.numpy_nms",
            "utils.xywh2xyxy",
            "utils.rescale_box_and_landmark"
        ],
        "classes": [
            {
                "class_name": "YOLOv6Face",
                "methods": [
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolo11.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/lru_cache.py": {
        "file_name": "/anylabeling/services/auto_labeling/lru_cache.py",
        "imports": [
            "collections.OrderedDict",
            "threading"
        ],
        "classes": [
            {
                "class_name": "LRUCache",
                "methods": [
                    "__init__",
                    "get",
                    "put",
                    "find"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get",
            "put",
            "find"
        ]
    },
    "anylabeling/services/auto_labeling/yolov8_obb.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_obb.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_OBB",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov8_seg.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_seg.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Seg",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/ram.py",
        "imports": [
            "__base__.ram.RecognizeAnything"
        ],
        "classes": [
            {
                "class_name": "RAM",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolo11_obb_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_obb_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Obb_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolo11_seg_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_seg_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Seg_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/grounding_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/grounding_sam.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "onnxruntime",
            "numpy",
            "typing.Dict",
            "copy.deepcopy",
            "tokenizers.Tokenizer",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "model.Model",
            "types.AutoLabelingResult",
            "lru_cache.LRUCache",
            "utils.general.Args",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks"
                ]
            },
            {
                "class_name": "GroundingSAM",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "preprocess",
                    "postprocess",
                    "post_process",
                    "predict_shapes",
                    "get_input_points",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenlizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "run_encoder",
            "get_preprocess_shape",
            "apply_coords",
            "run_decoder",
            "transform_masks",
            "encode",
            "predict_masks",
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "preprocess",
            "postprocess",
            "post_process",
            "predict_shapes",
            "get_input_points",
            "sig",
            "rescale_boxes",
            "get_configs",
            "get_caption",
            "get_tokenlizer",
            "get_phrases_from_posmap",
            "generate_masks_with_special_tokens_and_transfer_map",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/geco.py": {
        "file_name": "/anylabeling/services/auto_labeling/geco.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "onnxruntime",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "GeCoONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "run_decoder",
                    "encode",
                    "predict_bboxes"
                ]
            },
            {
                "class_name": "GeCo",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed",
                    "post_process"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "get_input_points",
            "run_encoder",
            "run_decoder",
            "encode",
            "predict_bboxes",
            "__init__",
            "set_auto_labeling_marks",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed",
            "post_process"
        ]
    },
    "anylabeling/services/auto_labeling/yolov8_obb_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov8_obb_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv8_Obb_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov5_resnet.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_resnet.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "utils.softmax",
            "__base__.yolo.YOLO",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_ResNet",
                "methods": [
                    "__init__",
                    "cls_preprocess",
                    "cls_postprocess",
                    "predict_shapes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "cls_preprocess",
            "cls_postprocess",
            "predict_shapes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/model.py": {
        "file_name": "/anylabeling/services/auto_labeling/model.py",
        "imports": [
            "os",
            "pathlib",
            "yaml",
            "onnx",
            "urllib.request",
            "time",
            "urllib.parse.urlparse",
            "urllib.error.URLError",
            "ssl",
            "socket",
            "abc.abstractmethod",
            "PyQt5.QtCore.QCoreApplication",
            "PyQt5.QtCore.QFile",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtGui.QImage",
            "types.AutoLabelingResult",
            "anylabeling.config.get_config",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.label_file.LabelFile",
            "anylabeling.views.labeling.label_file.LabelFileError"
        ],
        "classes": [
            {
                "class_name": "Model",
                "methods": [
                    "__init__",
                    "get_required_widgets",
                    "allow_migrate_data",
                    "download_with_retry",
                    "get_model_abs_path",
                    "check_missing_config",
                    "predict_shapes",
                    "unload",
                    "load_image_from_filename",
                    "on_next_files_changed",
                    "set_output_mode"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "get_required_widgets",
            "allow_migrate_data",
            "download_with_retry",
            "get_model_abs_path",
            "get_filename_from_url",
            "_progress",
            "check_missing_config",
            "predict_shapes",
            "unload",
            "load_image_from_filename",
            "on_next_files_changed",
            "set_output_mode"
        ]
    },
    "anylabeling/services/auto_labeling/yolox.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolox.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOX",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "rescale",
                    "multiclass_nms_class_agnostic",
                    "nms",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "set_auto_labeling_preserve_existing_annotations_state",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "rescale",
            "multiclass_nms_class_agnostic",
            "nms",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/yolov5_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolov5_ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_ram.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs.ram"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_RAM",
                "methods": [
                    "__init__",
                    "ram_preprocess",
                    "ram_postprocess",
                    "predict_shapes",
                    "load_tag_list",
                    "get_results",
                    "get_attributes",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "ram_preprocess",
            "ram_postprocess",
            "predict_shapes",
            "load_tag_list",
            "get_results",
            "get_attributes",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/sam_med2d.py": {
        "file_name": "/anylabeling/services/auto_labeling/sam_med2d.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "onnxruntime",
            "copy.deepcopy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult",
            "__base__.clip.ChineseClipONNX"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "run_encoder",
                    "transform",
                    "encode",
                    "get_input_points",
                    "apply_coords",
                    "run_decoder",
                    "predict_masks"
                ]
            },
            {
                "class_name": "SAM_Med2D",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "run_encoder",
            "transform",
            "encode",
            "get_input_points",
            "apply_coords",
            "run_decoder",
            "predict_masks",
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "post_process",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/yolov5_seg.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolov5_seg.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOv5_Seg",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolow.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolow.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLOW",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/yolow_ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolow_ram.py",
        "imports": [
            "os",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "types.AutoLabelingResult",
            "__base__.yolo.YOLO",
            "__base__.ram.RecognizeAnything",
            "engines.build_onnx_engine.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLOW_RAM",
                "methods": [
                    "__init__",
                    "predict_shapes"
                ]
            }
        ],
        "functions": [
            "__init__",
            "predict_shapes"
        ]
    },
    "anylabeling/services/auto_labeling/efficientvit_sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/efficientvit_sam.py",
        "imports": [
            "os",
            "cv2",
            "traceback",
            "numpy",
            "onnxruntime",
            "copy.deepcopy",
            "typing.Any",
            "typing.Union",
            "typing.Tuple",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.utils.GenericWorker",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta",
            "lru_cache.LRUCache",
            "model.Model",
            "types.AutoLabelingResult"
        ],
        "classes": [
            {
                "class_name": "SamEncoder",
                "methods": [
                    "__init__",
                    "_extract_feature",
                    "__call__"
                ]
            },
            {
                "class_name": "SamDecoder",
                "methods": [
                    "__init__",
                    "get_preprocess_shape",
                    "run",
                    "apply_coords",
                    "apply_boxes"
                ]
            },
            {
                "class_name": "EfficientViT_SAM",
                "methods": [
                    "__init__",
                    "set_auto_labeling_marks",
                    "set_mask_fineness",
                    "post_process",
                    "get_input_points",
                    "predict_shapes",
                    "unload",
                    "preload_worker",
                    "on_next_files_changed"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "_extract_feature",
            "__call__",
            "__init__",
            "get_preprocess_shape",
            "run",
            "apply_coords",
            "apply_boxes",
            "__init__",
            "set_auto_labeling_marks",
            "set_mask_fineness",
            "post_process",
            "get_input_points",
            "predict_shapes",
            "unload",
            "preload_worker",
            "on_next_files_changed"
        ]
    },
    "anylabeling/services/auto_labeling/yolo11_det_track.py": {
        "file_name": "/anylabeling/services/auto_labeling/yolo11_det_track.py",
        "imports": [
            "__base__.yolo.YOLO"
        ],
        "classes": [
            {
                "class_name": "YOLO11_Det_Tracker",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/configs/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/__init__.py",
        "imports": [
            ".bert",
            ".clip",
            ".ppocr",
            ".ram"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/configs/bert/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/bert/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/configs/clip/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/clip/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/configs/ppocr/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/ppocr/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/configs/chatrex/upn_large.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/chatrex/upn_large.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/configs/ram/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/configs/ram/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/__init__.py",
        "imports": [
            "model.build_groundingdino"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/registry.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/registry.py",
        "imports": [
            "inspect",
            "functools.partial"
        ],
        "classes": [
            {
                "class_name": "Registry",
                "methods": [
                    "__init__",
                    "__repr__",
                    "__len__",
                    "name",
                    "module_dict",
                    "get",
                    "registe_with_name",
                    "register"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__repr__",
            "__len__",
            "name",
            "module_dict",
            "get",
            "registe_with_name",
            "register"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/box_ops.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/box_ops.py",
        "imports": [
            "torch",
            "torchvision.ops.boxes.box_area",
            "ipdb"
        ],
        "classes": [],
        "functions": [
            "box_cxcywh_to_xyxy",
            "box_xyxy_to_cxcywh",
            "box_iou",
            "generalized_box_iou",
            "box_iou_pairwise",
            "generalized_box_iou_pairwise",
            "masks_to_boxes"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/slconfig.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/slconfig.py",
        "imports": [
            "ast",
            "os",
            "os.path",
            "shutil",
            "sys",
            "tempfile",
            "argparse.Action",
            "importlib.import_module",
            "addict.Dict",
            "yapf.yapflib.yapf_api.FormatCode",
            "slio.slload"
        ],
        "classes": [
            {
                "class_name": "ConfigDict",
                "methods": [
                    "__missing__",
                    "__getattr__"
                ]
            },
            {
                "class_name": "SLConfig",
                "methods": [
                    "_validate_py_syntax",
                    "_file2dict",
                    "_merge_a_into_b",
                    "fromfile",
                    "__init__",
                    "filename",
                    "text",
                    "pretty_text",
                    "__repr__",
                    "__len__",
                    "__getattr__",
                    "__getitem__",
                    "__setattr__",
                    "__setitem__",
                    "__iter__",
                    "dump",
                    "merge_from_dict",
                    "__setstate__",
                    "copy",
                    "deepcopy"
                ]
            },
            {
                "class_name": "DictAction",
                "methods": [
                    "_parse_int_float_bool",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "check_file_exist",
            "__missing__",
            "__getattr__",
            "_validate_py_syntax",
            "_file2dict",
            "_merge_a_into_b",
            "fromfile",
            "__init__",
            "filename",
            "text",
            "pretty_text",
            "_indent",
            "_format_basic_types",
            "_format_list",
            "_contain_invalid_identifier",
            "_format_dict",
            "__repr__",
            "__len__",
            "__getattr__",
            "__getitem__",
            "__setattr__",
            "__setitem__",
            "__iter__",
            "dump",
            "merge_from_dict",
            "__setstate__",
            "copy",
            "deepcopy",
            "_parse_int_float_bool",
            "__call__"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/utils.py",
        "imports": [
            "argparse",
            "json",
            "warnings",
            "collections.OrderedDict",
            "copy.deepcopy",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "numpy",
            "torch",
            "transformers.AutoTokenizer",
            "slconfig.SLConfig",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "CocoClassMapper",
                "methods": [
                    "__init__",
                    "origin2compact",
                    "compact2origin"
                ]
            },
            {
                "class_name": "Embedder",
                "methods": [
                    "__init__",
                    "create_embedding_fn",
                    "embed"
                ]
            },
            {
                "class_name": "APOPMeter",
                "methods": [
                    "__init__",
                    "update",
                    "update_cm"
                ]
            },
            {
                "class_name": "NiceRepr",
                "methods": [
                    "__nice__",
                    "__repr__",
                    "__str__"
                ]
            },
            {
                "class_name": "ModelEma",
                "methods": [
                    "__init__",
                    "_update",
                    "update",
                    "set"
                ]
            },
            {
                "class_name": "BestMetricSingle",
                "methods": [
                    "__init__",
                    "isbetter",
                    "update",
                    "__str__",
                    "__repr__",
                    "summary"
                ]
            },
            {
                "class_name": "BestMetricHolder",
                "methods": [
                    "__init__",
                    "update",
                    "summary",
                    "__repr__",
                    "__str__"
                ]
            }
        ],
        "functions": [
            "slprint",
            "clean_state_dict",
            "renorm",
            "__init__",
            "origin2compact",
            "compact2origin",
            "to_device",
            "get_gaussian_mean",
            "get_expected_points_from_map",
            "__init__",
            "create_embedding_fn",
            "embed",
            "get_embedder",
            "__init__",
            "update",
            "update_cm",
            "inverse_sigmoid",
            "get_raw_dict",
            "stat_tensors",
            "__nice__",
            "__repr__",
            "__str__",
            "ensure_rng",
            "random_boxes",
            "__init__",
            "_update",
            "update",
            "set",
            "__init__",
            "isbetter",
            "update",
            "__str__",
            "__repr__",
            "summary",
            "__init__",
            "update",
            "summary",
            "__repr__",
            "__str__",
            "targets_to",
            "get_phrases_from_posmap"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/get_tokenlizer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/get_tokenlizer.py",
        "imports": [
            "transformers.AutoTokenizer",
            "transformers.BertModel",
            "transformers.BertTokenizer",
            "transformers.RobertaModel",
            "transformers.RobertaTokenizerFast",
            "os"
        ],
        "classes": [],
        "functions": [
            "get_tokenlizer",
            "get_pretrained_language_model"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/time_counter.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/time_counter.py",
        "imports": [
            "json",
            "time"
        ],
        "classes": [
            {
                "class_name": "TimeCounter",
                "methods": [
                    "__init__",
                    "clear",
                    "timeit"
                ]
            },
            {
                "class_name": "TimeHolder",
                "methods": [
                    "__init__",
                    "update",
                    "final_res",
                    "__str__"
                ]
            },
            {
                "class_name": "AverageMeter",
                "methods": [
                    "__init__",
                    "reset",
                    "update",
                    "__str__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "clear",
            "timeit",
            "__init__",
            "update",
            "final_res",
            "__str__",
            "__init__",
            "reset",
            "update",
            "__str__"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/inference.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/inference.py",
        "imports": [
            "typing.Tuple",
            "typing.List",
            "cv2",
            "numpy",
            "supervision",
            "torch",
            "PIL.Image",
            "torchvision.ops.box_convert",
            "bisect",
            "groundingdino.datasets.transforms",
            "groundingdino.models.build_model",
            "util.misc.clean_state_dict",
            "util.slconfig.SLConfig",
            "util.utils.get_phrases_from_posmap"
        ],
        "classes": [
            {
                "class_name": "Model",
                "methods": [
                    "__init__",
                    "predict_with_caption",
                    "predict_with_classes",
                    "preprocess_image",
                    "post_process_result",
                    "phrases2classes"
                ]
            }
        ],
        "functions": [
            "preprocess_caption",
            "load_model",
            "load_image",
            "predict",
            "annotate",
            "__init__",
            "predict_with_caption",
            "predict_with_classes",
            "preprocess_image",
            "post_process_result",
            "phrases2classes"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/util/misc.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/misc.py",
        "imports": [
            "colorsys",
            "datetime",
            "functools",
            "io",
            "json",
            "os",
            "pickle",
            "subprocess",
            "time",
            "collections.OrderedDict",
            "collections.defaultdict",
            "collections.deque",
            "typing.List",
            "typing.Optional",
            "numpy",
            "torch",
            "torch.distributed",
            "torchvision",
            "torch.Tensor",
            "torchvision.ops._new_empty_tensor",
            "torchvision.ops.misc._output_size",
            "builtins"
        ],
        "classes": [
            {
                "class_name": "SmoothedValue",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "median",
                    "avg",
                    "global_avg",
                    "max",
                    "value",
                    "__str__"
                ]
            },
            {
                "class_name": "MetricLogger",
                "methods": [
                    "__init__",
                    "update",
                    "__getattr__",
                    "__str__",
                    "synchronize_between_processes",
                    "add_meter",
                    "log_every"
                ]
            },
            {
                "class_name": "NestedTensor",
                "methods": [
                    "__init__",
                    "imgsize",
                    "to",
                    "to_img_list_single",
                    "to_img_list",
                    "device",
                    "decompose",
                    "__repr__",
                    "shape"
                ]
            },
            {
                "class_name": "color_sys",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "update",
            "synchronize_between_processes",
            "median",
            "avg",
            "global_avg",
            "max",
            "value",
            "__str__",
            "_get_global_gloo_group",
            "all_gather_cpu",
            "all_gather",
            "reduce_dict",
            "__init__",
            "update",
            "__getattr__",
            "__str__",
            "synchronize_between_processes",
            "add_meter",
            "log_every",
            "get_sha",
            "_run",
            "collate_fn",
            "_max_by_axis",
            "__init__",
            "imgsize",
            "to",
            "to_img_list_single",
            "to_img_list",
            "device",
            "decompose",
            "__repr__",
            "shape",
            "nested_tensor_from_tensor_list",
            "_onnx_nested_tensor_from_tensor_list",
            "setup_for_distributed",
            "print",
            "is_dist_avail_and_initialized",
            "get_world_size",
            "get_rank",
            "is_main_process",
            "save_on_master",
            "init_distributed_mode",
            "accuracy",
            "accuracy_onehot",
            "interpolate",
            "__init__",
            "__call__",
            "inverse_sigmoid",
            "clean_state_dict"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/slio.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/slio.py",
        "imports": [
            "json",
            "pickle",
            "abc.ABCMeta",
            "abc.abstractmethod",
            "pathlib.Path",
            "yaml",
            "yaml.CLoader",
            "yaml.CDumper",
            "yaml.Loader",
            "yaml.Dumper"
        ],
        "classes": [
            {
                "class_name": "BaseFileHandler",
                "methods": [
                    "load_from_fileobj",
                    "dump_to_fileobj",
                    "dump_to_str",
                    "load_from_path",
                    "dump_to_path"
                ]
            },
            {
                "class_name": "JsonHandler",
                "methods": [
                    "load_from_fileobj",
                    "dump_to_fileobj",
                    "dump_to_str"
                ]
            },
            {
                "class_name": "PickleHandler",
                "methods": [
                    "load_from_fileobj",
                    "load_from_path",
                    "dump_to_str",
                    "dump_to_fileobj",
                    "dump_to_path"
                ]
            },
            {
                "class_name": "YamlHandler",
                "methods": [
                    "load_from_fileobj",
                    "dump_to_fileobj",
                    "dump_to_str"
                ]
            }
        ],
        "functions": [
            "load_from_fileobj",
            "dump_to_fileobj",
            "dump_to_str",
            "load_from_path",
            "dump_to_path",
            "load_from_fileobj",
            "dump_to_fileobj",
            "dump_to_str",
            "load_from_fileobj",
            "load_from_path",
            "dump_to_str",
            "dump_to_fileobj",
            "dump_to_path",
            "load_from_fileobj",
            "dump_to_fileobj",
            "dump_to_str",
            "is_str",
            "slload",
            "sldump"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/logger.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/logger.py",
        "imports": [
            "functools",
            "logging",
            "os",
            "sys",
            "termcolor.colored"
        ],
        "classes": [
            {
                "class_name": "_ColorfulFormatter",
                "methods": [
                    "__init__",
                    "formatMessage"
                ]
            }
        ],
        "functions": [
            "__init__",
            "formatMessage",
            "setup_logger",
            "_cached_log_stream"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/visualizer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/visualizer.py",
        "imports": [
            "datetime",
            "os",
            "cv2",
            "matplotlib.pyplot",
            "numpy",
            "torch",
            "matplotlib.transforms",
            "matplotlib.collections.PatchCollection",
            "matplotlib.patches.Polygon",
            "pycocotools.mask"
        ],
        "classes": [
            {
                "class_name": "ColorMap",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "COCOVisualizer",
                "methods": [
                    "__init__",
                    "visualize",
                    "addtgt",
                    "showAnns"
                ]
            }
        ],
        "functions": [
            "renorm",
            "__init__",
            "__call__",
            "rainbow_text",
            "__init__",
            "visualize",
            "addtgt",
            "showAnns"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/util/vl_utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/util/vl_utils.py",
        "imports": [
            "os",
            "random",
            "typing.List",
            "torch"
        ],
        "classes": [],
        "functions": [
            "create_positive_map_from_span",
            "build_captions_and_token_span",
            "build_id2posspan_and_caption"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/transformer_vanilla.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/transformer_vanilla.py",
        "imports": [
            "typing.Optional",
            "torch",
            "torch.nn.functional",
            "torch.Tensor",
            "torch.nn",
            "utils.MLP",
            "utils._get_activation_fn",
            "utils._get_clones",
            "utils.gen_encoder_output_proposals",
            "utils.gen_sineembed_for_position",
            "utils.sigmoid_focal_loss"
        ],
        "classes": [
            {
                "class_name": "TextTransformer",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerEncoderLayer",
                "methods": [
                    "__init__",
                    "with_pos_embed",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "with_pos_embed",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/fuse_modules.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/fuse_modules.py",
        "imports": [
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "timm.models.layers.DropPath"
        ],
        "classes": [
            {
                "class_name": "FeatureResizer",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "BiMultiHeadAttention",
                "methods": [
                    "__init__",
                    "_shape",
                    "_reset_parameters",
                    "forward"
                ]
            },
            {
                "class_name": "BiAttentionBlock",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward",
            "l1norm",
            "l2norm",
            "func_attention",
            "__init__",
            "_shape",
            "_reset_parameters",
            "forward",
            "__init__",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/utils.py",
        "imports": [
            "copy",
            "math",
            "torch",
            "torch.nn.functional",
            "torch.Tensor",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "RandomBoxPerturber",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "MLP",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "ContrastiveEmbed",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": [
            "_get_clones",
            "get_sine_pos_embed",
            "sine_func",
            "gen_encoder_output_proposals",
            "__init__",
            "__call__",
            "sigmoid_focal_loss",
            "__init__",
            "forward",
            "_get_activation_fn",
            "gen_sineembed_for_position",
            "__init__",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/transformer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/transformer.py",
        "imports": [
            "typing.Optional",
            "torch",
            "torch.utils.checkpoint",
            "torch.Tensor",
            "torch.nn",
            "util.misc.inverse_sigmoid",
            "fuse_modules.BiAttentionBlock",
            "ms_deform_attn.MultiScaleDeformableAttention",
            "transformer_vanilla.TransformerEncoderLayer",
            "utils.MLP",
            "utils._get_activation_fn",
            "utils._get_clones",
            "utils.gen_encoder_output_proposals",
            "utils.gen_sineembed_for_position",
            "utils.get_sine_pos_embed"
        ],
        "classes": [
            {
                "class_name": "Transformer",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "get_valid_ratio",
                    "init_ref_points",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerEncoder",
                "methods": [
                    "__init__",
                    "get_reference_points",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerDecoder",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "DeformableTransformerEncoderLayer",
                "methods": [
                    "__init__",
                    "with_pos_embed",
                    "forward_ffn",
                    "forward"
                ]
            },
            {
                "class_name": "DeformableTransformerDecoderLayer",
                "methods": [
                    "__init__",
                    "rm_self_attn_modules",
                    "with_pos_embed",
                    "forward_ffn",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "_reset_parameters",
            "get_valid_ratio",
            "init_ref_points",
            "forward",
            "__init__",
            "get_reference_points",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "with_pos_embed",
            "forward_ffn",
            "forward",
            "__init__",
            "rm_self_attn_modules",
            "with_pos_embed",
            "forward_ffn",
            "forward",
            "build_transformer"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/mlp_loca.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/mlp_loca.py",
        "imports": [
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "MLP",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/__init__.py",
        "imports": [
            "groundingdino.build_groundingdino"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "math",
            "warnings",
            "typing.Optional",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "torch.nn.init.constant_",
            "torch.nn.init.xavier_uniform_",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MultiScaleDeformableAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            },
            {
                "class_name": "MultiScaleDeformableAttention",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "init_weights",
                    "freeze_sampling_offsets",
                    "freeze_attention_weights",
                    "forward"
                ]
            },
            {
                "class_name": "_DummyMetaClass",
                "methods": [
                    "__getattr__"
                ]
            },
            {
                "class_name": "_Dummy",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": [
            "_is_power_of_2",
            "forward",
            "backward",
            "multi_scale_deformable_attn_pytorch",
            "__init__",
            "_reset_parameters",
            "init_weights",
            "freeze_sampling_offsets",
            "freeze_attention_weights",
            "forward",
            "create_dummy_class",
            "__getattr__",
            "__init__",
            "create_dummy_func",
            "_dummy"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/positional_encoding_loca.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/positional_encoding_loca.py",
        "imports": [
            "torch",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "PositionalEncodingsFixed",
                "methods": [
                    "__init__",
                    "_1d_pos_enc",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "_1d_pos_enc",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/bertwarper.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/bertwarper.py",
        "imports": [
            "torch",
            "torch.nn.functional",
            "torch.utils.checkpoint",
            "torch.Tensor",
            "torch.nn",
            "torchvision.ops.boxes.nms",
            "transformers.BertConfig",
            "transformers.BertModel",
            "transformers.BertPreTrainedModel",
            "transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions"
        ],
        "classes": [
            {
                "class_name": "BertModelWarper",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "TextEncoderShell",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "forward",
            "generate_masks_with_special_tokens",
            "generate_masks_with_special_tokens_and_transfer_map"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/matcher.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/matcher.py",
        "imports": [
            "torch",
            "os",
            "torch.nn",
            "scipy.optimize.linear_sum_assignment",
            "util.box_ops.box_cxcywh_to_xyxy",
            "util.box_ops.generalized_box_iou"
        ],
        "classes": [
            {
                "class_name": "HungarianMatcher",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "SimpleMinsumMatcher",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "forward",
            "build_matcher"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/groundingdino.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/groundingdino.py",
        "imports": [
            "copy",
            "typing.List",
            "torchvision.transforms.functional",
            "torchvision.transforms.InterpolationMode",
            "torch",
            "torch.nn.functional",
            "torch.nn",
            "torchvision.ops.boxes.nms",
            "torchvision.ops.roi_align",
            "transformers.AutoTokenizer",
            "transformers.BertModel",
            "transformers.BertTokenizer",
            "transformers.RobertaModel",
            "transformers.RobertaTokenizerFast",
            "transformers.logging",
            "util.box_ops",
            "util.get_tokenlizer",
            "util.misc.NestedTensor",
            "util.misc.accuracy",
            "util.misc.get_world_size",
            "util.misc.interpolate",
            "util.misc.inverse_sigmoid",
            "util.misc.is_dist_avail_and_initialized",
            "util.misc.nested_tensor_from_tensor_list",
            "util.utils.get_phrases_from_posmap",
            "util.visualizer.COCOVisualizer",
            "util.vl_utils.create_positive_map_from_span",
            "registry.MODULE_BUILD_FUNCS",
            "backbone.build_backbone",
            "bertwarper.BertModelWarper",
            "bertwarper.generate_masks_with_special_tokens",
            "bertwarper.generate_masks_with_special_tokens_and_transfer_map",
            "transformer.build_transformer",
            "utils.MLP",
            "utils.ContrastiveEmbed",
            "utils.sigmoid_focal_loss",
            "matcher.build_matcher",
            "numpy",
            "matplotlib.pyplot",
            "matplotlib.patches.Rectangle",
            "util.visualizer.renorm",
            "pycocotools.coco.COCO"
        ],
        "classes": [
            {
                "class_name": "GroundingDINO",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "init_ref_points",
                    "add_exemplar_tokens",
                    "combine_features",
                    "forward",
                    "_set_aux_loss"
                ]
            },
            {
                "class_name": "SetCriterion",
                "methods": [
                    "__init__",
                    "loss_cardinality",
                    "loss_boxes",
                    "token_sigmoid_binary_focal_loss",
                    "_get_src_permutation_idx",
                    "_get_tgt_permutation_idx",
                    "get_loss",
                    "forward"
                ]
            },
            {
                "class_name": "PostProcess",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": [
            "numpy_2_cv2",
            "vis_exemps",
            "__init__",
            "_reset_parameters",
            "init_ref_points",
            "add_exemplar_tokens",
            "combine_features",
            "forward",
            "_set_aux_loss",
            "__init__",
            "loss_cardinality",
            "loss_boxes",
            "token_sigmoid_binary_focal_loss",
            "_get_src_permutation_idx",
            "_get_tgt_permutation_idx",
            "get_loss",
            "forward",
            "__init__",
            "forward",
            "build_groundingdino",
            "create_positive_map",
            "create_positive_map_exemplar"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/transformer_loca.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/transformer_loca.py",
        "imports": [
            "mlp_loca.MLP",
            "torch.nn"
        ],
        "classes": [
            {
                "class_name": "TransformerEncoder",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "TransformerEncoderLayer",
                "methods": [
                    "__init__",
                    "with_emb",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "with_emb",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/setup.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/setup.py",
        "imports": [
            "os",
            "glob",
            "torch",
            "spaces",
            "torch.utils.cpp_extension.CUDA_HOME",
            "torch.utils.cpp_extension.CppExtension",
            "torch.utils.cpp_extension.CUDAExtension",
            "setuptools.find_packages",
            "setuptools.setup"
        ],
        "classes": [],
        "functions": [
            "get_extensions"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/test.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/test.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "time",
            "torch",
            "torch.nn",
            "torch.autograd.gradcheck",
            "functions.ms_deform_attn_func.MSDeformAttnFunction",
            "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch"
        ],
        "classes": [],
        "functions": [
            "check_forward_equal_with_pytorch_double",
            "check_forward_equal_with_pytorch_float",
            "check_gradient_numerical"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/modules/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/modules/__init__.py",
        "imports": [
            "ms_deform_attn.MSDeformAttn"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/modules/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/modules/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "warnings",
            "math",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.nn.init.xavier_uniform_",
            "torch.nn.init.constant_",
            "functions.MSDeformAttnFunction"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttn",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": [
            "_is_power_of_2",
            "__init__",
            "_reset_parameters",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/__init__.py",
        "imports": [
            "ms_deform_attn.MSDeformAttn"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/modules/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "warnings",
            "math",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.nn.init.xavier_uniform_",
            "torch.nn.init.constant_",
            "functions.MSDeformAttnFunction"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttn",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": [
            "_is_power_of_2",
            "__init__",
            "_reset_parameters",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/__init__.py",
        "imports": [
            "ms_deform_attn_func.MSDeformAttnFunction"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/ms_deform_attn_func.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-310/functions/ms_deform_attn_func.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "torch",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            }
        ],
        "functions": [
            "forward",
            "backward",
            "ms_deform_attn_core_pytorch"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/__init__.py",
        "imports": [
            "ms_deform_attn.MSDeformAttn"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/ms_deform_attn.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/modules/ms_deform_attn.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "warnings",
            "math",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.nn.init.xavier_uniform_",
            "torch.nn.init.constant_",
            "functions.MSDeformAttnFunction"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttn",
                "methods": [
                    "__init__",
                    "_reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": [
            "_is_power_of_2",
            "__init__",
            "_reset_parameters",
            "forward"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/__init__.py",
        "imports": [
            "ms_deform_attn_func.MSDeformAttnFunction"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/ms_deform_attn_func.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/build/lib.linux-x86_64-cpython-39/functions/ms_deform_attn_func.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "torch",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            }
        ],
        "functions": [
            "forward",
            "backward",
            "ms_deform_attn_core_pytorch"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/functions/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/functions/__init__.py",
        "imports": [
            "ms_deform_attn_func.MSDeformAttnFunction"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/ops/functions/ms_deform_attn_func.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/ops/functions/ms_deform_attn_func.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.print_function",
            "__future__.division",
            "torch",
            "torch.nn.functional",
            "torch.autograd.Function",
            "torch.autograd.function.once_differentiable",
            "MultiScaleDeformableAttention"
        ],
        "classes": [
            {
                "class_name": "MSDeformAttnFunction",
                "methods": [
                    "forward",
                    "backward"
                ]
            }
        ],
        "functions": [
            "forward",
            "backward",
            "ms_deform_attn_core_pytorch"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/position_encoding.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/position_encoding.py",
        "imports": [
            "math",
            "torch",
            "torch.nn",
            "util.misc.NestedTensor"
        ],
        "classes": [
            {
                "class_name": "PositionEmbeddingSine",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PositionEmbeddingSineHW",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PositionEmbeddingLearned",
                "methods": [
                    "__init__",
                    "reset_parameters",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "reset_parameters",
            "forward",
            "build_position_encoding"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/__init__.py",
        "imports": [
            "backbone.build_backbone"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/backbone.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/backbone.py",
        "imports": [
            "typing.Dict",
            "typing.List",
            "torch",
            "torch.nn.functional",
            "torchvision",
            "torch.nn",
            "torchvision.models._utils.IntermediateLayerGetter",
            "util.misc.NestedTensor",
            "util.misc.clean_state_dict",
            "util.misc.is_main_process",
            "position_encoding.build_position_encoding",
            "swin_transformer.build_swin_transformer"
        ],
        "classes": [
            {
                "class_name": "FrozenBatchNorm2d",
                "methods": [
                    "__init__",
                    "_load_from_state_dict",
                    "forward"
                ]
            },
            {
                "class_name": "BackboneBase",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "Backbone",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "Joiner",
                "methods": [
                    "__init__",
                    "forward"
                ]
            }
        ],
        "functions": [
            "__init__",
            "_load_from_state_dict",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "__init__",
            "forward",
            "build_backbone"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/model/backbone/swin_transformer.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/model/backbone/swin_transformer.py",
        "imports": [
            "numpy",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "torch.utils.checkpoint",
            "timm.models.layers.DropPath",
            "timm.models.layers.to_2tuple",
            "timm.models.layers.trunc_normal_",
            "util.misc.NestedTensor",
            "ipdb"
        ],
        "classes": [
            {
                "class_name": "Mlp",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "WindowAttention",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "SwinTransformerBlock",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PatchMerging",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "BasicLayer",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "PatchEmbed",
                "methods": [
                    "__init__",
                    "forward"
                ]
            },
            {
                "class_name": "SwinTransformer",
                "methods": [
                    "__init__",
                    "_freeze_stages",
                    "forward_raw",
                    "forward",
                    "train"
                ]
            }
        ],
        "functions": [
            "__init__",
            "forward",
            "window_partition",
            "window_reverse",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "_freeze_stages",
            "forward_raw",
            "forward",
            "train",
            "build_swin_transformer"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/coco_eval.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/coco_eval.py",
        "imports": [
            "os",
            "contextlib",
            "copy",
            "numpy",
            "torch",
            "pycocotools.cocoeval.COCOeval",
            "pycocotools.coco.COCO",
            "pycocotools.mask",
            "util.misc.all_gather",
            "ipdb"
        ],
        "classes": [
            {
                "class_name": "CocoEvaluator",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "accumulate",
                    "summarize",
                    "prepare",
                    "prepare_for_coco_detection",
                    "prepare_for_coco_segmentation",
                    "prepare_for_coco_keypoint"
                ]
            }
        ],
        "functions": [
            "__init__",
            "update",
            "synchronize_between_processes",
            "accumulate",
            "summarize",
            "prepare",
            "prepare_for_coco_detection",
            "prepare_for_coco_segmentation",
            "prepare_for_coco_keypoint",
            "convert_to_xywh",
            "merge",
            "create_common_coco_eval",
            "evaluate"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/dataset.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/dataset.py",
        "imports": [
            "__future__.print_function",
            "torch",
            "torchvision.datasets",
            "torch.utils.data.Dataset",
            "PIL.Image",
            "tsv_io.TSVFile",
            "numpy",
            "base64",
            "io"
        ],
        "classes": [
            {
                "class_name": "TSVDataset",
                "methods": [
                    "__init__",
                    "__getitem__",
                    "__len__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__getitem__",
            "__len__"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/random_crop.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/random_crop.py",
        "imports": [
            "PIL",
            "torch",
            "os",
            "torchvision.transforms.functional",
            "numpy",
            "random"
        ],
        "classes": [],
        "functions": [
            "intersect",
            "find_IoU",
            "random_crop"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/odvg.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/odvg.py",
        "imports": [
            "torchvision.datasets.vision.VisionDataset",
            "os.path",
            "typing.Callable",
            "typing.Optional",
            "json",
            "PIL.Image",
            "torch",
            "random",
            "os",
            "sys",
            "datasets.transforms",
            "datasets.sltransform"
        ],
        "classes": [
            {
                "class_name": "ODVGDataset",
                "methods": [
                    "__init__",
                    "load_label_map",
                    "_load_metas",
                    "get_dataset_info",
                    "__getitem__",
                    "__len__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "load_label_map",
            "_load_metas",
            "get_dataset_info",
            "__getitem__",
            "__len__",
            "make_coco_transforms",
            "build_odvg"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/data_util.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/data_util.py",
        "imports": [
            "os",
            "os.path",
            "shutil",
            "time",
            "datetime",
            "torch",
            "util.slconfig.SLConfig",
            "zipfile"
        ],
        "classes": [
            {
                "class_name": "Error",
                "methods": []
            }
        ],
        "functions": [
            "slcopytree",
            "check_and_copy",
            "remove",
            "preparing_dataset"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/__init__.py",
        "imports": [
            "torch.utils.data",
            "torchvision",
            "coco.build",
            "odvg.build_odvg"
        ],
        "classes": [],
        "functions": [
            "get_coco_api_from_dataset",
            "build_dataset"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/coco_panoptic.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/coco_panoptic.py",
        "imports": [
            "json",
            "pathlib.Path",
            "numpy",
            "torch",
            "PIL.Image",
            "panopticapi.utils.rgb2id",
            "util.box_ops.masks_to_boxes",
            "coco.make_coco_transforms"
        ],
        "classes": [
            {
                "class_name": "CocoPanoptic",
                "methods": [
                    "__init__",
                    "__getitem__",
                    "__len__",
                    "get_height_and_width"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__getitem__",
            "__len__",
            "get_height_and_width",
            "build"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/sltransform.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/sltransform.py",
        "imports": [
            "PIL",
            "PIL.Image",
            "torch",
            "os",
            "torchvision.transforms.functional",
            "numpy",
            "random",
            "random_crop.random_crop",
            "util.box_ops.box_cxcywh_to_xyxy",
            "util.box_ops.box_xyxy_to_cxcywh",
            "albumentations"
        ],
        "classes": [
            {
                "class_name": "AdjustContrast",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "AdjustBrightness",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "LightingNoise",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Rotate",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCropDebug",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelectMulti",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Albumentations",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "lighting_noise",
            "__init__",
            "__call__",
            "rotate",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/panoptic_eval.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/panoptic_eval.py",
        "imports": [
            "json",
            "os",
            "util.misc",
            "panopticapi.evaluation.pq_compute"
        ],
        "classes": [
            {
                "class_name": "PanopticEvaluator",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "summarize"
                ]
            }
        ],
        "functions": [
            "__init__",
            "update",
            "synchronize_between_processes",
            "summarize"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/transforms.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/transforms.py",
        "imports": [
            "random",
            "PIL",
            "torch",
            "torchvision.transforms",
            "torchvision.transforms.functional",
            "util.box_ops.box_xyxy_to_cxcywh",
            "util.misc.interpolate"
        ],
        "classes": [
            {
                "class_name": "ResizeDebug",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSizeCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "CenterCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomHorizontalFlip",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomResize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomPad",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelect",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "ToTensor",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "RandomErasing",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Normalize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Compose",
                "methods": [
                    "__init__",
                    "__call__",
                    "__repr__"
                ]
            }
        ],
        "functions": [
            "crop",
            "hflip",
            "resize",
            "get_size_with_aspect_ratio",
            "get_size",
            "pad",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__repr__"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/coco.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/coco.py",
        "imports": [
            "os",
            "sys",
            "torchvision.datasets.vision.VisionDataset",
            "json",
            "pathlib.Path",
            "random",
            "os",
            "typing.Any",
            "typing.Callable",
            "typing.List",
            "typing.Optional",
            "typing.Tuple",
            "PIL.Image",
            "torch",
            "torch.utils.data",
            "torchvision",
            "pycocotools.mask",
            "data_util.preparing_dataset",
            ".transforms",
            "util.box_ops.box_cxcywh_to_xyxy",
            "util.box_ops.box_iou",
            "torch",
            "datasets.sltransform"
        ],
        "classes": [
            {
                "class_name": "label2compat",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "label_compat2onehot",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "box_label_catter",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelectBoxlabels",
                "methods": [
                    "__init__",
                    "get_state",
                    "set_state",
                    "sample_for_pred_first_item",
                    "sample_for_pred_random_item",
                    "sample_for_pred_last_item",
                    "sample_for_pred_stop_sign",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomDrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "BboxPertuber",
                "methods": [
                    "__init__",
                    "generate_pertube_samples",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomCutout",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "RandomSelectBoxes",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "MaskCrop",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "CocoDetection",
                "methods": [
                    "__init__",
                    "change_hack_attr",
                    "get_hack",
                    "_load_image",
                    "__getitem__"
                ]
            },
            {
                "class_name": "ConvertCocoPolysToMask",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "get_state",
            "set_state",
            "sample_for_pred_first_item",
            "sample_for_pred_random_item",
            "sample_for_pred_last_item",
            "sample_for_pred_stop_sign",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "generate_pertube_samples",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "label2onehot",
            "__init__",
            "__call__",
            "__init__",
            "change_hack_attr",
            "get_hack",
            "_load_image",
            "__getitem__",
            "convert_coco_poly_to_mask",
            "__init__",
            "__call__",
            "make_coco_transforms",
            "get_aux_target_hacks_list",
            "build"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/datasets/cocogrounding_eval.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/datasets/cocogrounding_eval.py",
        "imports": [
            "contextlib",
            "copy",
            "os",
            "numpy",
            "pycocotools.mask",
            "torch",
            "pycocotools.coco.COCO",
            "pycocotools.cocoeval.COCOeval",
            "groundingdino.util.misc.all_gather"
        ],
        "classes": [
            {
                "class_name": "CocoGroundingEvaluator",
                "methods": [
                    "__init__",
                    "update",
                    "synchronize_between_processes",
                    "accumulate",
                    "summarize",
                    "prepare",
                    "prepare_for_coco_detection",
                    "prepare_for_coco_segmentation",
                    "prepare_for_coco_keypoint"
                ]
            }
        ],
        "functions": [
            "__init__",
            "update",
            "synchronize_between_processes",
            "accumulate",
            "summarize",
            "prepare",
            "prepare_for_coco_detection",
            "prepare_for_coco_segmentation",
            "prepare_for_coco_keypoint",
            "convert_to_xywh",
            "merge",
            "create_common_coco_eval",
            "evaluate"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/config/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/config/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/visualgd/config/cfg_handler.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/config/cfg_handler.py",
        "imports": [
            ".cfg_fsc147",
            "util.slconfig.SLConfig"
        ],
        "classes": [
            {
                "class_name": "ConfigurationHandler",
                "methods": [
                    "get_config",
                    "__get_default_cfg",
                    "__get_cfg_from_file"
                ]
            }
        ],
        "functions": [
            "get_config",
            "__get_default_cfg",
            "__get_cfg_from_file"
        ]
    },
    "anylabeling/services/auto_labeling/visualgd/config/cfg_fsc147.py": {
        "file_name": "/anylabeling/services/auto_labeling/visualgd/config/cfg_fsc147.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/__init__.py",
        "imports": [
            "box.*",
            "general.*",
            "points_conversion.*",
            "queue",
            "threading",
            "time",
            "queue"
        ],
        "classes": [
            {
                "class_name": "TimeoutContext",
                "methods": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "run"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__enter__",
            "__exit__",
            "run",
            "wrapper"
        ]
    },
    "anylabeling/services/auto_labeling/utils/general.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/general.py",
        "imports": [
            "cv2",
            "math",
            "numpy"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "calculate_rotation_theta",
            "letterbox",
            "sigmoid",
            "softmax",
            "refine_contours",
            "point_in_bbox"
        ]
    },
    "anylabeling/services/auto_labeling/utils/box.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/box.py",
        "imports": [
            "numpy",
            "points_conversion.xywh2xyxy"
        ],
        "classes": [],
        "functions": [
            "box_area",
            "box_iou",
            "numpy_nms",
            "numpy_nms_rotated",
            "batch_probiou",
            "_get_covariance_matrix",
            "non_max_suppression_v5",
            "non_max_suppression_v8"
        ]
    },
    "anylabeling/services/auto_labeling/utils/points_conversion.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/points_conversion.py",
        "imports": [
            "cv2",
            "numpy",
            "general.refine_contours"
        ],
        "classes": [],
        "functions": [
            "cxcywh2xyxy",
            "xyxy2xywh",
            "xywh2xyxy",
            "xywhn2xyxy",
            "xyxy2xywhn",
            "xyn2xy",
            "xywh2ltwh",
            "xyxy2ltwh",
            "ltwh2xywh",
            "ltwh2xyxy",
            "cxywh2xyxy",
            "xywhr2xyxyxyxy",
            "rbox2poly",
            "denormalize_bbox",
            "rescale_box",
            "rescale_box_and_landmark",
            "rescale_tlwh",
            "scale_boxes",
            "scale_masks",
            "scale_coords",
            "clip_coords",
            "clip_boxes",
            "masks2segments",
            "tlwh_to_xyxy",
            "xyxy_to_tlwh"
        ]
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/rec_postprocess.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/rec_postprocess.py",
        "imports": [
            "numpy",
            "re"
        ],
        "classes": [
            {
                "class_name": "BaseRecLabelDecode",
                "methods": [
                    "__init__",
                    "pred_reverse",
                    "add_special_char",
                    "decode",
                    "get_ignored_tokens"
                ]
            },
            {
                "class_name": "CTCLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "DistillationCTCLabelDecode",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "AttnLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx"
                ]
            },
            {
                "class_name": "RFLLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx"
                ]
            },
            {
                "class_name": "SEEDLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx",
                    "decode",
                    "__call__"
                ]
            },
            {
                "class_name": "SRNLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "decode",
                    "add_special_char",
                    "get_ignored_tokens",
                    "get_beg_end_flag_idx"
                ]
            },
            {
                "class_name": "SARLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens"
                ]
            },
            {
                "class_name": "SATRNLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__",
                    "get_ignored_tokens"
                ]
            },
            {
                "class_name": "DistillationSARLabelDecode",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "PRENLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char",
                    "decode",
                    "__call__"
                ]
            },
            {
                "class_name": "NRTRLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char",
                    "decode"
                ]
            },
            {
                "class_name": "ViTSTRLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "ABINetLabelDecode",
                "methods": [
                    "__init__",
                    "__call__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "SPINLabelDecode",
                "methods": [
                    "__init__",
                    "add_special_char"
                ]
            },
            {
                "class_name": "CANLabelDecode",
                "methods": [
                    "__init__",
                    "decode",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "pred_reverse",
            "add_special_char",
            "decode",
            "get_ignored_tokens",
            "__init__",
            "__call__",
            "add_special_char",
            "__init__",
            "__call__",
            "__init__",
            "add_special_char",
            "decode",
            "__call__",
            "get_ignored_tokens",
            "get_beg_end_flag_idx",
            "__init__",
            "add_special_char",
            "decode",
            "__call__",
            "get_ignored_tokens",
            "get_beg_end_flag_idx",
            "__init__",
            "add_special_char",
            "get_ignored_tokens",
            "get_beg_end_flag_idx",
            "decode",
            "__call__",
            "__init__",
            "__call__",
            "decode",
            "add_special_char",
            "get_ignored_tokens",
            "get_beg_end_flag_idx",
            "__init__",
            "add_special_char",
            "decode",
            "__call__",
            "get_ignored_tokens",
            "__init__",
            "add_special_char",
            "decode",
            "__call__",
            "get_ignored_tokens",
            "__init__",
            "__call__",
            "__init__",
            "add_special_char",
            "decode",
            "__call__",
            "__init__",
            "__call__",
            "add_special_char",
            "decode",
            "__init__",
            "__call__",
            "add_special_char",
            "__init__",
            "__call__",
            "add_special_char",
            "__init__",
            "add_special_char",
            "__init__",
            "decode",
            "__call__"
        ]
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/operators.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/operators.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.division",
            "__future__.print_function",
            "__future__.unicode_literals",
            "sys",
            "six",
            "cv2",
            "numpy",
            "math",
            "PIL.Image",
            "PIL.Image",
            "PIL.Image",
            "fasttext"
        ],
        "classes": [
            {
                "class_name": "DecodeImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "NormalizeImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "ToCHWImage",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Fasttext",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "KeepKeys",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Pad",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "Resize",
                "methods": [
                    "__init__",
                    "resize_image",
                    "__call__"
                ]
            },
            {
                "class_name": "DetResizeForTest",
                "methods": [
                    "__init__",
                    "__call__",
                    "image_padding",
                    "resize_image_type1",
                    "resize_image_type0",
                    "resize_image_type2"
                ]
            },
            {
                "class_name": "E2EResizeForTest",
                "methods": [
                    "__init__",
                    "__call__",
                    "resize_image_for_totaltext",
                    "resize_image"
                ]
            },
            {
                "class_name": "KieResize",
                "methods": [
                    "__init__",
                    "__call__",
                    "resize_image",
                    "resize_boxes"
                ]
            },
            {
                "class_name": "SRResize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "ResizeNormalize",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "GrayImageChannelFormat",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "resize_image",
            "__call__",
            "__init__",
            "__call__",
            "image_padding",
            "resize_image_type1",
            "resize_image_type0",
            "resize_image_type2",
            "__init__",
            "__call__",
            "resize_image_for_totaltext",
            "resize_image",
            "__init__",
            "__call__",
            "resize_image",
            "resize_boxes",
            "__init__",
            "__call__",
            "__init__",
            "__call__",
            "__init__",
            "__call__"
        ]
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/text_system.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/text_system.py",
        "imports": [
            "os",
            "tkinter.N",
            "copy",
            "operators.*",
            "db_postprocess.*",
            "rec_postprocess.*",
            "cls_postprocess.*"
        ],
        "classes": [
            {
                "class_name": "TextDetector",
                "methods": [
                    "__init__",
                    "order_points_clockwise",
                    "clip_det_res",
                    "filter_tag_det_res",
                    "filter_tag_det_res_only_clip",
                    "transform",
                    "__call__"
                ]
            },
            {
                "class_name": "TextRecognizer",
                "methods": [
                    "__init__",
                    "resize_norm_img",
                    "resize_norm_img_vl",
                    "resize_norm_img_srn",
                    "srn_other_inputs",
                    "process_image_srn",
                    "resize_norm_img_sar",
                    "resize_norm_img_spin",
                    "resize_norm_img_svtr",
                    "resize_norm_img_abinet",
                    "norm_img_can",
                    "__call__"
                ]
            },
            {
                "class_name": "TextClassifier",
                "methods": [
                    "__init__",
                    "resize_norm_img",
                    "__call__"
                ]
            },
            {
                "class_name": "TextSystem",
                "methods": [
                    "__init__",
                    "draw_crop_rec_res",
                    "normalize_custom_detection_boxes",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "order_points_clockwise",
            "clip_det_res",
            "filter_tag_det_res",
            "filter_tag_det_res_only_clip",
            "transform",
            "__call__",
            "__init__",
            "resize_norm_img",
            "resize_norm_img_vl",
            "resize_norm_img_srn",
            "srn_other_inputs",
            "process_image_srn",
            "resize_norm_img_sar",
            "resize_norm_img_spin",
            "resize_norm_img_svtr",
            "resize_norm_img_abinet",
            "norm_img_can",
            "__call__",
            "__init__",
            "resize_norm_img",
            "__call__",
            "__init__",
            "draw_crop_rec_res",
            "normalize_custom_detection_boxes",
            "__call__",
            "build_post_process",
            "create_operators",
            "create_predictor",
            "get_rotate_crop_image",
            "get_minarea_rect_crop",
            "sorted_boxes"
        ]
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/db_postprocess.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/db_postprocess.py",
        "imports": [
            "__future__.absolute_import",
            "__future__.division",
            "__future__.print_function",
            "numpy",
            "cv2",
            "shapely.geometry.Polygon",
            "pyclipper"
        ],
        "classes": [
            {
                "class_name": "DBPostProcess",
                "methods": [
                    "__init__",
                    "polygons_from_bitmap",
                    "boxes_from_bitmap",
                    "unclip",
                    "get_mini_boxes",
                    "box_score_fast",
                    "box_score_slow",
                    "__call__"
                ]
            },
            {
                "class_name": "DistillationDBPostProcess",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "polygons_from_bitmap",
            "boxes_from_bitmap",
            "unclip",
            "get_mini_boxes",
            "box_score_fast",
            "box_score_slow",
            "__call__",
            "__init__",
            "__call__"
        ]
    },
    "anylabeling/services/auto_labeling/utils/ppocr_utils/cls_postprocess.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/ppocr_utils/cls_postprocess.py",
        "imports": [],
        "classes": [
            {
                "class_name": "ClsPostProcess",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/prediction.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/prediction.py",
        "imports": [
            "copy",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Union",
            "numpy",
            "PIL.Image",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.ObjectAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.read_image_as_pil",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.visualize_object_predictions",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "fiftyone",
            "fiftyone"
        ],
        "classes": [
            {
                "class_name": "PredictionScore",
                "methods": [
                    "__init__",
                    "is_greater_than_threshold",
                    "__repr__"
                ]
            },
            {
                "class_name": "ObjectPrediction",
                "methods": [
                    "__init__",
                    "get_shifted_object_prediction",
                    "to_coco_prediction",
                    "to_fiftyone_detection",
                    "__repr__"
                ]
            },
            {
                "class_name": "PredictionResult",
                "methods": [
                    "__init__",
                    "export_visuals",
                    "to_coco_annotations",
                    "to_coco_predictions",
                    "to_imantics_annotations",
                    "to_fiftyone_detections"
                ]
            }
        ],
        "functions": [
            "__init__",
            "is_greater_than_threshold",
            "__repr__",
            "__init__",
            "get_shifted_object_prediction",
            "to_coco_prediction",
            "to_fiftyone_detection",
            "__repr__",
            "__init__",
            "export_visuals",
            "to_coco_annotations",
            "to_coco_predictions",
            "to_imantics_annotations",
            "to_fiftyone_detections"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/__init__.py",
        "imports": [
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Category",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.auto_model.AutoDetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/auto_model.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/auto_model.py",
        "imports": [
            "typing.Any",
            "typing.Dict",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.import_model_class"
        ],
        "classes": [
            {
                "class_name": "AutoDetectionModel",
                "methods": [
                    "from_pretrained"
                ]
            }
        ],
        "functions": [
            "from_pretrained"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/slicing.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/slicing.py",
        "imports": [
            "concurrent.futures",
            "logging",
            "os",
            "time",
            "pathlib.Path",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Sequence",
            "typing.Union",
            "numpy",
            "PIL.Image",
            "shapely.errors.TopologicalError",
            "tqdm.tqdm",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.Coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoImage",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.create_coco_dict",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.read_image_as_pil",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.load_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json"
        ],
        "classes": [
            {
                "class_name": "SlicedImage",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "SliceImageResult",
                "methods": [
                    "__init__",
                    "add_sliced_image",
                    "sliced_image_list",
                    "images",
                    "coco_images",
                    "starting_pixels",
                    "filenames",
                    "__getitem__",
                    "__len__"
                ]
            }
        ],
        "functions": [
            "get_slice_bboxes",
            "annotation_inside_slice",
            "process_coco_annotations",
            "__init__",
            "__init__",
            "add_sliced_image",
            "sliced_image_list",
            "images",
            "coco_images",
            "starting_pixels",
            "filenames",
            "__getitem__",
            "_prepare_ith_dict",
            "__len__",
            "slice_image",
            "_export_single_slice",
            "slice_coco",
            "calc_ratio_and_slice",
            "calc_resolution_factor",
            "calc_aspect_ratio_orientation",
            "calc_slice_and_overlap_params",
            "get_resolution_selector",
            "get_auto_slice_params",
            "shift_bboxes",
            "shift_masks"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/annotation.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/annotation.py",
        "imports": [
            "copy",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bbox_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bool_mask_from_coco_segmentation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_coco_segmentation_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.ShapelyAnnotation",
            "pycocotools.mask",
            "imantics"
        ],
        "classes": [
            {
                "class_name": "BoundingBox",
                "methods": [
                    "__init__",
                    "shift_amount",
                    "area",
                    "get_expanded_box",
                    "to_xywh",
                    "to_coco_bbox",
                    "to_xyxy",
                    "to_voc_bbox",
                    "get_shifted_box",
                    "__repr__"
                ]
            },
            {
                "class_name": "Category",
                "methods": [
                    "__init__",
                    "__repr__"
                ]
            },
            {
                "class_name": "Mask",
                "methods": [
                    "from_float_mask",
                    "from_coco_segmentation",
                    "__init__",
                    "encode_bool_mask",
                    "decode_bool_mask",
                    "bool_mask",
                    "shape",
                    "full_shape",
                    "shift_amount",
                    "get_shifted_mask",
                    "to_coco_segmentation"
                ]
            },
            {
                "class_name": "ObjectAnnotation",
                "methods": [
                    "from_bool_mask",
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "from_coco_annotation_dict",
                    "from_shapely_annotation",
                    "from_imantics_annotation",
                    "__init__",
                    "to_coco_annotation",
                    "to_coco_prediction",
                    "to_shapely_annotation",
                    "to_imantics_annotation",
                    "deepcopy",
                    "get_empty_mask",
                    "get_shifted_object_annotation",
                    "__repr__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "shift_amount",
            "area",
            "get_expanded_box",
            "to_xywh",
            "to_coco_bbox",
            "to_xyxy",
            "to_voc_bbox",
            "get_shifted_box",
            "__repr__",
            "__init__",
            "__repr__",
            "from_float_mask",
            "from_coco_segmentation",
            "__init__",
            "encode_bool_mask",
            "decode_bool_mask",
            "bool_mask",
            "shape",
            "full_shape",
            "shift_amount",
            "get_shifted_mask",
            "to_coco_segmentation",
            "from_bool_mask",
            "from_coco_segmentation",
            "from_coco_bbox",
            "from_coco_annotation_dict",
            "from_shapely_annotation",
            "from_imantics_annotation",
            "__init__",
            "to_coco_annotation",
            "to_coco_prediction",
            "to_shapely_annotation",
            "to_imantics_annotation",
            "deepcopy",
            "get_empty_mask",
            "get_shifted_object_annotation",
            "__repr__"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/cli.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/cli.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.__version__",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict_fiftyone",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco2fiftyone.main",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco2yolov5.main",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco_error_analysis.analyse",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.coco_evaluation.evaluate",
            "anylabeling.services.auto_labeling.utils.sahi.scripts.slice_coco.slice",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.print_enviroment_info"
        ],
        "classes": [],
        "functions": [
            "app"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/predict.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/predict.py",
        "imports": [
            "logging",
            "os",
            "time",
            "typing.List",
            "typing.Optional",
            "functools.cmp_to_key",
            "numpy",
            "tqdm.tqdm",
            "anylabeling.services.auto_labeling.utils.sahi.auto_model.AutoDetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.GreedyNMMPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.LSNMSPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.NMMPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.NMSPostprocess",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.combine.PostprocessPredictions",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.PredictionResult",
            "anylabeling.services.auto_labeling.utils.sahi.slicing.slice_image",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.Coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.CocoImage",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.IMAGE_EXTENSIONS",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.VIDEO_EXTENSIONS",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.crop_object_predictions",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.cv2",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_video_reader",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.read_image_as_pil",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.visualize_object_predictions",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.increment_path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.list_files",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_pickle",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "sahi.utils.fiftyone.create_fiftyone_dataset_from_coco_file",
            "sahi.utils.fiftyone.fo"
        ],
        "classes": [],
        "functions": [
            "get_prediction",
            "get_sliced_prediction",
            "bbox_sort",
            "agg_prediction",
            "predict",
            "predict_fiftyone"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco_evaluation.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco_evaluation.py",
        "imports": [
            "itertools",
            "json",
            "warnings",
            "collections.OrderedDict",
            "pathlib.Path",
            "typing.List",
            "typing.Union",
            "fire",
            "numpy",
            "terminaltables.AsciiTable",
            "pycocotools.coco.COCO",
            "pycocotools.cocoeval.COCOeval"
        ],
        "classes": [],
        "functions": [
            "_cocoeval_summarize",
            "evaluate_core",
            "evaluate"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco2yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco2yolov5.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.utils.coco.Coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.increment_path"
        ],
        "classes": [],
        "functions": [
            "main"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco2fiftyone.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco2fiftyone.py",
        "imports": [
            "time",
            "pathlib.Path",
            "typing.List",
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.load_json",
            "fiftyone.utils.coco.add_coco_labels",
            "sahi.utils.fiftyone.create_fiftyone_dataset_from_coco_file",
            "sahi.utils.fiftyone.fo"
        ],
        "classes": [],
        "functions": [
            "main"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/slice_coco.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/slice_coco.py",
        "imports": [
            "os",
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.slicing.slice_coco",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json"
        ],
        "classes": [],
        "functions": [
            "slice"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/coco_error_analysis.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/coco_error_analysis.py",
        "imports": [
            "copy",
            "os",
            "multiprocessing.Pool",
            "pathlib.Path",
            "typing.List",
            "fire",
            "numpy",
            "matplotlib.pyplot",
            "matplotlib.pyplot",
            "matplotlib.pyplot",
            "matplotlib.pyplot",
            "pycocotools.coco.COCO",
            "pycocotools.cocoeval.COCOeval",
            "matplotlib.pyplot"
        ],
        "classes": [],
        "functions": [
            "_makeplot",
            "_autolabel",
            "_makebarplot",
            "_get_gt_area_group_numbers",
            "_make_gt_area_group_numbers_plot",
            "_make_gt_area_histogram_plot",
            "_analyze_individual_category",
            "_analyse_results",
            "analyse"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/predict_fiftyone.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/predict_fiftyone.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict_fiftyone"
        ],
        "classes": [],
        "functions": [
            "main"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/scripts/predict.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/scripts/predict.py",
        "imports": [
            "fire",
            "anylabeling.services.auto_labeling.utils.sahi.predict.predict"
        ],
        "classes": [],
        "functions": [
            "main"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/yolonas.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/yolonas.py",
        "imports": [
            "urllib.request",
            "os.path",
            "pathlib.Path",
            "typing.Optional"
        ],
        "classes": [
            {
                "class_name": "YoloNasTestConstants",
                "methods": []
            }
        ],
        "functions": [
            "download_yolonas_s_model",
            "download_yolonas_m_model",
            "download_yolonas_l_model"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/yolov8.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/yolov8.py",
        "imports": [
            "urllib.request",
            "os.path",
            "pathlib.Path",
            "typing.Optional"
        ],
        "classes": [
            {
                "class_name": "Yolov8TestConstants",
                "methods": []
            }
        ],
        "functions": [
            "download_yolov8n_model",
            "download_yolov8s_model",
            "download_yolov8m_model",
            "download_yolov8l_model",
            "download_yolov8x_model"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/mmdet.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/mmdet.py",
        "imports": [
            "shutil",
            "sys",
            "urllib.request",
            "importlib.import_module",
            "os.path",
            "pathlib.Path",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.download_from_url",
            "mmdet",
            "mmdet.__version__",
            "mmengine.Config"
        ],
        "classes": [
            {
                "class_name": "MmdetTestConstants",
                "methods": []
            }
        ],
        "functions": [
            "mmdet_version_as_integer",
            "download_mmdet_cascade_mask_rcnn_model",
            "download_mmdet_retinanet_model",
            "download_mmdet_yolox_tiny_model",
            "download_mmdet_config"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/torch.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/torch.py",
        "imports": [
            "os",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.is_available",
            "torch"
        ],
        "classes": [],
        "functions": [
            "empty_cuda_cache",
            "to_float_tensor",
            "torch_to_numpy",
            "is_torch_cuda_available",
            "select_device"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/versions.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/versions.py",
        "imports": [
            "sys",
            "importlib_metadata",
            "importlib.metadata"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/yolov5.py",
        "imports": [
            "urllib.request",
            "os.path",
            "pathlib.Path",
            "typing.Optional"
        ],
        "classes": [
            {
                "class_name": "Yolov5TestConstants",
                "methods": []
            }
        ],
        "functions": [
            "download_yolov5n_model",
            "download_yolov5s6_model"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/shapely.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/shapely.py",
        "imports": [
            "typing.List",
            "shapely.geometry.CAP_STYLE",
            "shapely.geometry.JOIN_STYLE",
            "shapely.geometry.MultiPolygon",
            "shapely.geometry.Polygon",
            "shapely.geometry.box"
        ],
        "classes": [
            {
                "class_name": "ShapelyAnnotation",
                "methods": [
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "__init__",
                    "multipolygon",
                    "area",
                    "multipolygon",
                    "to_list",
                    "to_coco_segmentation",
                    "to_opencv_contours",
                    "to_xywh",
                    "to_coco_bbox",
                    "to_xyxy",
                    "to_voc_bbox",
                    "get_convex_hull_shapely_annotation",
                    "get_simplified_shapely_annotation",
                    "get_buffered_shapely_annotation",
                    "get_intersection"
                ]
            }
        ],
        "functions": [
            "get_shapely_box",
            "get_shapely_multipolygon",
            "get_bbox_from_shapely",
            "from_coco_segmentation",
            "from_coco_bbox",
            "__init__",
            "multipolygon",
            "area",
            "multipolygon",
            "to_list",
            "to_coco_segmentation",
            "to_opencv_contours",
            "to_xywh",
            "to_coco_bbox",
            "to_xyxy",
            "to_voc_bbox",
            "get_convex_hull_shapely_annotation",
            "get_simplified_shapely_annotation",
            "get_buffered_shapely_annotation",
            "get_intersection"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/sparseyolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/sparseyolov5.py",
        "imports": [],
        "classes": [
            {
                "class_name": "Yolov5TestConstants",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/detectron2.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/detectron2.py",
        "imports": [
            "pathlib.Path"
        ],
        "classes": [
            {
                "class_name": "Detectron2TestConstants",
                "methods": []
            }
        ],
        "functions": [
            "export_cfg_as_yaml"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/import_utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/import_utils.py",
        "imports": [
            "importlib.util",
            "logging",
            "os",
            "importlib.metadata",
            "packaging.version",
            "packaging.version"
        ],
        "classes": [],
        "functions": [
            "get_package_info",
            "print_enviroment_info",
            "is_available",
            "check_requirements",
            "check_package_minimum_version",
            "ensure_package_minimum_version"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/compatibility.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/compatibility.py",
        "imports": [],
        "classes": [],
        "functions": [
            "fix_shift_amount_list",
            "fix_full_shape_list"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/file.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/file.py",
        "imports": [
            "glob",
            "json",
            "ntpath",
            "os",
            "pickle",
            "re",
            "urllib.request",
            "zipfile",
            "pathlib.Path",
            "typing.Optional",
            "numpy",
            "sys"
        ],
        "classes": [
            {
                "class_name": "NumpyEncoder",
                "methods": [
                    "default"
                ]
            }
        ],
        "functions": [
            "unzip",
            "save_json",
            "default",
            "load_json",
            "list_files",
            "list_files_recursively",
            "get_base_filename",
            "get_file_extension",
            "load_pickle",
            "save_pickle",
            "import_model_class",
            "increment_path",
            "download_from_url",
            "is_colab"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/huggingface.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/huggingface.py",
        "imports": [],
        "classes": [
            {
                "class_name": "HuggingfaceTestConstants",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/coco.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/coco.py",
        "imports": [
            "copy",
            "logging",
            "os",
            "threading",
            "collections.Counter",
            "collections.defaultdict",
            "dataclasses.dataclass",
            "multiprocessing.Pool",
            "pathlib.Path",
            "threading.Lock",
            "threading.Thread",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Set",
            "typing.Union",
            "numpy",
            "tqdm.tqdm",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.is_colab",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.load_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.save_json",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.ShapelyAnnotation",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.box",
            "anylabeling.services.auto_labeling.utils.sahi.utils.shapely.get_shapely_multipolygon",
            "yaml",
            "sahi.slicing.annotation_inside_slice",
            "shutil",
            "yaml",
            "yaml"
        ],
        "classes": [
            {
                "class_name": "CocoCategory",
                "methods": [
                    "__init__",
                    "from_coco_category",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoAnnotation",
                "methods": [
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "from_coco_annotation_dict",
                    "from_shapely_annotation",
                    "__init__",
                    "get_sliced_coco_annotation",
                    "area",
                    "bbox",
                    "segmentation",
                    "category_id",
                    "category_id",
                    "image_id",
                    "image_id",
                    "category_name",
                    "category_name",
                    "iscrowd",
                    "json",
                    "serialize",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoPrediction",
                "methods": [
                    "from_coco_segmentation",
                    "from_coco_bbox",
                    "from_coco_annotation_dict",
                    "__init__",
                    "json",
                    "serialize",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoVidAnnotation",
                "methods": [
                    "__init__",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoImage",
                "methods": [
                    "from_coco_image_dict",
                    "__init__",
                    "add_annotation",
                    "add_prediction",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoVidImage",
                "methods": [
                    "__init__",
                    "from_coco_image",
                    "add_annotation",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "CocoVideo",
                "methods": [
                    "__init__",
                    "add_image",
                    "add_cocovidimage",
                    "json",
                    "__repr__"
                ]
            },
            {
                "class_name": "Coco",
                "methods": [
                    "__init__",
                    "add_categories_from_coco_category_list",
                    "add_category",
                    "add_image",
                    "update_categories",
                    "merge",
                    "from_coco_dict_or_path",
                    "json_categories",
                    "category_mapping",
                    "json",
                    "prediction_array",
                    "stats",
                    "calculate_stats",
                    "split_coco_as_train_val",
                    "export_as_yolov5",
                    "get_subsampled_coco",
                    "get_upsampled_coco",
                    "get_area_filtered_coco",
                    "get_coco_with_clipped_bboxes"
                ]
            },
            {
                "class_name": "DatasetClassCounts",
                "methods": [
                    "frequencies",
                    "__add__"
                ]
            },
            {
                "class_name": "CocoVid",
                "methods": [
                    "__init__",
                    "add_categories_from_coco_category_list",
                    "add_category",
                    "json_categories",
                    "category_mapping",
                    "add_video",
                    "json"
                ]
            }
        ],
        "functions": [
            "__init__",
            "from_coco_category",
            "json",
            "__repr__",
            "from_coco_segmentation",
            "from_coco_bbox",
            "from_coco_annotation_dict",
            "from_shapely_annotation",
            "__init__",
            "get_sliced_coco_annotation",
            "area",
            "bbox",
            "segmentation",
            "category_id",
            "category_id",
            "image_id",
            "image_id",
            "category_name",
            "category_name",
            "iscrowd",
            "json",
            "serialize",
            "__repr__",
            "from_coco_segmentation",
            "from_coco_bbox",
            "from_coco_annotation_dict",
            "__init__",
            "json",
            "serialize",
            "__repr__",
            "__init__",
            "json",
            "__repr__",
            "from_coco_image_dict",
            "__init__",
            "add_annotation",
            "add_prediction",
            "json",
            "__repr__",
            "__init__",
            "from_coco_image",
            "add_annotation",
            "json",
            "__repr__",
            "__init__",
            "add_image",
            "add_cocovidimage",
            "json",
            "__repr__",
            "__init__",
            "add_categories_from_coco_category_list",
            "add_category",
            "add_image",
            "update_categories",
            "merge",
            "from_coco_dict_or_path",
            "fill_image_id_set",
            "json_categories",
            "category_mapping",
            "json",
            "prediction_array",
            "stats",
            "calculate_stats",
            "split_coco_as_train_val",
            "export_as_yolov5",
            "get_subsampled_coco",
            "get_upsampled_coco",
            "get_area_filtered_coco",
            "get_coco_with_clipped_bboxes",
            "export_yolov5_images_and_txts_from_coco_object",
            "export_single_yolov5_image_and_corresponding_txt",
            "update_categories",
            "update_categories_from_file",
            "merge",
            "merge_from_list",
            "merge_from_file",
            "get_imageid2annotationlist_mapping",
            "create_coco_dict",
            "create_coco_prediction_array",
            "add_bbox_and_area_to_coco",
            "frequencies",
            "__add__",
            "count_images_with_category",
            "__init__",
            "add_categories_from_coco_category_list",
            "add_category",
            "json_categories",
            "category_mapping",
            "add_video",
            "json",
            "remove_invalid_coco_results",
            "export_coco_as_yolov5",
            "export_coco_as_yolov5_via_yml"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/fiftyone.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/fiftyone.py",
        "imports": [
            "os",
            "subprocess",
            "sys",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.is_available",
            "fiftyone",
            "fiftyone.utils.coco.COCODetectionDatasetImporter",
            "fiftyone.utils.coco._get_matching_image_ids",
            "fiftyone.utils.coco.load_coco_detection_annotations"
        ],
        "classes": [
            {
                "class_name": "COCODetectionDatasetImporter",
                "methods": [
                    "setup"
                ]
            }
        ],
        "functions": [
            "setup",
            "create_fiftyone_dataset_from_coco_file",
            "launch_fiftyone_app"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/cv.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/cv.py",
        "imports": [
            "copy",
            "os",
            "random",
            "time",
            "typing.List",
            "typing.Optional",
            "typing.Union",
            "cv2",
            "numpy",
            "requests",
            "PIL.Image",
            "anylabeling.services.auto_labeling.utils.sahi.utils.file.Path",
            "skimage.io",
            "skimage.io",
            "IPython"
        ],
        "classes": [
            {
                "class_name": "Colors",
                "methods": [
                    "__init__",
                    "__call__",
                    "hex2rgb"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "hex2rgb",
            "crop_object_predictions",
            "convert_image_to",
            "read_large_image",
            "read_image",
            "read_image_as_pil",
            "select_random_color",
            "apply_color_mask",
            "get_video_reader",
            "read_video_frame",
            "visualize_prediction",
            "visualize_object_predictions",
            "get_coco_segmentation_from_bool_mask",
            "get_bool_mask_from_coco_segmentation",
            "get_bbox_from_bool_mask",
            "normalize_numpy_image",
            "ipython_display",
            "exif_transpose"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/utils/torchvision.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/utils/torchvision.py",
        "imports": [
            "packaging.version",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.get_package_info",
            "torchvision"
        ],
        "classes": [
            {
                "class_name": "TorchVisionTestConstants",
                "methods": []
            }
        ],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/utils.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/utils.py",
        "imports": [
            "collections.abc.Sequence",
            "typing.List",
            "typing.Union",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Category",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "torch"
        ],
        "classes": [
            {
                "class_name": "ObjectPredictionList",
                "methods": [
                    "__init__",
                    "__getitem__",
                    "__setitem__",
                    "__len__",
                    "__str__",
                    "extend",
                    "totensor",
                    "tonumpy",
                    "tolist"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__getitem__",
            "__setitem__",
            "__len__",
            "__str__",
            "extend",
            "totensor",
            "tonumpy",
            "tolist",
            "object_prediction_list_to_torch",
            "object_prediction_list_to_numpy",
            "calculate_box_union",
            "calculate_area",
            "calculate_intersection_area",
            "calculate_bbox_iou",
            "calculate_bbox_ios",
            "has_match",
            "get_merged_mask",
            "get_merged_score",
            "get_merged_bbox",
            "get_merged_category",
            "merge_object_prediction_pair"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/combine.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/combine.py",
        "imports": [
            "logging",
            "typing.List",
            "numpy",
            "collections.defaultdict",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.ObjectPredictionList",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.has_match",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.merge_object_prediction_pair",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "lsnms.nms"
        ],
        "classes": [
            {
                "class_name": "PostprocessPredictions",
                "methods": [
                    "__init__",
                    "__call__"
                ]
            },
            {
                "class_name": "NMSPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "NMMPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "GreedyNMMPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "LSNMSPostprocess",
                "methods": [
                    "__call__"
                ]
            }
        ],
        "functions": [
            "batched_nms",
            "nms",
            "batched_greedy_nmm",
            "greedy_nmm",
            "batched_nmm",
            "nmm",
            "__init__",
            "__call__",
            "__call__",
            "__call__",
            "__call__",
            "__call__"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/combine.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/postprocess/legacy/combine.py",
        "imports": [
            "copy",
            "typing.List",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.BoundingBox",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Category",
            "anylabeling.services.auto_labeling.utils.sahi.annotation.Mask",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.calculate_area",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.calculate_box_union",
            "anylabeling.services.auto_labeling.utils.sahi.postprocess.utils.calculate_intersection_area",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction"
        ],
        "classes": [
            {
                "class_name": "PostprocessPredictions",
                "methods": [
                    "__init__",
                    "_has_match",
                    "get_score_func",
                    "has_same_category_id",
                    "calculate_bbox_iou",
                    "calculate_bbox_ios",
                    "__call__"
                ]
            },
            {
                "class_name": "NMSPostprocess",
                "methods": [
                    "__call__"
                ]
            },
            {
                "class_name": "UnionMergePostprocess",
                "methods": [
                    "__call__",
                    "_merge_object_prediction_pair",
                    "_get_merged_category",
                    "_get_merged_bbox",
                    "_get_merged_score",
                    "_get_merged_mask"
                ]
            }
        ],
        "functions": [
            "__init__",
            "_has_match",
            "get_score_func",
            "has_same_category_id",
            "calculate_bbox_iou",
            "calculate_bbox_ios",
            "__call__",
            "__call__",
            "__call__",
            "_merge_object_prediction_pair",
            "_get_merged_category",
            "_get_merged_bbox",
            "_get_merged_score",
            "_get_merged_mask"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov5_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov5_onnx.py",
        "imports": [
            "cv2",
            "numpy",
            "typing.List",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "anylabeling.services.auto_labeling.engines.build_onnx_engine.OnnxBaseModel",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Yolov5ONNX",
                "methods": [
                    "__init__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            },
            {
                "class_name": "Yolov5OnnxDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "__init__",
            "inference",
            "preprocess",
            "postprocess",
            "check_dependencies",
            "load_model",
            "perform_inference",
            "num_categories",
            "has_mask",
            "category_names",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolonas.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolonas.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "yaml.safe_load",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "super_gradients.training.models",
            "super_gradients.training.processing.processing.get_pretrained_processing_params"
        ],
        "classes": [
            {
                "class_name": "YoloNasDetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "__init__",
            "check_dependencies",
            "load_model",
            "set_model",
            "perform_inference",
            "num_categories",
            "has_mask",
            "category_names",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov8.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov8.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "ultralytics.YOLO"
        ],
        "classes": [
            {
                "class_name": "Yolov8DetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "category_names",
                    "num_categories",
                    "has_mask",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "check_dependencies",
            "load_model",
            "set_model",
            "perform_inference",
            "category_names",
            "num_categories",
            "has_mask",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/mmdet.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/mmdet.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Union",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bbox_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "mmdet.apis.det_inferencer.DetInferencer",
            "mmdet.utils.ConfigType",
            "mmengine.dataset.Compose",
            "mmengine.infer.infer.ModelType",
            "pycocotools.mask"
        ],
        "classes": [
            {
                "class_name": "DetInferencerWrapper",
                "methods": [
                    "__init__",
                    "__call__",
                    "_init_pipeline"
                ]
            },
            {
                "class_name": "MmdetDetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "_init_pipeline",
            "__init__",
            "check_dependencies",
            "load_model",
            "set_model",
            "perform_inference",
            "num_categories",
            "has_mask",
            "category_names",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/base.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/base.py",
        "imports": [
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Tuple",
            "typing.Union",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.is_available"
        ],
        "classes": [
            {
                "class_name": "DetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "set_device",
                    "unload_model",
                    "perform_inference",
                    "_create_object_prediction_list_from_original_predictions",
                    "_apply_category_remapping",
                    "convert_original_predictions",
                    "object_prediction_list",
                    "object_prediction_list_per_image",
                    "original_predictions"
                ]
            }
        ],
        "functions": [
            "__init__",
            "check_dependencies",
            "load_model",
            "set_model",
            "set_device",
            "unload_model",
            "perform_inference",
            "_create_object_prediction_list_from_original_predictions",
            "_apply_category_remapping",
            "convert_original_predictions",
            "object_prediction_list",
            "object_prediction_list_per_image",
            "original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov5.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov5.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_package_minimum_version",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "yolov5",
            "yolov5",
            "packaging.version"
        ],
        "classes": [
            {
                "class_name": "Yolov5DetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "check_dependencies",
            "load_model",
            "set_model",
            "perform_inference",
            "num_categories",
            "has_mask",
            "category_names",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/__init__.py",
        "imports": [
            ".base",
            ".detectron2",
            ".huggingface",
            ".mmdet",
            ".yolonas",
            ".yolov5"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov5sparse.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov5sparse.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_package_minimum_version",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "deepsparse.Pipeline"
        ],
        "classes": [
            {
                "class_name": "Yolov5SparseDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "check_dependencies",
            "load_model",
            "set_model",
            "perform_inference",
            "num_categories",
            "category_names",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/detectron2.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/detectron2.py",
        "imports": [
            "logging",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.cv.get_bbox_from_bool_mask",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "detectron2.config.get_cfg",
            "detectron2.data.MetadataCatalog",
            "detectron2.engine.DefaultPredictor",
            "detectron2.model_zoo.model_zoo"
        ],
        "classes": [
            {
                "class_name": "Detectron2DetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "perform_inference",
                    "num_categories",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "check_dependencies",
            "load_model",
            "perform_inference",
            "num_categories",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/yolov8_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/yolov8_onnx.py",
        "imports": [
            "cv2",
            "numpy",
            "typing.List",
            "typing.Optional",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "anylabeling.services.auto_labeling.engines.build_onnx_engine.OnnxBaseModel",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Yolov8ONNX",
                "methods": [
                    "__init__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            },
            {
                "class_name": "Yolov8OnnxDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "__init__",
            "inference",
            "preprocess",
            "postprocess",
            "check_dependencies",
            "load_model",
            "perform_inference",
            "num_categories",
            "has_mask",
            "category_names",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/huggingface.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/huggingface.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "typing.Tuple",
            "typing.Union",
            "numpy",
            "pybboxes.functional",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_full_shape_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.compatibility.fix_shift_amount_list",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.ensure_package_minimum_version",
            "transformers.AutoModelForObjectDetection",
            "transformers.AutoProcessor",
            "torch",
            "torch"
        ],
        "classes": [
            {
                "class_name": "HuggingfaceDetectionModel",
                "methods": [
                    "__init__",
                    "check_dependencies",
                    "processor",
                    "image_shapes",
                    "num_categories",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "get_valid_predictions",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "__init__",
            "check_dependencies",
            "processor",
            "image_shapes",
            "num_categories",
            "load_model",
            "set_model",
            "perform_inference",
            "get_valid_predictions",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/utils/sahi/models/torchvision.py": {
        "file_name": "/anylabeling/services/auto_labeling/utils/sahi/models/torchvision.py",
        "imports": [
            "logging",
            "typing.Any",
            "typing.Dict",
            "typing.List",
            "typing.Optional",
            "numpy",
            "anylabeling.services.auto_labeling.utils.sahi.models.base.DetectionModel",
            "anylabeling.services.auto_labeling.utils.sahi.prediction.ObjectPrediction",
            "anylabeling.services.auto_labeling.utils.sahi.utils.import_utils.check_requirements",
            "torch",
            "sahi.utils.torchvision.MODEL_NAME_TO_CONSTRUCTOR",
            "yaml",
            "sahi.utils.torchvision.COCO_CLASSES",
            "sahi.utils.torch.to_float_tensor"
        ],
        "classes": [
            {
                "class_name": "TorchVisionDetectionModel",
                "methods": [
                    "check_dependencies",
                    "load_model",
                    "set_model",
                    "perform_inference",
                    "num_categories",
                    "has_mask",
                    "category_names",
                    "_create_object_prediction_list_from_original_predictions"
                ]
            }
        ],
        "functions": [
            "check_dependencies",
            "load_model",
            "set_model",
            "perform_inference",
            "num_categories",
            "has_mask",
            "category_names",
            "_create_object_prediction_list_from_original_predictions"
        ]
    },
    "anylabeling/services/auto_labeling/pose/rtmo_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/pose/rtmo_onnx.py",
        "imports": [
            "typing.List",
            "typing.Tuple",
            "os",
            "cv2",
            "numpy",
            "engines.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "RTMO",
                "methods": [
                    "__init__",
                    "__call__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "inference",
            "preprocess",
            "postprocess"
        ]
    },
    "anylabeling/services/auto_labeling/pose/dwpose_onnx.py": {
        "file_name": "/anylabeling/services/auto_labeling/pose/dwpose_onnx.py",
        "imports": [
            "typing.List",
            "typing.Tuple",
            "cv2",
            "numpy"
        ],
        "classes": [],
        "functions": [
            "preprocess",
            "inference",
            "postprocess",
            "bbox_xyxy2cs",
            "_fix_aspect_ratio",
            "_rotate_point",
            "_get_3rd_point",
            "get_warp_matrix",
            "top_down_affine",
            "get_simcc_maximum",
            "decode",
            "inference_pose"
        ]
    },
    "anylabeling/services/auto_labeling/pose/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/pose/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/__base__/sam2.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/sam2.py",
        "imports": [
            "typing.Any",
            "typing.List",
            "typing.Tuple",
            "typing.Union",
            "cv2",
            "numpy",
            "onnxruntime",
            "numpy.ndarray"
        ],
        "classes": [
            {
                "class_name": "SegmentAnything2ONNX",
                "methods": [
                    "__init__",
                    "encode",
                    "predict_masks",
                    "transform_masks"
                ]
            },
            {
                "class_name": "SAM2ImageEncoder",
                "methods": [
                    "__init__",
                    "__call__",
                    "encode_image",
                    "prepare_input",
                    "forward_encoder",
                    "process_output",
                    "get_input_details",
                    "get_output_details"
                ]
            },
            {
                "class_name": "SAM2ImageDecoder",
                "methods": [
                    "__init__",
                    "__call__",
                    "predict",
                    "prepare_inputs",
                    "prepare_points",
                    "forward_decoder",
                    "process_output",
                    "set_image_size",
                    "get_input_details",
                    "get_output_details"
                ]
            }
        ],
        "functions": [
            "__init__",
            "encode",
            "predict_masks",
            "transform_masks",
            "__init__",
            "__call__",
            "encode_image",
            "prepare_input",
            "forward_encoder",
            "process_output",
            "get_input_details",
            "get_output_details",
            "__init__",
            "__call__",
            "predict",
            "prepare_inputs",
            "prepare_points",
            "forward_decoder",
            "process_output",
            "set_image_size",
            "get_input_details",
            "get_output_details"
        ]
    },
    "anylabeling/services/auto_labeling/__base__/yolo.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/yolo.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "typing.Union",
            "typing.Tuple",
            "typing.List",
            "argparse.Namespace",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.shape.Shape",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "engines.OnnxBaseModel",
            "types.AutoLabelingResult",
            "trackers.BOTSORT",
            "trackers.BYTETracker",
            "utils.letterbox",
            "utils.scale_boxes",
            "utils.scale_coords",
            "utils.point_in_bbox",
            "utils.masks2segments",
            "utils.xyxy2xywh",
            "utils.xywhr2xyxyxyxy",
            "utils.non_max_suppression_v5",
            "utils.non_max_suppression_v8",
            "utils.calculate_rotation_theta",
            "engines.DnnBaseModel"
        ],
        "classes": [
            {
                "class_name": "YOLO",
                "methods": [
                    "__init__",
                    "set_auto_labeling_conf",
                    "set_auto_labeling_iou",
                    "set_auto_labeling_preserve_existing_annotations_state",
                    "set_auto_labeling_reset_tracker",
                    "inference",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "create_rectangle_shape",
                    "create_polygon_shape",
                    "create_keypoint_shape",
                    "create_obb_shape",
                    "make_grid",
                    "scale_grid",
                    "process_mask",
                    "preprocess_rtdetr",
                    "postprocess_rtdetr",
                    "postprocess_v10",
                    "crop_mask_np",
                    "rescale_coords_v10",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "set_auto_labeling_conf",
            "set_auto_labeling_iou",
            "set_auto_labeling_preserve_existing_annotations_state",
            "set_auto_labeling_reset_tracker",
            "inference",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "create_rectangle_shape",
            "create_polygon_shape",
            "create_keypoint_shape",
            "create_obb_shape",
            "make_grid",
            "scale_grid",
            "process_mask",
            "preprocess_rtdetr",
            "postprocess_rtdetr",
            "_rescale_boxes",
            "_bbox_cxcywh_to_xyxy",
            "postprocess_v10",
            "crop_mask_np",
            "rescale_coords_v10",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/__base__/rtmdet.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/rtmdet.py",
        "imports": [
            "typing.List",
            "typing.Tuple",
            "os",
            "cv2",
            "numpy",
            "engines.OnnxBaseModel"
        ],
        "classes": [
            {
                "class_name": "RTMDet",
                "methods": [
                    "__init__",
                    "__call__",
                    "inference",
                    "preprocess",
                    "postprocess"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "inference",
            "preprocess",
            "postprocess"
        ]
    },
    "anylabeling/services/auto_labeling/__base__/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/__base__/sam.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/sam.py",
        "imports": [
            "cv2",
            "numpy",
            "onnxruntime",
            "typing.Tuple",
            "copy.deepcopy"
        ],
        "classes": [
            {
                "class_name": "SegmentAnythingONNX",
                "methods": [
                    "__init__",
                    "get_input_points",
                    "run_encoder",
                    "get_preprocess_shape",
                    "apply_coords",
                    "run_decoder",
                    "transform_masks",
                    "encode",
                    "predict_masks",
                    "get_approx_contours"
                ]
            },
            {
                "class_name": "EdgeSAMONNX",
                "methods": [
                    "__init__",
                    "run_encoder",
                    "get_preprocess_shape",
                    "transform",
                    "encode",
                    "get_input_points",
                    "calculate_stability_score",
                    "apply_coords",
                    "apply_boxes",
                    "postprocess_masks",
                    "run_decoder",
                    "predict_masks"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_input_points",
            "run_encoder",
            "get_preprocess_shape",
            "apply_coords",
            "run_decoder",
            "transform_masks",
            "encode",
            "predict_masks",
            "get_approx_contours",
            "__init__",
            "run_encoder",
            "get_preprocess_shape",
            "transform",
            "encode",
            "get_input_points",
            "calculate_stability_score",
            "apply_coords",
            "apply_boxes",
            "postprocess_masks",
            "run_decoder",
            "predict_masks"
        ]
    },
    "anylabeling/services/auto_labeling/__base__/clip.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/clip.py",
        "imports": [
            "os",
            "cv2",
            "collections",
            "unicodedata",
            "six",
            "numpy",
            "typing.List",
            "functools.lru_cache",
            "engines.OnnxBaseModel",
            "anylabeling.views.labeling.logger.logger",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs"
        ],
        "classes": [
            {
                "class_name": "ChineseClipONNX",
                "methods": [
                    "__init__",
                    "__call__",
                    "txt_pipeline",
                    "img_pipeline",
                    "normalize",
                    "image_preprocess",
                    "postprocess",
                    "tokenize"
                ]
            },
            {
                "class_name": "BasicTokenizer",
                "methods": [
                    "__init__",
                    "tokenize",
                    "_run_strip_accents",
                    "_run_split_on_punc",
                    "_tokenize_chinese_chars",
                    "_is_chinese_char",
                    "_clean_text"
                ]
            },
            {
                "class_name": "WordpieceTokenizer",
                "methods": [
                    "__init__",
                    "tokenize"
                ]
            },
            {
                "class_name": "FullTokenizer",
                "methods": [
                    "__init__",
                    "tokenize",
                    "convert_tokens_to_ids",
                    "convert_ids_to_tokens",
                    "convert_tokens_to_string",
                    "vocab_size"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__call__",
            "txt_pipeline",
            "img_pipeline",
            "normalize",
            "image_preprocess",
            "postprocess",
            "tokenize",
            "default_vocab",
            "convert_to_unicode",
            "load_vocab",
            "whitespace_tokenize",
            "_is_punctuation",
            "_is_control",
            "_is_whitespace",
            "convert_by_vocab",
            "convert_tokens_to_ids",
            "convert_ids_to_tokens",
            "__init__",
            "tokenize",
            "_run_strip_accents",
            "_run_split_on_punc",
            "_tokenize_chinese_chars",
            "_is_chinese_char",
            "_clean_text",
            "__init__",
            "tokenize",
            "__init__",
            "tokenize",
            "convert_tokens_to_ids",
            "convert_ids_to_tokens",
            "convert_tokens_to_string",
            "clean_up_tokenization",
            "vocab_size"
        ]
    },
    "anylabeling/services/auto_labeling/__base__/upn.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/upn.py",
        "imports": [
            "copy",
            "typing.Dict",
            "typing.List",
            "typing.Union",
            "numpy",
            "torch",
            "mmengine.Config",
            "PIL.Image",
            "torchvision.ops.nms",
            "chatrex.upn.transforms.transform",
            "chatrex.upn.build_architecture",
            "chatrex.upn.models.module.nested_tensor_from_tensor_list"
        ],
        "classes": [
            {
                "class_name": "UPNWrapper",
                "methods": [
                    "__init__",
                    "inference",
                    "_inference",
                    "construct_input",
                    "transform_image",
                    "postprocess",
                    "filter"
                ]
            }
        ],
        "functions": [
            "build_model",
            "__init__",
            "inference",
            "_inference",
            "construct_input",
            "transform_image",
            "postprocess",
            "filter"
        ]
    },
    "anylabeling/services/auto_labeling/__base__/ram.py": {
        "file_name": "/anylabeling/services/auto_labeling/__base__/ram.py",
        "imports": [
            "os",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtCore.QCoreApplication",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.qt_img_to_rgb_cv_img",
            "model.Model",
            "types.AutoLabelingResult",
            "engines.build_onnx_engine.OnnxBaseModel",
            "importlib.resources",
            "anylabeling.services.auto_labeling.configs.ram"
        ],
        "classes": [
            {
                "class_name": "RecognizeAnything",
                "methods": [
                    "__init__",
                    "preprocess",
                    "inference",
                    "postprocess",
                    "predict_shapes",
                    "load_tag_list",
                    "get_results",
                    "unload"
                ]
            },
            {
                "class_name": "Meta",
                "methods": []
            }
        ],
        "functions": [
            "__init__",
            "preprocess",
            "inference",
            "postprocess",
            "predict_shapes",
            "load_tag_list",
            "get_results",
            "unload"
        ]
    },
    "anylabeling/services/auto_labeling/engines/build_dnn_engine.py": {
        "file_name": "/anylabeling/services/auto_labeling/engines/build_dnn_engine.py",
        "imports": [
            "cv2"
        ],
        "classes": [
            {
                "class_name": "DnnBaseModel",
                "methods": [
                    "__init__",
                    "get_dnn_inference"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_dnn_inference"
        ]
    },
    "anylabeling/services/auto_labeling/engines/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/engines/__init__.py",
        "imports": [
            "build_onnx_engine.OnnxBaseModel",
            "build_dnn_engine.DnnBaseModel"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/engines/build_onnx_engine.py": {
        "file_name": "/anylabeling/services/auto_labeling/engines/build_onnx_engine.py",
        "imports": [
            "os",
            "onnx",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name",
                    "get_metadata_info"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_ort_inference",
            "get_input_name",
            "get_input_shape",
            "get_output_name",
            "get_metadata_info"
        ]
    },
    "anylabeling/services/auto_labeling/trackers/basetrack.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/basetrack.py",
        "imports": [
            "collections.OrderedDict",
            "numpy"
        ],
        "classes": [
            {
                "class_name": "TrackState",
                "methods": []
            },
            {
                "class_name": "BaseTrack",
                "methods": [
                    "__init__",
                    "end_frame",
                    "next_id",
                    "activate",
                    "predict",
                    "update",
                    "mark_lost",
                    "mark_removed",
                    "reset_id"
                ]
            }
        ],
        "functions": [
            "__init__",
            "end_frame",
            "next_id",
            "activate",
            "predict",
            "update",
            "mark_lost",
            "mark_removed",
            "reset_id"
        ]
    },
    "anylabeling/services/auto_labeling/trackers/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/__init__.py",
        "imports": [
            "bot_sort.BOTSORT",
            "byte_tracker.BYTETracker"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/trackers/byte_tracker.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/byte_tracker.py",
        "imports": [
            "numpy",
            "basetrack.BaseTrack",
            "basetrack.TrackState",
            "utils.matching",
            "utils.kalman_filter.KalmanFilterXYAH"
        ],
        "classes": [
            {
                "class_name": "STrack",
                "methods": [
                    "__init__",
                    "predict",
                    "multi_predict",
                    "multi_gmc",
                    "activate",
                    "re_activate",
                    "update",
                    "convert_coords",
                    "tlwh",
                    "xyxy",
                    "tlwh_to_xyah",
                    "xywh",
                    "xywha",
                    "result",
                    "__repr__"
                ]
            },
            {
                "class_name": "BYTETracker",
                "methods": [
                    "__init__",
                    "update",
                    "get_kalmanfilter",
                    "init_track",
                    "get_dists",
                    "multi_predict",
                    "reset_id",
                    "reset",
                    "joint_stracks",
                    "sub_stracks",
                    "remove_duplicate_stracks"
                ]
            }
        ],
        "functions": [
            "xywh2ltwh",
            "__init__",
            "predict",
            "multi_predict",
            "multi_gmc",
            "activate",
            "re_activate",
            "update",
            "convert_coords",
            "tlwh",
            "xyxy",
            "tlwh_to_xyah",
            "xywh",
            "xywha",
            "result",
            "__repr__",
            "__init__",
            "update",
            "get_kalmanfilter",
            "init_track",
            "get_dists",
            "multi_predict",
            "reset_id",
            "reset",
            "joint_stracks",
            "sub_stracks",
            "remove_duplicate_stracks"
        ]
    },
    "anylabeling/services/auto_labeling/trackers/bot_sort.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/bot_sort.py",
        "imports": [
            "collections.deque",
            "numpy",
            "basetrack.TrackState",
            "byte_tracker.BYTETracker",
            "byte_tracker.STrack",
            "utils.matching",
            "utils.gmc.GMC",
            "utils.kalman_filter.KalmanFilterXYWH"
        ],
        "classes": [
            {
                "class_name": "BOTrack",
                "methods": [
                    "__init__",
                    "update_features",
                    "predict",
                    "re_activate",
                    "update",
                    "tlwh",
                    "multi_predict",
                    "convert_coords",
                    "tlwh_to_xywh"
                ]
            },
            {
                "class_name": "BOTSORT",
                "methods": [
                    "__init__",
                    "get_kalmanfilter",
                    "init_track",
                    "get_dists",
                    "multi_predict",
                    "reset"
                ]
            }
        ],
        "functions": [
            "__init__",
            "update_features",
            "predict",
            "re_activate",
            "update",
            "tlwh",
            "multi_predict",
            "convert_coords",
            "tlwh_to_xywh",
            "__init__",
            "get_kalmanfilter",
            "init_track",
            "get_dists",
            "multi_predict",
            "reset"
        ]
    },
    "anylabeling/services/auto_labeling/trackers/utils/__init__.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_labeling/trackers/utils/kalman_filter.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/kalman_filter.py",
        "imports": [
            "numpy",
            "scipy.linalg"
        ],
        "classes": [
            {
                "class_name": "KalmanFilterXYAH",
                "methods": [
                    "__init__",
                    "initiate",
                    "predict",
                    "project",
                    "multi_predict",
                    "update",
                    "gating_distance"
                ]
            },
            {
                "class_name": "KalmanFilterXYWH",
                "methods": [
                    "initiate",
                    "predict",
                    "project",
                    "multi_predict",
                    "update"
                ]
            }
        ],
        "functions": [
            "__init__",
            "initiate",
            "predict",
            "project",
            "multi_predict",
            "update",
            "gating_distance",
            "initiate",
            "predict",
            "project",
            "multi_predict",
            "update"
        ]
    },
    "anylabeling/services/auto_labeling/trackers/utils/matching.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/matching.py",
        "imports": [
            "numpy",
            "scipy",
            "scipy.spatial.distance.cdist",
            "lap"
        ],
        "classes": [],
        "functions": [
            "bbox_ioa",
            "_get_covariance_matrix",
            "batch_probiou",
            "linear_assignment",
            "iou_distance",
            "embedding_distance",
            "fuse_score"
        ]
    },
    "anylabeling/services/auto_labeling/trackers/utils/gmc.py": {
        "file_name": "/anylabeling/services/auto_labeling/trackers/utils/gmc.py",
        "imports": [
            "copy",
            "cv2",
            "numpy"
        ],
        "classes": [
            {
                "class_name": "GMC",
                "methods": [
                    "__init__",
                    "apply",
                    "applyEcc",
                    "applyFeatures",
                    "applySparseOptFlow",
                    "reset_params"
                ]
            }
        ],
        "functions": [
            "__init__",
            "apply",
            "applyEcc",
            "applyFeatures",
            "applySparseOptFlow",
            "reset_params"
        ]
    },
    "anylabeling/services/auto_training/__init__.py": {
        "file_name": "/anylabeling/services/auto_training/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/services/auto_training/ultralytics/utils.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/utils.py",
        "imports": [
            "os",
            "json",
            "importlib.metadata",
            "packaging.specifiers.SpecifierSet",
            "typing.List",
            "typing.Dict",
            "config.TASK_SHAPE_MAPPINGS"
        ],
        "classes": [],
        "functions": [
            "check_package_installed",
            "get_label_infos",
            "get_task_valid_images",
            "get_statistics_table_data"
        ]
    },
    "anylabeling/services/auto_training/ultralytics/trainer.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/trainer.py",
        "imports": [
            "os",
            "signal",
            "shutil",
            "subprocess",
            "time",
            "threading",
            "io.StringIO",
            "typing.Dict",
            "typing.Tuple",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal",
            "config.SETTINGS_CONFIG_PATH",
            "sys"
        ],
        "classes": [
            {
                "class_name": "TrainingEventRedirector",
                "methods": [
                    "__init__",
                    "emit_training_event"
                ]
            },
            {
                "class_name": "TrainingLogRedirector",
                "methods": [
                    "__init__",
                    "write",
                    "flush"
                ]
            },
            {
                "class_name": "TrainingManager",
                "methods": [
                    "__init__",
                    "notify_callbacks",
                    "start_training",
                    "stop_training"
                ]
            }
        ],
        "functions": [
            "__init__",
            "emit_training_event",
            "__init__",
            "write",
            "flush",
            "__init__",
            "notify_callbacks",
            "start_training",
            "run_training",
            "save_settings_config",
            "stop_training",
            "get_training_manager"
        ]
    },
    "anylabeling/services/auto_training/ultralytics/validators.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/validators.py",
        "imports": [
            "os",
            "subprocess",
            "sys",
            "yaml",
            "typing.Dict",
            "typing.List",
            "typing.Tuple",
            "typing.Union",
            "utils.get_task_valid_images",
            "config.MIN_LABELED_IMAGES_THRESHOLD",
            "general.parse_string_to_digit_list"
        ],
        "classes": [],
        "functions": [
            "validate_basic_config",
            "validate_classes",
            "validate_data_file",
            "install_packages_with_timeout",
            "validate_task_requirements"
        ]
    },
    "anylabeling/services/auto_training/ultralytics/config.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/config.py",
        "imports": [
            "os",
            "multiprocessing",
            "torch",
            "torch",
            "torch"
        ],
        "classes": [],
        "functions": [
            "is_torch_available",
            "is_cuda_available",
            "is_mps_available"
        ]
    },
    "anylabeling/services/auto_training/ultralytics/general.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/general.py",
        "imports": [
            "json",
            "os",
            "re",
            "shutil",
            "random",
            "datetime.datetime",
            "typing.List",
            "_io.load_yaml_config",
            "_io.save_yaml_config",
            "config.DATASET_PATH",
            "config.TASK_LABEL_MAPPINGS",
            "config.TASK_SHAPE_MAPPINGS",
            "anylabeling.views.labeling.label_converter.LabelConverter"
        ],
        "classes": [],
        "functions": [
            "create_yolo_dataset",
            "_process_images_batch",
            "format_classes_display",
            "parse_string_to_digit_list"
        ]
    },
    "anylabeling/services/auto_training/ultralytics/_io.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/_io.py",
        "imports": [
            "json",
            "os",
            "yaml",
            "typing.Dict",
            "typing.Any",
            "config.SETTINGS_CONFIG_PATH"
        ],
        "classes": [],
        "functions": [
            "ensure_config_dir",
            "save_config",
            "save_yaml_config",
            "load_config",
            "load_config_from_file",
            "load_yaml_config"
        ]
    },
    "anylabeling/services/auto_training/ultralytics/style.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/style.py",
        "imports": [],
        "classes": [],
        "functions": [
            "get_advanced_toggle_btn_style",
            "get_custom_table_style",
            "get_image_row_label_style",
            "get_image_label_style",
            "get_log_display_style",
            "get_progress_bar_style",
            "get_status_label_style"
        ]
    },
    "anylabeling/services/auto_training/ultralytics/exporter.py": {
        "file_name": "/anylabeling/services/auto_training/ultralytics/exporter.py",
        "imports": [
            "os",
            "sys",
            "threading",
            "io.StringIO",
            "typing.Tuple",
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal",
            "utils.check_package_installed",
            "validators.install_packages_with_timeout",
            "onnx",
            "packaging.version",
            "ultralytics.YOLO"
        ],
        "classes": [
            {
                "class_name": "ExportEventRedirector",
                "methods": [
                    "__init__",
                    "emit_export_event"
                ]
            },
            {
                "class_name": "ExportLogRedirector",
                "methods": [
                    "__init__",
                    "write",
                    "flush"
                ]
            },
            {
                "class_name": "ExportManager",
                "methods": [
                    "__init__",
                    "notify_callbacks",
                    "start_export",
                    "_export_worker",
                    "stop_export"
                ]
            }
        ],
        "functions": [
            "__init__",
            "emit_export_event",
            "__init__",
            "write",
            "flush",
            "validate_onnx_export_environment",
            "validate_openvino_export_environment",
            "validate_tensorrt_export_environment",
            "validate_coreml_export_environment",
            "validate_tensorflow_export_environment",
            "validate_paddle_export_environment",
            "validate_mnn_export_environment",
            "validate_ncnn_export_environment",
            "validate_imx500_export_environment",
            "validate_rknn_export_environment",
            "get_export_validator",
            "__init__",
            "notify_callbacks",
            "start_export",
            "_export_worker",
            "stop_export",
            "get_export_manager",
            "export_model"
        ]
    },
    "anylabeling/views/__init__.py": {
        "file_name": "/anylabeling/views/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/mainwindow.py": {
        "file_name": "/anylabeling/views/mainwindow.py",
        "imports": [
            "PyQt5.QtWidgets.QMainWindow",
            "PyQt5.QtWidgets.QStatusBar",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "app_info.__appdescription__",
            "app_info.__appname__",
            "labeling.label_wrapper.LabelingWrapper"
        ],
        "classes": [
            {
                "class_name": "MainWindow",
                "methods": [
                    "__init__",
                    "closeEvent"
                ]
            }
        ],
        "functions": [
            "__init__",
            "closeEvent"
        ]
    },
    "anylabeling/views/common/__init__.py": {
        "file_name": "/anylabeling/views/common/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/common/toaster.py": {
        "file_name": "/anylabeling/views/common/toaster.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "QToaster",
                "methods": [
                    "__init__",
                    "check_closed",
                    "restore",
                    "hide",
                    "eventFilter",
                    "enterEvent",
                    "leaveEvent",
                    "closeEvent",
                    "resizeEvent",
                    "show_message"
                ]
            }
        ],
        "functions": [
            "__init__",
            "check_closed",
            "restore",
            "hide",
            "eventFilter",
            "enterEvent",
            "leaveEvent",
            "closeEvent",
            "resizeEvent",
            "show_message"
        ]
    },
    "anylabeling/views/training/__init__.py": {
        "file_name": "/anylabeling/views/training/__init__.py",
        "imports": [
            "ultralytics_dialog.UltralyticsDialog"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/training/ultralytics_dialog.py": {
        "file_name": "/anylabeling/views/training/ultralytics_dialog.py",
        "imports": [
            "csv",
            "datetime",
            "glob",
            "os",
            "platform",
            "re",
            "shutil",
            "subprocess",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QTabWidget",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QGroupBox",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QFormLayout",
            "PyQt5.QtWidgets.QGridLayout",
            "PyQt5.QtWidgets.QProgressBar",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QSizePolicy",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.training.widgets.ultralytics_widgets.*",
            "anylabeling.services.auto_training.ultralytics._io.*",
            "anylabeling.services.auto_training.ultralytics.config.*",
            "anylabeling.services.auto_training.ultralytics.exporter.ExportEventRedirector",
            "anylabeling.services.auto_training.ultralytics.exporter.ExportLogRedirector",
            "anylabeling.services.auto_training.ultralytics.exporter.get_export_manager",
            "anylabeling.services.auto_training.ultralytics.general.create_yolo_dataset",
            "anylabeling.services.auto_training.ultralytics.general.format_classes_display",
            "anylabeling.services.auto_training.ultralytics.general.parse_string_to_digit_list",
            "anylabeling.services.auto_training.ultralytics.style.*",
            "anylabeling.services.auto_training.ultralytics.trainer.TrainingEventRedirector",
            "anylabeling.services.auto_training.ultralytics.trainer.TrainingLogRedirector",
            "anylabeling.services.auto_training.ultralytics.trainer.get_training_manager",
            "anylabeling.services.auto_training.ultralytics.utils.*",
            "anylabeling.services.auto_training.ultralytics.validators.validate_basic_config",
            "anylabeling.services.auto_training.ultralytics.validators.validate_data_file",
            "anylabeling.services.auto_training.ultralytics.validators.validate_task_requirements",
            "torch"
        ],
        "classes": [
            {
                "class_name": "UltralyticsDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "save_training_logs_to_file",
                    "closeEvent",
                    "go_to_specific_tab",
                    "show_pose_config",
                    "hide_pose_config",
                    "on_task_type_selected",
                    "create_task_handler",
                    "init_task_configuration",
                    "refresh_dataset_summary",
                    "load_images",
                    "init_dataset_summary",
                    "proceed_to_config",
                    "init_actions",
                    "init_data_tab",
                    "browse_model_file",
                    "browse_data_file",
                    "browse_pose_config_file",
                    "setup_cuda_checkboxes",
                    "on_device_changed",
                    "init_basic_settings",
                    "toggle_advanced_settings",
                    "init_train_settings",
                    "load_config_to_ui",
                    "import_config",
                    "get_current_config",
                    "save_current_config",
                    "start_training",
                    "init_config_buttons",
                    "load_default_config",
                    "init_config_tab",
                    "update_training_status_display",
                    "update_training_progress",
                    "update_training_images",
                    "on_training_event",
                    "append_training_log",
                    "init_training_status",
                    "clear_training_logs",
                    "copy_training_logs",
                    "init_training_logs",
                    "init_training_images",
                    "on_image_clicked",
                    "open_image_file",
                    "open_training_directory",
                    "stop_training",
                    "get_training_args",
                    "start_training_from_train_tab",
                    "init_training_actions",
                    "init_train_tab",
                    "on_export_event",
                    "start_export",
                    "reset_train_tab"
                ]
            }
        ],
        "functions": [
            "__init__",
            "init_ui",
            "save_training_logs_to_file",
            "closeEvent",
            "go_to_specific_tab",
            "show_pose_config",
            "hide_pose_config",
            "on_task_type_selected",
            "create_task_handler",
            "handler",
            "init_task_configuration",
            "refresh_dataset_summary",
            "load_images",
            "init_dataset_summary",
            "proceed_to_config",
            "init_actions",
            "init_data_tab",
            "browse_model_file",
            "browse_data_file",
            "browse_pose_config_file",
            "setup_cuda_checkboxes",
            "on_device_changed",
            "init_basic_settings",
            "toggle_advanced_settings",
            "init_train_settings",
            "load_config_to_ui",
            "set_widget_value",
            "import_config",
            "get_current_config",
            "get_widget_value",
            "save_current_config",
            "start_training",
            "init_config_buttons",
            "load_default_config",
            "init_config_tab",
            "update_training_status_display",
            "update_training_progress",
            "update_training_images",
            "find_images_by_pattern",
            "on_training_event",
            "append_training_log",
            "clean_ansi_codes",
            "init_training_status",
            "clear_training_logs",
            "copy_training_logs",
            "init_training_logs",
            "init_training_images",
            "on_image_clicked",
            "open_image_file",
            "open_training_directory",
            "stop_training",
            "get_training_args",
            "start_training_from_train_tab",
            "init_training_actions",
            "init_train_tab",
            "on_export_event",
            "start_export",
            "reset_train_tab"
        ]
    },
    "anylabeling/views/training/widgets/__init__.py": {
        "file_name": "/anylabeling/views/training/widgets/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/training/widgets/ultralytics_widgets/__init__.py": {
        "file_name": "/anylabeling/views/training/widgets/ultralytics_widgets/__init__.py",
        "imports": [
            "custom_dialogs.ExportFormatDialog",
            "custom_widgets.CustomCheckBox",
            "custom_widgets.CustomComboBox",
            "custom_widgets.CustomDoubleSpinBox",
            "custom_widgets.CustomLineEdit",
            "custom_widgets.CustomQPushButton",
            "custom_widgets.CustomSlider",
            "custom_widgets.CustomSpinBox",
            "custom_widgets.CustomTable",
            "custom_widgets.PrimaryButton",
            "custom_widgets.SecondaryButton",
            "custom_widgets.TrainingConfirmDialog"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/training/widgets/ultralytics_widgets/custom_dialogs.py": {
        "file_name": "/anylabeling/views/training/widgets/ultralytics_widgets/custom_dialogs.py",
        "imports": [
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QVBoxLayout",
            "custom_widgets.CustomComboBox",
            "custom_widgets.PrimaryButton",
            "custom_widgets.SecondaryButton"
        ],
        "classes": [
            {
                "class_name": "ExportFormatDialog",
                "methods": [
                    "__init__",
                    "get_selected_format"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_selected_format"
        ]
    },
    "anylabeling/views/training/widgets/ultralytics_widgets/custom_widgets.py": {
        "file_name": "/anylabeling/views/training/widgets/ultralytics_widgets/custom_widgets.py",
        "imports": [
            "PyQt5.QtWidgets.QCheckBox",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QDoubleSpinBox",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSlider",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QHeaderView",
            "PyQt5.QtWidgets.QAbstractItemView",
            "PyQt5.QtCore",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtGui.QBrush",
            "PyQt5.QtGui.QColor",
            "anylabeling.services.auto_training.ultralytics.config.*",
            "anylabeling.services.auto_training.ultralytics.style.*",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "CustomCheckBox",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "CustomComboBox",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomSpinBox",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomDoubleSpinBox",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomSlider",
                "methods": [
                    "__init__",
                    "wheelEvent"
                ]
            },
            {
                "class_name": "CustomLineEdit",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "CustomQPushButton",
                "methods": [
                    "__init__",
                    "set_selected",
                    "update_style"
                ]
            },
            {
                "class_name": "PrimaryButton",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "SecondaryButton",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "TrainingConfirmDialog",
                "methods": [
                    "__init__",
                    "_format_command"
                ]
            },
            {
                "class_name": "CustomTable",
                "methods": [
                    "__init__",
                    "setup_table",
                    "load_data",
                    "populate_table"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__init__",
            "wheelEvent",
            "__init__",
            "wheelEvent",
            "__init__",
            "wheelEvent",
            "__init__",
            "wheelEvent",
            "__init__",
            "__init__",
            "set_selected",
            "update_style",
            "__init__",
            "__init__",
            "__init__",
            "_format_command",
            "__init__",
            "setup_table",
            "load_data",
            "populate_table"
        ]
    },
    "anylabeling/views/labeling/label_converter.py": {
        "file_name": "/anylabeling/views/labeling/label_converter.py",
        "imports": [
            "os",
            "os.path",
            "cv2",
            "json",
            "jsonlines",
            "json_repair",
            "math",
            "re",
            "uuid",
            "yaml",
            "pathlib",
            "configparser",
            "numpy",
            "xml.dom.minidom",
            "xml.etree.ElementTree",
            "PIL.Image",
            "datetime.date",
            "itertools.chain",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.shape.rectangle_from_diagonal",
            "anylabeling.views.labeling.utils.general.is_possible_rectangle"
        ],
        "classes": [
            {
                "class_name": "LabelConverter",
                "methods": [
                    "__init__",
                    "reset",
                    "calculate_rotation_theta",
                    "calculate_polygon_area",
                    "get_image_size",
                    "get_min_enclosing_bbox",
                    "get_contours_and_labels",
                    "clamp_points",
                    "_extract_bbox_answer",
                    "get_coco_data",
                    "calculate_normalized_bbox",
                    "calculate_bounding_box",
                    "gen_quad_from_poly",
                    "get_rotate_crop_image",
                    "yolo_obb_to_custom",
                    "yolo_pose_to_custom",
                    "yolo_to_custom",
                    "voc_to_custom",
                    "coco_to_custom",
                    "dota_to_custom",
                    "mask_to_custom",
                    "mot_to_custom",
                    "odvg_to_custom",
                    "mmgd_to_custom",
                    "ppocr_to_custom",
                    "vlm_r1_ovd_to_custom",
                    "custom_to_yolo",
                    "custom_to_voc",
                    "custom_to_coco",
                    "custom_to_dota",
                    "custom_to_mask",
                    "custom_to_mot",
                    "custom_to_mots",
                    "custom_to_odvg",
                    "custom_to_vlm_r1_ovd",
                    "custom_to_ppocr"
                ]
            }
        ],
        "functions": [
            "__init__",
            "reset",
            "calculate_rotation_theta",
            "calculate_polygon_area",
            "get_image_size",
            "get_min_enclosing_bbox",
            "get_contours_and_labels",
            "clamp_points",
            "_extract_bbox_answer",
            "get_coco_data",
            "calculate_normalized_bbox",
            "calculate_bounding_box",
            "gen_quad_from_poly",
            "get_rotate_crop_image",
            "yolo_obb_to_custom",
            "yolo_pose_to_custom",
            "yolo_to_custom",
            "voc_to_custom",
            "coco_to_custom",
            "dota_to_custom",
            "mask_to_custom",
            "mot_to_custom",
            "odvg_to_custom",
            "mmgd_to_custom",
            "ppocr_to_custom",
            "vlm_r1_ovd_to_custom",
            "custom_to_yolo",
            "custom_to_voc",
            "custom_to_coco",
            "custom_to_dota",
            "custom_to_mask",
            "custom_to_mot",
            "custom_to_mots",
            "custom_to_odvg",
            "custom_to_vlm_r1_ovd",
            "custom_to_ppocr"
        ]
    },
    "anylabeling/views/labeling/shape.py": {
        "file_name": "/anylabeling/views/labeling/shape.py",
        "imports": [
            "copy",
            "math",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            ".utils",
            "labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Shape",
                "methods": [
                    "__init__",
                    "to_dict",
                    "load_from_dict",
                    "shape_type",
                    "shape_type",
                    "get_supported_shape",
                    "close",
                    "reach_max_points",
                    "add_point",
                    "can_add_point",
                    "pop_point",
                    "insert_point",
                    "remove_point",
                    "is_closed",
                    "set_open",
                    "get_rect_from_line",
                    "paint",
                    "draw_vertex",
                    "nearest_vertex",
                    "nearest_edge",
                    "contains_point",
                    "get_circle_rect_from_line",
                    "make_path",
                    "bounding_rect",
                    "move_by",
                    "move_vertex_by",
                    "highlight_vertex",
                    "highlight_clear",
                    "copy",
                    "__len__",
                    "__getitem__",
                    "__setitem__"
                ]
            }
        ],
        "functions": [
            "__init__",
            "to_dict",
            "load_from_dict",
            "shape_type",
            "shape_type",
            "get_supported_shape",
            "close",
            "reach_max_points",
            "add_point",
            "can_add_point",
            "pop_point",
            "insert_point",
            "remove_point",
            "is_closed",
            "set_open",
            "get_rect_from_line",
            "paint",
            "draw_vertex",
            "nearest_vertex",
            "nearest_edge",
            "contains_point",
            "get_circle_rect_from_line",
            "make_path",
            "bounding_rect",
            "move_by",
            "move_vertex_by",
            "highlight_vertex",
            "highlight_clear",
            "copy",
            "__len__",
            "__getitem__",
            "__setitem__"
        ]
    },
    "anylabeling/views/labeling/label_wrapper.py": {
        "file_name": "/anylabeling/views/labeling/label_wrapper.py",
        "imports": [
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "label_widget.LabelingWidget"
        ],
        "classes": [
            {
                "class_name": "LabelingWrapper",
                "methods": [
                    "__init__",
                    "closeEvent"
                ]
            }
        ],
        "functions": [
            "__init__",
            "closeEvent"
        ]
    },
    "anylabeling/views/labeling/__init__.py": {
        "file_name": "/anylabeling/views/labeling/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/label_file.py": {
        "file_name": "/anylabeling/views/labeling/label_file.py",
        "imports": [
            "os",
            "base64",
            "contextlib",
            "io",
            "json",
            "os.path",
            "PIL.Image",
            "PIL.ImageFile",
            "app_info.__version__",
            ".utils",
            "shape.Shape",
            "logger.logger",
            "label_converter.LabelConverter"
        ],
        "classes": [
            {
                "class_name": "LabelFileError",
                "methods": []
            },
            {
                "class_name": "LabelFile",
                "methods": [
                    "__init__",
                    "load_image_file",
                    "load",
                    "_check_image_height_and_width",
                    "save",
                    "is_label_file"
                ]
            }
        ],
        "functions": [
            "__init__",
            "load_image_file",
            "load",
            "_check_image_height_and_width",
            "save",
            "is_label_file"
        ]
    },
    "anylabeling/views/labeling/label_widget.py": {
        "file_name": "/anylabeling/views/labeling/label_widget.py",
        "imports": [
            "functools",
            "html",
            "json",
            "math",
            "os",
            "os.path",
            "re",
            "shutil",
            "typing.Optional",
            "cv2",
            "numpy",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.pyqtSlot",
            "PyQt5.QtWidgets.QDockWidget",
            "PyQt5.QtWidgets.QGridLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPlainTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWhatsThis",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QScrollArea",
            "anylabeling.services.auto_labeling.types.AutoLabelingMode",
            "anylabeling.services.auto_labeling._THUMBNAIL_RENDER_MODELS",
            "anylabeling.views.training.UltralyticsDialog",
            "app_info.__appname__",
            "app_info.__version__",
            "app_info.__preferred_device__",
            ".utils",
            "config.get_config",
            "config.save_config",
            "label_file.LabelFile",
            "label_file.LabelFileError",
            "logger.logger",
            "shape.Shape",
            "widgets.AboutDialog",
            "widgets.AutoLabelingWidget",
            "widgets.BrightnessContrastDialog",
            "widgets.Canvas",
            "widgets.ChatbotDialog",
            "widgets.VQADialog",
            "widgets.CrosshairSettingsDialog",
            "widgets.FileDialogPreview",
            "widgets.GroupIDFilterComboBox",
            "widgets.LabelDialog",
            "widgets.LabelFilterComboBox",
            "widgets.LabelListWidget",
            "widgets.LabelListWidgetItem",
            "widgets.DigitShortcutDialog",
            "widgets.LabelModifyDialog",
            "widgets.GroupIDModifyDialog",
            "widgets.OverviewDialog",
            "widgets.SearchBar",
            "widgets.ToolBar",
            "widgets.UniqueLabelQListWidget",
            "widgets.ZoomWidget",
            "widgets.NavigatorDialog"
        ],
        "classes": [
            {
                "class_name": "LabelingWidget",
                "methods": [
                    "__init__",
                    "restore_navigator_state",
                    "_navigator_close_event",
                    "set_language",
                    "get_labeling_instruction",
                    "on_auto_segmentation_requested",
                    "on_auto_segmentation_disabled",
                    "on_auto_decode_requested",
                    "menu",
                    "central_widget",
                    "toolbar",
                    "statusBar",
                    "no_shape",
                    "populate_mode_actions",
                    "set_dirty",
                    "set_clean",
                    "get_image_progress_info",
                    "toggle_actions",
                    "queue_event",
                    "status",
                    "reset_state",
                    "reset_attribute",
                    "current_item",
                    "add_recent_file",
                    "undo_shape_edit",
                    "get_label_file_list",
                    "copy_shape_coordinates",
                    "union_selection",
                    "start_training",
                    "overview",
                    "digit_shortcut_manager",
                    "label_manager",
                    "gid_manager",
                    "open_chatbot",
                    "open_vqa",
                    "documentation",
                    "about",
                    "loop_thru_labels",
                    "copy_to_clipboard",
                    "toggle_drawing_sensitive",
                    "create_digit_mode",
                    "toggle_draw_mode",
                    "set_edit_mode",
                    "update_file_menu",
                    "pop_label_list_menu",
                    "validate_label",
                    "batch_edit_labels",
                    "edit_label",
                    "file_search_changed",
                    "file_selection_changed",
                    "attribute_selection_changed",
                    "update_selected_options",
                    "update_attributes",
                    "save_attributes",
                    "shape_selection_changed",
                    "add_label",
                    "load_labels",
                    "_update_shape_color",
                    "_get_rgb_by_label",
                    "remove_labels",
                    "load_shapes",
                    "load_flags",
                    "update_combo_box",
                    "update_gid_box",
                    "save_labels",
                    "duplicate_selected_shape",
                    "paste_selected_shape",
                    "toggle_system_clipboard",
                    "copy_selected_shape",
                    "text_selection_changed",
                    "gid_selection_changed",
                    "label_selection_changed",
                    "label_item_changed",
                    "label_order_changed",
                    "new_shape",
                    "show_shape",
                    "on_navigator_request",
                    "update_navigator_viewport",
                    "update_navigator_shapes",
                    "on_navigator_zoom_changed",
                    "_convert_navigator_pos_to_canvas",
                    "on_navigator_viewport_update_requested",
                    "toggle_navigator",
                    "scroll_request",
                    "set_scroll",
                    "set_zoom",
                    "add_zoom",
                    "zoom_request",
                    "set_fit_window",
                    "set_fit_width",
                    "set_cross_line",
                    "set_canvas_params",
                    "on_new_brightness_contrast",
                    "brightness_contrast",
                    "hide_selected_polygons",
                    "show_hidden_polygons",
                    "get_next_files",
                    "inform_next_files",
                    "load_file",
                    "keyPressEvent",
                    "resizeEvent",
                    "paint_canvas",
                    "adjust_scale",
                    "scale_fit_window",
                    "scale_fit_width",
                    "closeEvent",
                    "dragEnterEvent",
                    "dropEvent",
                    "load_recent",
                    "open_checked_image",
                    "open_prev_unchecked_image",
                    "open_next_unchecked_image",
                    "open_prev_image",
                    "open_next_image",
                    "open_file",
                    "change_output_dir_dialog",
                    "save_file",
                    "save_file_as",
                    "save_file_dialog",
                    "_save_file",
                    "close_file",
                    "get_label_file",
                    "get_image_file",
                    "delete_file",
                    "delete_image_file",
                    "has_labels",
                    "has_label_file",
                    "may_continue",
                    "error_message",
                    "current_path",
                    "toggle_visibility_shapes",
                    "remove_selected_point",
                    "delete_selected_shape",
                    "copy_shape",
                    "move_shape",
                    "open_folder_dialog",
                    "image_list",
                    "import_dropped_image_files",
                    "import_image_folder",
                    "toggle_auto_labeling_widget",
                    "new_shapes_from_auto_labeling",
                    "clear_auto_labeling_marks",
                    "find_last_label",
                    "set_cache_auto_label",
                    "finish_auto_labeling_object",
                    "shape_text_changed",
                    "set_text_editing",
                    "group_selected_shapes",
                    "ungroup_selected_shapes",
                    "update_thumbnail_pixmap",
                    "update_thumbnail_display"
                ]
            }
        ],
        "functions": [
            "__init__",
            "restore_navigator_state",
            "_navigator_close_event",
            "set_language",
            "get_labeling_instruction",
            "on_auto_segmentation_requested",
            "on_auto_segmentation_disabled",
            "on_auto_decode_requested",
            "menu",
            "central_widget",
            "toolbar",
            "statusBar",
            "no_shape",
            "populate_mode_actions",
            "set_dirty",
            "set_clean",
            "get_image_progress_info",
            "toggle_actions",
            "queue_event",
            "status",
            "reset_state",
            "reset_attribute",
            "current_item",
            "add_recent_file",
            "undo_shape_edit",
            "get_label_file_list",
            "copy_shape_coordinates",
            "union_selection",
            "start_training",
            "overview",
            "digit_shortcut_manager",
            "label_manager",
            "gid_manager",
            "open_chatbot",
            "open_vqa",
            "documentation",
            "about",
            "loop_thru_labels",
            "copy_to_clipboard",
            "toggle_drawing_sensitive",
            "create_digit_mode",
            "toggle_draw_mode",
            "set_edit_mode",
            "update_file_menu",
            "exists",
            "pop_label_list_menu",
            "validate_label",
            "batch_edit_labels",
            "edit_label",
            "file_search_changed",
            "file_selection_changed",
            "attribute_selection_changed",
            "update_selected_options",
            "update_attributes",
            "save_attributes",
            "format_shape",
            "shape_selection_changed",
            "add_label",
            "load_labels",
            "_update_shape_color",
            "_get_rgb_by_label",
            "remove_labels",
            "load_shapes",
            "load_flags",
            "update_combo_box",
            "update_gid_box",
            "save_labels",
            "duplicate_selected_shape",
            "paste_selected_shape",
            "toggle_system_clipboard",
            "copy_selected_shape",
            "text_selection_changed",
            "gid_selection_changed",
            "label_selection_changed",
            "label_item_changed",
            "label_order_changed",
            "new_shape",
            "show_shape",
            "on_navigator_request",
            "update_navigator_viewport",
            "update_navigator_shapes",
            "on_navigator_zoom_changed",
            "_convert_navigator_pos_to_canvas",
            "on_navigator_viewport_update_requested",
            "toggle_navigator",
            "scroll_request",
            "set_scroll",
            "set_zoom",
            "add_zoom",
            "zoom_request",
            "set_fit_window",
            "set_fit_width",
            "set_cross_line",
            "set_canvas_params",
            "on_new_brightness_contrast",
            "brightness_contrast",
            "hide_selected_polygons",
            "show_hidden_polygons",
            "get_next_files",
            "inform_next_files",
            "load_file",
            "keyPressEvent",
            "resizeEvent",
            "paint_canvas",
            "adjust_scale",
            "scale_fit_window",
            "scale_fit_width",
            "closeEvent",
            "dragEnterEvent",
            "dropEvent",
            "load_recent",
            "open_checked_image",
            "open_prev_unchecked_image",
            "open_next_unchecked_image",
            "open_prev_image",
            "open_next_image",
            "open_file",
            "change_output_dir_dialog",
            "save_file",
            "save_file_as",
            "save_file_dialog",
            "_save_file",
            "close_file",
            "get_label_file",
            "get_image_file",
            "delete_file",
            "delete_image_file",
            "has_labels",
            "has_label_file",
            "may_continue",
            "error_message",
            "current_path",
            "toggle_visibility_shapes",
            "remove_selected_point",
            "delete_selected_shape",
            "copy_shape",
            "move_shape",
            "open_folder_dialog",
            "image_list",
            "import_dropped_image_files",
            "import_image_folder",
            "_process_exif_with_progress",
            "toggle_auto_labeling_widget",
            "new_shapes_from_auto_labeling",
            "clear_auto_labeling_marks",
            "find_last_label",
            "set_cache_auto_label",
            "finish_auto_labeling_object",
            "shape_text_changed",
            "set_text_editing",
            "group_selected_shapes",
            "ungroup_selected_shapes",
            "update_thumbnail_pixmap",
            "update_thumbnail_display"
        ]
    },
    "anylabeling/views/labeling/logger.py": {
        "file_name": "/anylabeling/views/labeling/logger.py",
        "imports": [
            "logging",
            "sys",
            "functools.wraps",
            "typing.Callable",
            "typing.Dict",
            "termcolor"
        ],
        "classes": [
            {
                "class_name": "ColoredFormatter",
                "methods": [
                    "__init__",
                    "format",
                    "_color_record"
                ]
            },
            {
                "class_name": "AppLogger",
                "methods": [
                    "__init__",
                    "_setup_handler",
                    "__getattr__",
                    "set_level"
                ]
            }
        ],
        "functions": [
            "singleton",
            "get_instance",
            "__init__",
            "format",
            "_color_record",
            "colored",
            "__init__",
            "_setup_handler",
            "__getattr__",
            "set_level"
        ]
    },
    "anylabeling/views/labeling/widgets/toolbar.py": {
        "file_name": "/anylabeling/views/labeling/widgets/toolbar.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ToolBar",
                "methods": [
                    "__init__",
                    "add_action"
                ]
            }
        ],
        "functions": [
            "__init__",
            "add_action"
        ]
    },
    "anylabeling/views/labeling/widgets/popup.py": {
        "file_name": "/anylabeling/views/labeling/widgets/popup.py",
        "imports": [
            "os",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QGraphicsDropShadowEffect",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtCore.QRectF",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtGui.QPainter",
            "PyQt5.QtGui.QPainterPath",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QIcon"
        ],
        "classes": [
            {
                "class_name": "Popup",
                "methods": [
                    "__init__",
                    "paintEvent",
                    "show_popup"
                ]
            }
        ],
        "functions": [
            "is_wsl",
            "__init__",
            "paintEvent",
            "show_popup"
        ]
    },
    "anylabeling/views/labeling/widgets/label_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/label_dialog.py",
        "imports": [
            "os",
            "re",
            "json",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtGui.QFont",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QIntValidator",
            "PyQt5.QtCore.QCoreApplication",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QColorDialog",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QCheckBox",
            "anylabeling.views.labeling.utils",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.popup.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_spinbox_style"
        ],
        "classes": [
            {
                "class_name": "ColoredComboBox",
                "methods": [
                    "__init__",
                    "addModeItem",
                    "paintEvent"
                ]
            },
            {
                "class_name": "DigitShortcutDialog",
                "methods": [
                    "__init__",
                    "on_mode_changed",
                    "reset_settings",
                    "save_settings",
                    "move_to_center"
                ]
            },
            {
                "class_name": "GroupIDModifyDialog",
                "methods": [
                    "__init__",
                    "get_image_file_list",
                    "get_shape_file_list",
                    "get_gid_info",
                    "init_ui",
                    "move_to_center",
                    "populate_table",
                    "update_range",
                    "confirm_changes",
                    "modify_group_id"
                ]
            },
            {
                "class_name": "LabelColorButton",
                "methods": [
                    "__init__",
                    "init_ui",
                    "set_color",
                    "mousePressEvent"
                ]
            },
            {
                "class_name": "LabelModifyDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "get_image_file_list",
                    "move_to_center",
                    "populate_table",
                    "change_color",
                    "on_delete_checkbox_changed",
                    "confirm_changes",
                    "modify_label",
                    "init_label_info",
                    "update_range"
                ]
            },
            {
                "class_name": "LabelQLineEdit",
                "methods": [
                    "__init__",
                    "set_list_widget",
                    "keyPressEvent"
                ]
            },
            {
                "class_name": "LabelDialog",
                "methods": [
                    "__init__",
                    "add_linking_pair",
                    "keyPressEvent",
                    "remove_linking_item",
                    "reset_linking",
                    "get_last_label",
                    "sort_labels",
                    "add_label_history",
                    "remove_label_history",
                    "label_selected",
                    "validate",
                    "label_double_clicked",
                    "postprocess",
                    "upload_flags",
                    "update_flags",
                    "delete_flags",
                    "reset_flags",
                    "set_flags",
                    "get_flags",
                    "get_group_id",
                    "get_description",
                    "get_difficult_state",
                    "get_kie_linking",
                    "pop_up"
                ]
            }
        ],
        "functions": [
            "natural_sort_key",
            "__init__",
            "addModeItem",
            "paintEvent",
            "__init__",
            "on_mode_changed",
            "reset_settings",
            "save_settings",
            "move_to_center",
            "__init__",
            "get_image_file_list",
            "get_shape_file_list",
            "get_gid_info",
            "init_ui",
            "move_to_center",
            "populate_table",
            "update_range",
            "confirm_changes",
            "modify_group_id",
            "__init__",
            "init_ui",
            "set_color",
            "mousePressEvent",
            "__init__",
            "init_ui",
            "get_image_file_list",
            "move_to_center",
            "populate_table",
            "change_color",
            "on_delete_checkbox_changed",
            "confirm_changes",
            "modify_label",
            "init_label_info",
            "update_range",
            "__init__",
            "set_list_widget",
            "keyPressEvent",
            "__init__",
            "add_linking_pair",
            "keyPressEvent",
            "remove_linking_item",
            "reset_linking",
            "get_last_label",
            "sort_labels",
            "add_label_history",
            "remove_label_history",
            "label_selected",
            "validate",
            "label_double_clicked",
            "postprocess",
            "upload_flags",
            "update_flags",
            "delete_flags",
            "reset_flags",
            "set_flags",
            "get_flags",
            "get_group_id",
            "get_description",
            "get_difficult_state",
            "get_kie_linking",
            "pop_up"
        ]
    },
    "anylabeling/views/labeling/widgets/about_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/about_dialog.py",
        "imports": [
            "threading",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtWebEngineWidgets.QWebEngineView",
            "anylabeling.app_info.__appname__",
            "anylabeling.app_info.__version__",
            "anylabeling.app_info.__preferred_device__",
            "anylabeling.views.labeling.utils.general.collect_system_info",
            "anylabeling.views.labeling.utils.general.open_url",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.update_checker.check_for_updates_sync",
            "anylabeling.views.labeling.widgets.popup.Popup",
            "anylabeling.views.labeling.chatbot.render.convert_markdown_to_html"
        ],
        "classes": [
            {
                "class_name": "AboutDialog",
                "methods": [
                    "__init__",
                    "move_to_center",
                    "copy_app_info",
                    "check_for_updates",
                    "check_updates_in_background",
                    "show_update_dialog",
                    "_handle_update_ok",
                    "copy_to_clipboard"
                ]
            }
        ],
        "functions": [
            "__init__",
            "move_to_center",
            "copy_app_info",
            "check_for_updates",
            "check_updates_in_background",
            "update_check_thread",
            "show_update_dialog",
            "_handle_update_ok",
            "copy_to_clipboard"
        ]
    },
    "anylabeling/views/labeling/widgets/navigator_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/navigator_widget.py",
        "imports": [
            "typing.List",
            "typing.Optional",
            "typing.Any",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtCore.QRect",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtGui.QBrush",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QMouseEvent",
            "PyQt5.QtGui.QPainter",
            "PyQt5.QtGui.QPen",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtWidgets.QSlider",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "anylabeling.views.labeling.chatbot.ChatbotDialogStyle",
            "PyQt5.QtGui.QPolygon"
        ],
        "classes": [
            {
                "class_name": "ClickableSlider",
                "methods": [
                    "__init__",
                    "mousePressEvent"
                ]
            },
            {
                "class_name": "NavigatorWidget",
                "methods": [
                    "__init__",
                    "set_image",
                    "_update_thumbnail",
                    "set_viewport",
                    "set_shapes",
                    "resizeEvent",
                    "paintEvent",
                    "_draw_shapes_overlay",
                    "_get_shape_color",
                    "_get_shape_brush",
                    "_points_in_bounds",
                    "_draw_rectangle_on_thumbnail",
                    "_draw_polygon_on_thumbnail",
                    "_draw_circle_on_thumbnail",
                    "_draw_line_on_thumbnail",
                    "_draw_linestrip_on_thumbnail",
                    "_draw_point_on_thumbnail",
                    "mousePressEvent",
                    "mouseMoveEvent",
                    "mouseReleaseEvent",
                    "wheelEvent",
                    "_emit_navigation_signal"
                ]
            },
            {
                "class_name": "NavigatorDialog",
                "methods": [
                    "__init__",
                    "resizeEvent",
                    "set_image",
                    "set_viewport",
                    "set_shapes",
                    "set_zoom_value",
                    "on_slider_changed",
                    "on_zoom_input_changed",
                    "zoom_in",
                    "zoom_out",
                    "handle_wheel_zoom"
                ]
            }
        ],
        "functions": [
            "__init__",
            "mousePressEvent",
            "__init__",
            "set_image",
            "_update_thumbnail",
            "set_viewport",
            "set_shapes",
            "resizeEvent",
            "paintEvent",
            "_draw_shapes_overlay",
            "_get_shape_color",
            "_get_shape_brush",
            "_points_in_bounds",
            "_draw_rectangle_on_thumbnail",
            "_draw_polygon_on_thumbnail",
            "_draw_circle_on_thumbnail",
            "_draw_line_on_thumbnail",
            "_draw_linestrip_on_thumbnail",
            "_draw_point_on_thumbnail",
            "mousePressEvent",
            "mouseMoveEvent",
            "mouseReleaseEvent",
            "wheelEvent",
            "_emit_navigation_signal",
            "__init__",
            "resizeEvent",
            "set_image",
            "set_viewport",
            "set_shapes",
            "set_zoom_value",
            "on_slider_changed",
            "on_zoom_input_changed",
            "zoom_in",
            "zoom_out",
            "handle_wheel_zoom"
        ]
    },
    "anylabeling/views/labeling/widgets/zoom_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/zoom_widget.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ZoomWidget",
                "methods": [
                    "__init__",
                    "minimumSizeHint"
                ]
            }
        ],
        "functions": [
            "__init__",
            "minimumSizeHint"
        ]
    },
    "anylabeling/views/labeling/widgets/__init__.py": {
        "file_name": "/anylabeling/views/labeling/widgets/__init__.py",
        "imports": [
            "about_dialog.AboutDialog",
            "auto_labeling.AutoLabelingWidget",
            "brightness_contrast_dialog.BrightnessContrastDialog",
            "canvas.Canvas",
            "chatbot_dialog.ChatbotDialog",
            "color_dialog.ColorDialog",
            "crosshair_settings_dialog.CrosshairSettingsDialog",
            "file_dialog_preview.FileDialogPreview",
            "filter_label_widget.GroupIDFilterComboBox",
            "filter_label_widget.LabelFilterComboBox",
            "label_dialog.DigitShortcutDialog",
            "label_dialog.GroupIDModifyDialog",
            "label_dialog.LabelDialog",
            "label_dialog.LabelModifyDialog",
            "label_dialog.LabelQLineEdit",
            "label_list_widget.LabelListWidget",
            "label_list_widget.LabelListWidgetItem",
            "model_dropdown_widget.SearchBar",
            "navigator_widget.NavigatorDialog",
            "overview_dialog.OverviewDialog",
            "polygon_sides_dialog.PolygonSidesDialog",
            "popup.Popup",
            "toolbar.ToolBar",
            "unique_label_qlist_widget.UniqueLabelQListWidget",
            "vqa_dialog.VQADialog",
            "zoom_widget.ZoomWidget"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/widgets/unique_label_qlist_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/unique_label_qlist_widget.py",
        "imports": [
            "html",
            "PyQt5.QtWidgets",
            "PyQt5.QtGui",
            "PyQt5.QtCore.Qt",
            "escapable_qlist_widget.EscapableQListWidget"
        ],
        "classes": [
            {
                "class_name": "UniqueLabelQListWidget",
                "methods": [
                    "mousePressEvent",
                    "find_items_by_label",
                    "create_item_from_label",
                    "set_item_label",
                    "update_item_color",
                    "remove_items_by_label"
                ]
            }
        ],
        "functions": [
            "mousePressEvent",
            "find_items_by_label",
            "create_item_from_label",
            "set_item_label",
            "update_item_color",
            "remove_items_by_label"
        ]
    },
    "anylabeling/views/labeling/widgets/vqa_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/vqa_dialog.py",
        "imports": [
            "os",
            "json",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtWidgets.QButtonGroup",
            "PyQt5.QtWidgets.QCheckBox",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QRadioButton",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QSplitter",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QIntValidator",
            "anylabeling.views.labeling.vqa.*",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.vqa.dialogs.ExportLabelsDialog",
            "anylabeling.views.labeling.widgets.popup.Popup"
        ],
        "classes": [
            {
                "class_name": "VQADialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_left_panel",
                    "load_config",
                    "save_config",
                    "load_images_folder",
                    "switch_image",
                    "update_image_display",
                    "save_current_image_data",
                    "load_current_image_data",
                    "update_navigation_state",
                    "check_duplicate_title",
                    "load_components_from_config",
                    "add_custom_component",
                    "edit_custom_component_by_object",
                    "edit_custom_component",
                    "update_component",
                    "handle_options_change",
                    "reset_deleted_options_to_default",
                    "update_all_labels_for_deleted_options",
                    "reset_deleted_options_in_json",
                    "update_modified_options",
                    "update_all_labels_for_modified_options",
                    "update_modified_options_in_json",
                    "rebuild_component_options",
                    "delete_custom_component",
                    "remove_component",
                    "open_ai_assistant",
                    "cancel_ai_processing",
                    "handle_ai_result",
                    "create_component",
                    "add_component_to_all_labels",
                    "add_component_to_json_file",
                    "clear_all_components",
                    "clear_all_components_silent",
                    "get_component_value",
                    "set_component_value",
                    "adjust_all_text_widgets_height",
                    "export_labels",
                    "clear_current",
                    "clean_all_labels_for_component",
                    "set_default_values",
                    "set_component_default_value",
                    "update_labels_title",
                    "update_current_labels_title",
                    "update_all_json_labels_title",
                    "update_title_in_json_file",
                    "remove_component_from_json_file",
                    "apply_to_all_label_files",
                    "update_dropdown_options",
                    "validate_page_input",
                    "on_page_input_finished",
                    "restore_current_page_number",
                    "closeEvent",
                    "resizeEvent",
                    "load_initial_image_data",
                    "refresh_data",
                    "showEvent"
                ]
            }
        ],
        "functions": [
            "__init__",
            "init_ui",
            "toggle_left_panel",
            "load_config",
            "save_config",
            "load_images_folder",
            "switch_image",
            "restore_panel_state",
            "update_image_display",
            "save_current_image_data",
            "load_current_image_data",
            "update_navigation_state",
            "check_duplicate_title",
            "load_components_from_config",
            "add_custom_component",
            "edit_custom_component_by_object",
            "edit_custom_component",
            "update_component",
            "handle_options_change",
            "reset_deleted_options_to_default",
            "update_all_labels_for_deleted_options",
            "reset_deleted_options_in_json",
            "update_modified_options",
            "update_all_labels_for_modified_options",
            "update_modified_options_in_json",
            "rebuild_component_options",
            "delete_custom_component",
            "remove_component",
            "open_ai_assistant",
            "cancel_ai_processing",
            "handle_ai_result",
            "create_component",
            "add_component_to_all_labels",
            "add_component_to_json_file",
            "clear_all_components",
            "clear_all_components_silent",
            "get_component_value",
            "set_component_value",
            "adjust_all_text_widgets_height",
            "export_labels",
            "clear_current",
            "clean_all_labels_for_component",
            "set_default_values",
            "set_component_default_value",
            "update_labels_title",
            "update_current_labels_title",
            "update_all_json_labels_title",
            "update_title_in_json_file",
            "remove_component_from_json_file",
            "apply_to_all_label_files",
            "update_dropdown_options",
            "validate_page_input",
            "on_page_input_finished",
            "restore_current_page_number",
            "closeEvent",
            "resizeEvent",
            "load_initial_image_data",
            "refresh_data",
            "finalize_refresh",
            "showEvent"
        ]
    },
    "anylabeling/views/labeling/widgets/label_list_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/label_list_widget.py",
        "imports": [
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtGui.QPalette",
            "PyQt5.QtWidgets.QStyle"
        ],
        "classes": [
            {
                "class_name": "HTMLDelegate",
                "methods": [
                    "__init__",
                    "paint",
                    "sizeHint"
                ]
            },
            {
                "class_name": "LabelListWidgetItem",
                "methods": [
                    "__init__",
                    "clone",
                    "set_shape",
                    "shape",
                    "__hash__",
                    "__repr__"
                ]
            },
            {
                "class_name": "StandardItemModel",
                "methods": [
                    "removeRows"
                ]
            },
            {
                "class_name": "LabelListWidget",
                "methods": [
                    "__init__",
                    "__len__",
                    "__getitem__",
                    "__iter__",
                    "item_dropped",
                    "item_changed",
                    "item_selection_changed_event",
                    "item_double_clicked_event",
                    "selected_items",
                    "scroll_to_item",
                    "add_iem",
                    "remove_item",
                    "select_item",
                    "find_item_by_shape",
                    "clear",
                    "item_at_index"
                ]
            }
        ],
        "functions": [
            "__init__",
            "paint",
            "sizeHint",
            "__init__",
            "clone",
            "set_shape",
            "shape",
            "__hash__",
            "__repr__",
            "removeRows",
            "__init__",
            "__len__",
            "__getitem__",
            "__iter__",
            "item_dropped",
            "item_changed",
            "item_selection_changed_event",
            "item_double_clicked_event",
            "selected_items",
            "scroll_to_item",
            "add_iem",
            "remove_item",
            "select_item",
            "find_item_by_shape",
            "clear",
            "item_at_index"
        ]
    },
    "anylabeling/views/labeling/widgets/brightness_contrast_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/brightness_contrast_dialog.py",
        "imports": [
            "PIL.Image",
            "PIL.ImageEnhance",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "utils.image.pil_to_qimage"
        ],
        "classes": [
            {
                "class_name": "BrightnessContrastDialog",
                "methods": [
                    "__init__",
                    "move_to_center",
                    "update_image",
                    "update_brightness_label",
                    "update_contrast_label",
                    "on_new_value",
                    "reset_values",
                    "confirm_values",
                    "_create_slider"
                ]
            }
        ],
        "functions": [
            "__init__",
            "move_to_center",
            "update_image",
            "update_brightness_label",
            "update_contrast_label",
            "on_new_value",
            "reset_values",
            "confirm_values",
            "_create_slider"
        ]
    },
    "anylabeling/views/labeling/widgets/chatbot_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/chatbot_dialog.py",
        "imports": [
            "base64",
            "datetime",
            "json",
            "os",
            "re",
            "shutil",
            "threading",
            "zipfile",
            "openai.OpenAI",
            "PIL.Image",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtCore.QEvent",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QButtonGroup",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QSplitter",
            "PyQt5.QtWidgets.QTabWidget",
            "PyQt5.QtWidgets.QSlider",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtGui.QCursor",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QTextCursor",
            "PyQt5.QtGui.QTextCharFormat",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.chatbot.*",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.general.open_url",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.widgets.model_dropdown_widget.ModelDropdown"
        ],
        "classes": [
            {
                "class_name": "ChatbotDialog",
                "methods": [
                    "__init__",
                    "show_model_dropdown",
                    "on_model_selected",
                    "on_provider_selected",
                    "switch_provider",
                    "on_api_address_changed",
                    "on_api_key_changed",
                    "resize_input",
                    "restore_send_button",
                    "update_image_preview",
                    "load_initial_data",
                    "update_import_buttons_visibility",
                    "open_image_file_or_folder",
                    "add_message",
                    "scroll_to_bottom",
                    "start_generation",
                    "stop_generation",
                    "add_loading_message",
                    "update_output",
                    "on_stream_finished",
                    "handle_loading_state",
                    "toggle_api_key_visibility",
                    "navigate_image",
                    "load_chat_for_current_image",
                    "run_all_images",
                    "show_progress_dialog_and_process",
                    "process_next_image",
                    "cancel_operation",
                    "finish_processing",
                    "import_export_dataset",
                    "eventFilter",
                    "stream_generation",
                    "set_components_enabled",
                    "set_chat_message_buttons_enabled",
                    "handle_error",
                    "resizeEvent",
                    "resubmit_edited_message",
                    "clear_messages_after",
                    "regenerate_response",
                    "on_text_changed",
                    "clear_conversation",
                    "hideAllTooltips",
                    "closeEvent",
                    "wheelEvent",
                    "show_message_input_context_menu"
                ]
            }
        ],
        "functions": [
            "__init__",
            "show_model_dropdown",
            "on_model_selected",
            "on_provider_selected",
            "switch_provider",
            "on_api_address_changed",
            "on_api_key_changed",
            "resize_input",
            "restore_send_button",
            "update_image_preview",
            "load_initial_data",
            "update_import_buttons_visibility",
            "open_image_file_or_folder",
            "add_message",
            "scroll_to_bottom",
            "start_generation",
            "stop_generation",
            "add_loading_message",
            "update_output",
            "on_stream_finished",
            "handle_loading_state",
            "toggle_api_key_visibility",
            "navigate_image",
            "load_chat_for_current_image",
            "run_all_images",
            "show_progress_dialog_and_process",
            "process_next_image",
            "cancel_operation",
            "finish_processing",
            "import_export_dataset",
            "export_dataset",
            "import_dataset",
            "eventFilter",
            "stream_generation",
            "check_for_cancellation",
            "set_components_enabled",
            "set_chat_message_buttons_enabled",
            "handle_error",
            "resizeEvent",
            "resubmit_edited_message",
            "clear_messages_after",
            "regenerate_response",
            "on_text_changed",
            "clear_conversation",
            "hideAllTooltips",
            "closeEvent",
            "wheelEvent",
            "show_message_input_context_menu"
        ]
    },
    "anylabeling/views/labeling/widgets/api_token_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/api_token_dialog.py",
        "imports": [
            "os",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtWidgets.QDialogButtonBox",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.style.get_lineedit_style",
            "anylabeling.views.labeling.utils.style.get_normal_button_style",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_cancel_btn_style"
        ],
        "classes": [
            {
                "class_name": "ApiTokenDialog",
                "methods": [
                    "__init__",
                    "_update_visibility_button",
                    "toggle_api_key_visibility",
                    "get_token",
                    "accept_and_update_cache"
                ]
            }
        ],
        "functions": [
            "__init__",
            "_update_visibility_button",
            "toggle_api_key_visibility",
            "get_token",
            "accept_and_update_cache"
        ]
    },
    "anylabeling/views/labeling/widgets/filter_label_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/filter_label_widget.py",
        "imports": [
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QComboBox"
        ],
        "classes": [
            {
                "class_name": "GroupIDFilterComboBox",
                "methods": [
                    "__init__",
                    "update_items"
                ]
            },
            {
                "class_name": "LabelFilterComboBox",
                "methods": [
                    "__init__",
                    "update_items"
                ]
            }
        ],
        "functions": [
            "__init__",
            "update_items",
            "__init__",
            "update_items"
        ]
    },
    "anylabeling/views/labeling/widgets/color_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/color_dialog.py",
        "imports": [
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ColorDialog",
                "methods": [
                    "__init__",
                    "get_color",
                    "check_restore"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_color",
            "check_restore"
        ]
    },
    "anylabeling/views/labeling/widgets/overview_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/overview_dialog.py",
        "imports": [
            "os",
            "csv",
            "json",
            "zipfile",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QVBoxLayout",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_progress_dialog_style",
            "anylabeling.views.labeling.widgets.popup.Popup"
        ],
        "classes": [
            {
                "class_name": "OverviewDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "move_to_center",
                    "get_image_file_list",
                    "get_label_infos",
                    "get_total_infos",
                    "get_shape_infos_table",
                    "populate_table",
                    "update_range",
                    "export_to_csv",
                    "toggle_info"
                ]
            }
        ],
        "functions": [
            "__init__",
            "init_ui",
            "move_to_center",
            "get_image_file_list",
            "get_label_infos",
            "get_total_infos",
            "get_shape_infos_table",
            "populate_table",
            "update_range",
            "export_to_csv",
            "toggle_info"
        ]
    },
    "anylabeling/views/labeling/widgets/polygon_sides_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/polygon_sides_dialog.py",
        "imports": [
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QVBoxLayout",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "PolygonSidesDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "get_value"
                ]
            }
        ],
        "functions": [
            "__init__",
            "init_ui",
            "get_value"
        ]
    },
    "anylabeling/views/labeling/widgets/canvas.py": {
        "file_name": "/anylabeling/views/labeling/widgets/canvas.py",
        "imports": [
            "math",
            "copy.deepcopy",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QWheelEvent",
            "anylabeling.services.auto_labeling.types.AutoLabelingMode",
            "anylabeling.views.labeling.utils.colormap.label_colormap",
            ".utils",
            "shape.Shape"
        ],
        "classes": [
            {
                "class_name": "Canvas",
                "methods": [
                    "__init__",
                    "set_loading",
                    "set_auto_labeling_mode",
                    "set_auto_decode_mode",
                    "reset_auto_decode_state",
                    "fill_drawing",
                    "set_fill_drawing",
                    "create_mode",
                    "create_mode",
                    "store_shapes",
                    "store_moving_shape",
                    "is_shape_restorable",
                    "restore_shape",
                    "enterEvent",
                    "leaveEvent",
                    "focusOutEvent",
                    "is_visible",
                    "drawing",
                    "editing",
                    "set_auto_labeling",
                    "get_mode",
                    "set_editing",
                    "un_highlight",
                    "selected_vertex",
                    "selected_edge",
                    "_should_trigger_auto_decode",
                    "mouseMoveEvent",
                    "add_point_to_edge",
                    "remove_selected_point",
                    "on_auto_decode_timeout",
                    "mousePressEvent",
                    "mouseReleaseEvent",
                    "end_move",
                    "hide_background_shapes",
                    "set_hiding",
                    "can_close_shape",
                    "mouseDoubleClickEvent",
                    "select_shapes",
                    "select_shape_point",
                    "calculate_offsets",
                    "get_adjoint_points",
                    "get_cross_point",
                    "bounded_move_vertex",
                    "bounded_move_shapes",
                    "rotate_point",
                    "bounded_rotate_shapes",
                    "deselect_shape",
                    "delete_selected",
                    "delete_shape",
                    "duplicate_selected_shapes",
                    "bounded_shift_shapes",
                    "paintEvent",
                    "transform_pos",
                    "offset_to_center",
                    "out_off_pixmap",
                    "finalise",
                    "update_auto_labeling_marks",
                    "close_enough",
                    "intersection_point",
                    "intersecting_edges",
                    "sizeHint",
                    "minimumSizeHint",
                    "wheelEvent",
                    "_scale_rectangle",
                    "_adjust_rectangle_edge",
                    "move_by_keyboard",
                    "rotate_by_keyboard",
                    "keyPressEvent",
                    "keyReleaseEvent",
                    "set_last_label",
                    "undo_last_line",
                    "undo_last_point",
                    "load_pixmap",
                    "load_shapes",
                    "set_shape_visible",
                    "current_cursor",
                    "override_cursor",
                    "restore_cursor",
                    "reset_state",
                    "set_cross_line",
                    "gen_new_group_id",
                    "merge_group_ids",
                    "group_selected_shapes",
                    "ungroup_selected_shapes"
                ]
            }
        ],
        "functions": [
            "__init__",
            "set_loading",
            "set_auto_labeling_mode",
            "set_auto_decode_mode",
            "reset_auto_decode_state",
            "fill_drawing",
            "set_fill_drawing",
            "create_mode",
            "create_mode",
            "store_shapes",
            "store_moving_shape",
            "is_shape_restorable",
            "restore_shape",
            "enterEvent",
            "leaveEvent",
            "focusOutEvent",
            "is_visible",
            "drawing",
            "editing",
            "set_auto_labeling",
            "get_mode",
            "set_editing",
            "un_highlight",
            "selected_vertex",
            "selected_edge",
            "_should_trigger_auto_decode",
            "mouseMoveEvent",
            "add_point_to_edge",
            "remove_selected_point",
            "on_auto_decode_timeout",
            "mousePressEvent",
            "mouseReleaseEvent",
            "end_move",
            "hide_background_shapes",
            "set_hiding",
            "can_close_shape",
            "mouseDoubleClickEvent",
            "select_shapes",
            "select_shape_point",
            "calculate_offsets",
            "get_adjoint_points",
            "get_cross_point",
            "bounded_move_vertex",
            "bounded_move_shapes",
            "rotate_point",
            "bounded_rotate_shapes",
            "deselect_shape",
            "delete_selected",
            "delete_shape",
            "duplicate_selected_shapes",
            "bounded_shift_shapes",
            "paintEvent",
            "transform_pos",
            "offset_to_center",
            "out_off_pixmap",
            "finalise",
            "update_auto_labeling_marks",
            "close_enough",
            "intersection_point",
            "intersecting_edges",
            "sizeHint",
            "minimumSizeHint",
            "wheelEvent",
            "_scale_rectangle",
            "_adjust_rectangle_edge",
            "move_by_keyboard",
            "rotate_by_keyboard",
            "keyPressEvent",
            "keyReleaseEvent",
            "set_last_label",
            "undo_last_line",
            "undo_last_point",
            "load_pixmap",
            "load_shapes",
            "set_shape_visible",
            "current_cursor",
            "override_cursor",
            "restore_cursor",
            "reset_state",
            "set_cross_line",
            "gen_new_group_id",
            "merge_group_ids",
            "group_selected_shapes",
            "ungroup_selected_shapes"
        ]
    },
    "anylabeling/views/labeling/widgets/file_dialog_preview.py": {
        "file_name": "/anylabeling/views/labeling/widgets/file_dialog_preview.py",
        "imports": [
            "json",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets"
        ],
        "classes": [
            {
                "class_name": "ScrollAreaPreview",
                "methods": [
                    "__init__",
                    "set_text",
                    "set_pixmap",
                    "clear"
                ]
            },
            {
                "class_name": "FileDialogPreview",
                "methods": [
                    "__init__",
                    "on_change"
                ]
            }
        ],
        "functions": [
            "__init__",
            "set_text",
            "set_pixmap",
            "clear",
            "__init__",
            "on_change"
        ]
    },
    "anylabeling/views/labeling/widgets/escapable_qlist_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/escapable_qlist_widget.py",
        "imports": [
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt"
        ],
        "classes": [
            {
                "class_name": "EscapableQListWidget",
                "methods": [
                    "keyPressEvent"
                ]
            }
        ],
        "functions": [
            "keyPressEvent"
        ]
    },
    "anylabeling/views/labeling/widgets/crosshair_settings_dialog.py": {
        "file_name": "/anylabeling/views/labeling/widgets/crosshair_settings_dialog.py",
        "imports": [
            "PyQt5.QtWidgets",
            "PyQt5.QtCore",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "CrosshairSettingsDialog",
                "methods": [
                    "__init__",
                    "move_to_center",
                    "update_width_slider",
                    "update_width_spinbox",
                    "update_opacity_slider",
                    "update_opacity_spinbox",
                    "choose_color",
                    "reset_settings",
                    "get_settings"
                ]
            }
        ],
        "functions": [
            "__init__",
            "move_to_center",
            "update_width_slider",
            "update_width_spinbox",
            "update_opacity_slider",
            "update_opacity_spinbox",
            "choose_color",
            "reset_settings",
            "get_settings"
        ]
    },
    "anylabeling/views/labeling/widgets/model_dropdown_widget.py": {
        "file_name": "/anylabeling/views/labeling/widgets/model_dropdown_widget.py",
        "imports": [
            "difflib.SequenceMatcher",
            "pathlib.Path",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtGui.QIcon",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.utils.load_json",
            "anylabeling.views.labeling.chatbot.utils.save_json",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "SearchBar",
                "methods": [
                    "__init__",
                    "on_resize"
                ]
            },
            {
                "class_name": "ModelItem",
                "methods": [
                    "__init__",
                    "enterEvent",
                    "leaveEvent",
                    "mousePressEvent",
                    "toggle_favorite",
                    "update_selection",
                    "update_favorite"
                ]
            },
            {
                "class_name": "ProviderSection",
                "methods": [
                    "__init__",
                    "add_model_item"
                ]
            },
            {
                "class_name": "ModelDropdown",
                "methods": [
                    "__init__",
                    "update_models_data",
                    "save_models_data",
                    "setup_model_list",
                    "select_model",
                    "toggle_favorite",
                    "filter_models"
                ]
            }
        ],
        "functions": [
            "__init__",
            "on_resize",
            "__init__",
            "enterEvent",
            "leaveEvent",
            "mousePressEvent",
            "toggle_favorite",
            "update_selection",
            "update_favorite",
            "__init__",
            "add_model_item",
            "__init__",
            "update_models_data",
            "save_models_data",
            "setup_model_list",
            "select_model",
            "toggle_favorite",
            "filter_models"
        ]
    },
    "anylabeling/views/labeling/widgets/searchable_model_dropdown.py": {
        "file_name": "/anylabeling/views/labeling/widgets/searchable_model_dropdown.py",
        "imports": [
            "difflib.SequenceMatcher",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QScrollArea",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtGui.QIcon",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.utils.load_json",
            "anylabeling.views.labeling.chatbot.utils.save_json",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "SearchBar",
                "methods": [
                    "__init__",
                    "on_resize"
                ]
            },
            {
                "class_name": "ProviderSection",
                "methods": [
                    "__init__",
                    "add_model_item"
                ]
            },
            {
                "class_name": "ModelItem",
                "methods": [
                    "__init__",
                    "enterEvent",
                    "leaveEvent",
                    "mousePressEvent",
                    "toggle_favorite",
                    "update_selection",
                    "update_favorite"
                ]
            },
            {
                "class_name": "SearchableModelDropdownPopup",
                "methods": [
                    "__init__",
                    "setup_model_list",
                    "select_model",
                    "update_models_data",
                    "toggle_favorite",
                    "save_models_data",
                    "filter_models"
                ]
            }
        ],
        "functions": [
            "__init__",
            "on_resize",
            "__init__",
            "add_model_item",
            "__init__",
            "enterEvent",
            "leaveEvent",
            "mousePressEvent",
            "toggle_favorite",
            "update_selection",
            "update_favorite",
            "__init__",
            "setup_model_list",
            "select_model",
            "update_models_data",
            "toggle_favorite",
            "save_models_data",
            "filter_models"
        ]
    },
    "anylabeling/views/labeling/widgets/auto_labeling/__init__.py": {
        "file_name": "/anylabeling/views/labeling/widgets/auto_labeling/__init__.py",
        "imports": [
            "auto_labeling.*"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/widgets/auto_labeling/auto_labeling.py": {
        "file_name": "/anylabeling/views/labeling/widgets/auto_labeling/auto_labeling.py",
        "imports": [
            "os",
            "yaml",
            "collections",
            "PyQt5.uic",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtCore.pyqtSlot",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QWidget",
            "anylabeling.services.auto_labeling.model_manager.ModelManager",
            "anylabeling.services.auto_labeling.types.AutoLabelingMode",
            "anylabeling.services.auto_labeling._AUTO_LABELING_IOU_MODELS",
            "anylabeling.services.auto_labeling._AUTO_LABELING_CONF_MODELS",
            "anylabeling.services.auto_labeling._SKIP_DET_MODELS",
            "anylabeling.services.auto_labeling._SKIP_PREDICTION_ON_NEW_MARKS_MODELS",
            "anylabeling.views.labeling.chatbot.style.ChatbotDialogStyle",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.style.get_lineedit_style",
            "anylabeling.views.labeling.utils.style.get_double_spinbox_style",
            "anylabeling.views.labeling.utils.style.get_normal_button_style",
            "anylabeling.views.labeling.utils.style.get_highlight_button_style",
            "anylabeling.views.labeling.utils.style.get_toggle_button_style",
            "anylabeling.views.labeling.widgets.api_token_dialog.ApiTokenDialog",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown.load_json",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown.save_json",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown._MODELS_CONFIG_PATH",
            "anylabeling.views.labeling.widgets.searchable_model_dropdown.SearchableModelDropdownPopup"
        ],
        "classes": [
            {
                "class_name": "AutoLabelingWidget",
                "methods": [
                    "__init__",
                    "init_model_data",
                    "_sort_model_data",
                    "show_model_dropdown",
                    "on_model_selected",
                    "populate_upn_combobox",
                    "populate_gd_combobox",
                    "populate_florence2_combobox",
                    "update_button_colors",
                    "set_auto_labeling_mode",
                    "run_prediction",
                    "run_vl_prediction",
                    "unload_and_hide",
                    "on_new_model_status",
                    "on_new_model_loaded",
                    "update_upn_mode_ui",
                    "update_groundingdino_mode_ui",
                    "update_florence2_mode_ui",
                    "on_output_modes_changed",
                    "update_visible_widgets",
                    "hide_labeling_widgets",
                    "on_new_marks",
                    "on_open",
                    "on_close",
                    "on_conf_value_changed",
                    "on_iou_value_changed",
                    "on_preserve_existing_annotations_state_changed",
                    "on_reset_tracker",
                    "on_set_api_token",
                    "on_cache_auto_label_changed",
                    "add_new_prompt",
                    "on_upn_mode_changed",
                    "on_gd_mode_changed",
                    "on_florence2_mode_changed",
                    "update_florence2_widgets",
                    "on_auto_decode_toggled",
                    "on_clear_clicked",
                    "on_finish_clicked",
                    "on_skip_detection_toggled",
                    "_extract_shapes_for_recognition",
                    "on_mask_fineness_changed"
                ]
            }
        ],
        "functions": [
            "__init__",
            "set_enable_tools",
            "init_model_data",
            "_sort_model_data",
            "top_level_sort_key",
            "inner_sort_key",
            "show_model_dropdown",
            "on_model_selected",
            "populate_upn_combobox",
            "populate_gd_combobox",
            "populate_florence2_combobox",
            "update_button_colors",
            "set_auto_labeling_mode",
            "run_prediction",
            "run_vl_prediction",
            "unload_and_hide",
            "on_new_model_status",
            "on_new_model_loaded",
            "update_upn_mode_ui",
            "update_groundingdino_mode_ui",
            "update_florence2_mode_ui",
            "on_output_modes_changed",
            "update_visible_widgets",
            "hide_labeling_widgets",
            "on_new_marks",
            "on_open",
            "on_close",
            "on_conf_value_changed",
            "on_iou_value_changed",
            "on_preserve_existing_annotations_state_changed",
            "on_reset_tracker",
            "on_set_api_token",
            "on_cache_auto_label_changed",
            "add_new_prompt",
            "on_upn_mode_changed",
            "on_gd_mode_changed",
            "on_florence2_mode_changed",
            "update_florence2_widgets",
            "on_auto_decode_toggled",
            "on_clear_clicked",
            "on_finish_clicked",
            "on_skip_detection_toggled",
            "_extract_shapes_for_recognition",
            "on_mask_fineness_changed"
        ]
    },
    "anylabeling/views/labeling/utils/colormap.py": {
        "file_name": "/anylabeling/views/labeling/utils/colormap.py",
        "imports": [
            "numpy"
        ],
        "classes": [],
        "functions": [
            "label_colormap"
        ]
    },
    "anylabeling/views/labeling/utils/batch.py": {
        "file_name": "/anylabeling/views/labeling/utils/batch.py",
        "imports": [
            "base64",
            "json",
            "os.path",
            "PIL.Image",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QDialogButtonBox",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils._io.io_open",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_msg_box_style",
            "anylabeling.views.labeling.widgets.popup.Popup"
        ],
        "classes": [
            {
                "class_name": "TextInputDialog",
                "methods": [
                    "__init__",
                    "init_ui",
                    "get_input_text"
                ]
            }
        ],
        "functions": [
            "__init__",
            "init_ui",
            "get_input_text",
            "get_image_size",
            "finish_processing",
            "cancel_operation",
            "save_auto_labeling_result",
            "process_next_image",
            "show_progress_dialog_and_process",
            "update_progress",
            "run_all_images"
        ]
    },
    "anylabeling/views/labeling/utils/crop.py": {
        "file_name": "/anylabeling/views/labeling/utils/crop.py",
        "imports": [
            "json",
            "multiprocessing",
            "os",
            "os.path",
            "shutil",
            "sys",
            "pathlib.Path",
            "cv2",
            "numpy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QMessageBox",
            "anylabeling.views.labeling.chatbot.style.ChatbotDialogStyle",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_cancel_btn_style",
            "anylabeling.views.labeling.utils.style.get_export_option_style",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_msg_box_style",
            "anylabeling.views.labeling.utils.style.get_progress_dialog_style"
        ],
        "classes": [],
        "functions": [
            "crop_and_save",
            "process_single_image",
            "save_crop",
            "browse_export_path"
        ]
    },
    "anylabeling/views/labeling/utils/shape.py": {
        "file_name": "/anylabeling/views/labeling/utils/shape.py",
        "imports": [
            "json",
            "math",
            "uuid",
            "numpy",
            "PIL.Image",
            "PIL.ImageDraw",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QProgressDialog",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.opencv.get_bounding_boxes",
            "anylabeling.views.labeling.widgets.PolygonSidesDialog",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.*",
            "anylabeling.services.auto_labeling.utils.calculate_rotation_theta"
        ],
        "classes": [],
        "functions": [
            "get_conversion_params",
            "shape_conversion",
            "polygons_to_mask",
            "shape_to_mask",
            "shapes_to_label",
            "masks_to_bboxes",
            "rectangle_from_diagonal"
        ]
    },
    "anylabeling/views/labeling/utils/__init__.py": {
        "file_name": "/anylabeling/views/labeling/utils/__init__.py",
        "imports": [
            "batch.run_all_images",
            "colormap.label_colormap",
            "crop.save_crop",
            "export.export_yolo_annotation",
            "export.export_voc_annotation",
            "export.export_coco_annotation",
            "export.export_dota_annotation",
            "export.export_mask_annotation",
            "export.export_mot_annotation",
            "export.export_odvg_annotation",
            "export.export_pporc_annotation",
            "export.export_vlm_r1_ovd_annotation",
            "general.gradient_text",
            "general.hex_to_rgb",
            "general.is_chinese",
            "general.find_most_similar_label",
            "image.check_img_exif",
            "image.get_pil_img_dim",
            "image.img_arr_to_b64",
            "image.img_b64_to_arr",
            "image.img_data_to_arr",
            "image.img_data_to_pil",
            "image.img_data_to_png_data",
            "image.img_pil_to_data",
            "image.process_image_exif",
            "_io.io_open",
            "qt.Struct",
            "qt.add_actions",
            "qt.scan_all_images",
            "qt.distance",
            "qt.distance_to_line",
            "qt.fmt_shortcut",
            "qt.label_validator",
            "qt.new_action",
            "qt.new_button",
            "qt.new_icon",
            "qt.on_thumbnail_click",
            "shape.masks_to_bboxes",
            "shape.polygons_to_mask",
            "shape.shape_to_mask",
            "shape.shapes_to_label",
            "shape.rectangle_from_diagonal",
            "shape.shape_conversion",
            "upload.upload_image_flags_file",
            "upload.upload_label_flags_file",
            "upload.upload_shape_attrs_file",
            "upload.upload_label_classes_file",
            "upload.upload_yolo_annotation",
            "upload.upload_voc_annotation",
            "upload.upload_coco_annotation",
            "upload.upload_dota_annotation",
            "upload.upload_mask_annotation",
            "upload.upload_mot_annotation",
            "upload.upload_odvg_annotation",
            "upload.upload_mmgd_annotation",
            "upload.upload_ppocr_annotation",
            "upload.upload_vlm_r1_ovd_annotation",
            "video.open_video_file"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/utils/video.py": {
        "file_name": "/anylabeling/views/labeling/utils/video.py",
        "imports": [
            "cv2",
            "os",
            "os.path",
            "shutil",
            "tempfile",
            "subprocess",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QFileDialog",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QProgressDialog",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSpinBox",
            "PyQt5.QtWidgets.QApplication",
            "anylabeling.views.labeling.chatbot.style.ChatbotDialogStyle",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.get_msg_box_style",
            "anylabeling.views.labeling.utils.style.get_progress_dialog_style",
            "anylabeling.views.labeling.utils.style.get_ok_btn_style",
            "anylabeling.views.labeling.utils.style.get_cancel_btn_style",
            "anylabeling.views.labeling.widgets.Popup"
        ],
        "classes": [
            {
                "class_name": "FrameExtractionDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "update_example",
                    "get_values"
                ]
            }
        ],
        "functions": [
            "__init__",
            "setup_ui",
            "update_example",
            "get_values",
            "extract_frames_from_video",
            "open_video_file"
        ]
    },
    "anylabeling/views/labeling/utils/image.py": {
        "file_name": "/anylabeling/views/labeling/utils/image.py",
        "imports": [
            "os",
            "os.path",
            "base64",
            "io",
            "shutil",
            "numpy",
            "PIL.Image",
            "PIL.ImageOps",
            "PyQt5.QtGui",
            "labeling.logger.logger"
        ],
        "classes": [],
        "functions": [
            "img_data_to_pil",
            "img_data_to_arr",
            "img_b64_to_arr",
            "img_pil_to_data",
            "pil_to_qimage",
            "img_arr_to_b64",
            "img_data_to_png_data",
            "get_pil_img_dim",
            "check_img_exif",
            "process_image_exif"
        ]
    },
    "anylabeling/views/labeling/utils/export.py": {
        "file_name": "/anylabeling/views/labeling/utils/export.py",
        "imports": [
            "json",
            "os",
            "os.path",
            "pathlib",
            "shutil",
            "time",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "anylabeling.views.labeling.label_converter.LabelConverter",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.*"
        ],
        "classes": [
            {
                "class_name": "ExportThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            }
        ],
        "functions": [
            "__init__",
            "run",
            "_check_filename_exist",
            "export_yolo_annotation",
            "browse_export_path",
            "export_voc_annotation",
            "browse_export_path",
            "export_coco_annotation",
            "browse_export_path",
            "on_export_finished",
            "export_dota_annotation",
            "browse_export_path",
            "export_mask_annotation",
            "browse_export_path",
            "export_mot_annotation",
            "browse_export_path",
            "on_export_finished",
            "export_odvg_annotation",
            "export_pporc_annotation",
            "browse_export_path",
            "export_vlm_r1_ovd_annotation",
            "browse_export_file",
            "_update_preview",
            "_handle_class_file_upload",
            "on_export_finished"
        ]
    },
    "anylabeling/views/labeling/utils/general.py": {
        "file_name": "/anylabeling/views/labeling/utils/general.py",
        "imports": [
            "re",
            "math",
            "textwrap",
            "platform",
            "subprocess",
            "webbrowser",
            "difflib.SequenceMatcher",
            "importlib_metadata.version",
            "typing.Iterator",
            "typing.Tuple"
        ],
        "classes": [],
        "functions": [
            "format_bold",
            "format_color",
            "gradient_text",
            "color_function",
            "interpolate",
            "gradient_gen",
            "hex_to_rgb",
            "indent_text",
            "is_chinese",
            "is_possible_rectangle",
            "square_dist",
            "collect_system_info",
            "find_most_similar_label",
            "get_installed_package_version",
            "get_cuda_version",
            "get_gpu_info",
            "open_url"
        ]
    },
    "anylabeling/views/labeling/utils/qt.py": {
        "file_name": "/anylabeling/views/labeling/utils/qt.py",
        "imports": [
            "natsort",
            "os",
            "os.path",
            "math.sqrt",
            "numpy",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore",
            "PyQt5.QtGui",
            "PyQt5.QtWidgets",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [
            {
                "class_name": "Struct",
                "methods": [
                    "__init__"
                ]
            }
        ],
        "functions": [
            "scan_all_images",
            "new_icon",
            "new_icon_path",
            "new_button",
            "new_action",
            "add_actions",
            "label_validator",
            "__init__",
            "distance",
            "distance_to_line",
            "fmt_shortcut",
            "on_thumbnail_click",
            "_on_click"
        ]
    },
    "anylabeling/views/labeling/utils/_io.py": {
        "file_name": "/anylabeling/views/labeling/utils/_io.py",
        "imports": [
            "io",
            "contextlib"
        ],
        "classes": [],
        "functions": [
            "io_open"
        ]
    },
    "anylabeling/views/labeling/utils/upload.py": {
        "file_name": "/anylabeling/views/labeling/utils/upload.py",
        "imports": [
            "json",
            "jsonlines",
            "os",
            "os.path",
            "time",
            "yaml",
            "PyQt5.QtWidgets",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QProgressDialog",
            "anylabeling.views.labeling.label_converter.LabelConverter",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.widgets.Popup",
            "anylabeling.views.labeling.utils.qt.new_icon_path",
            "anylabeling.views.labeling.utils.style.*",
            "anylabeling.views.labeling.utils.export._check_filename_exist"
        ],
        "classes": [
            {
                "class_name": "UploadPPOCRThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            },
            {
                "class_name": "UploadOdvgThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            },
            {
                "class_name": "UploadMotThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            },
            {
                "class_name": "UploadCocoThread",
                "methods": [
                    "__init__",
                    "run"
                ]
            }
        ],
        "functions": [
            "__init__",
            "run",
            "__init__",
            "run",
            "__init__",
            "run",
            "__init__",
            "run",
            "upload_vlm_r1_ovd_annotation",
            "upload_ppocr_annotation",
            "on_upload_finished",
            "upload_odvg_annotation",
            "on_upload_finished",
            "upload_mmgd_annotation",
            "browse_json_folder",
            "on_ok_clicked",
            "upload_mot_annotation",
            "on_upload_finished",
            "upload_mask_annotation",
            "browse_upload_folder",
            "upload_dota_annotation",
            "browse_upload_folder",
            "upload_coco_annotation",
            "on_upload_finished",
            "upload_voc_annotation",
            "browse_upload_folder",
            "upload_yolo_annotation",
            "browse_upload_folder",
            "upload_label_classes_file",
            "upload_shape_attrs_file",
            "upload_label_flags_file",
            "upload_image_flags_file"
        ]
    },
    "anylabeling/views/labeling/utils/update_checker.py": {
        "file_name": "/anylabeling/views/labeling/utils/update_checker.py",
        "imports": [
            "requests",
            "threading",
            "packaging.version",
            "anylabeling.app_info.__version__",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [],
        "functions": [
            "check_for_updates_async",
            "update_check_thread",
            "check_for_updates_sync"
        ]
    },
    "anylabeling/views/labeling/utils/style.py": {
        "file_name": "/anylabeling/views/labeling/utils/style.py",
        "imports": [
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [],
        "functions": [
            "get_progress_dialog_style",
            "get_msg_box_style",
            "get_ok_btn_style",
            "get_cancel_btn_style",
            "get_export_option_style",
            "get_normal_button_style",
            "get_toggle_button_style",
            "get_highlight_button_style",
            "get_spinbox_style",
            "get_double_spinbox_style",
            "get_lineedit_style"
        ]
    },
    "anylabeling/views/labeling/utils/opencv.py": {
        "file_name": "/anylabeling/views/labeling/utils/opencv.py",
        "imports": [
            "os.path",
            "cv2",
            "numpy",
            "qimage2ndarray",
            "PyQt5.QtGui",
            "PyQt5.QtGui.QImage"
        ],
        "classes": [],
        "functions": [
            "qt_img_to_rgb_cv_img",
            "qt_img_to_cv_img",
            "cv_img_to_qt_img",
            "get_bounding_boxes"
        ]
    },
    "anylabeling/views/labeling/chatbot/render.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/render.py",
        "imports": [
            "markdown",
            "markdown.extensions.fenced_code",
            "markdown.extensions.codehilite",
            "markdown.extensions.tables",
            "markdown.extensions.toc",
            "markdown.extensions.attr_list",
            "markdown.extensions.smarty"
        ],
        "classes": [],
        "functions": [
            "convert_markdown_to_html"
        ]
    },
    "anylabeling/views/labeling/chatbot/provider.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/provider.py",
        "imports": [
            "json",
            "os",
            "subprocess",
            "threading",
            "time",
            "openai.OpenAI",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.utils.EventTracker",
            "anylabeling.views.labeling.chatbot.utils.load_json",
            "anylabeling.views.labeling.chatbot.utils.save_json",
            "anylabeling.views.labeling.logger.logger"
        ],
        "classes": [],
        "functions": [
            "init_model_config",
            "get_models_data",
            "fetch_models_async",
            "get_models_id_list",
            "get_default_model_id",
            "get_providers_data"
        ]
    },
    "anylabeling/views/labeling/chatbot/utils.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/utils.py",
        "imports": [
            "json",
            "os",
            "time"
        ],
        "classes": [
            {
                "class_name": "EventTracker",
                "methods": [
                    "__new__",
                    "increment",
                    "get_count",
                    "get_all_counts",
                    "reset"
                ]
            }
        ],
        "functions": [
            "__new__",
            "increment",
            "get_count",
            "get_all_counts",
            "reset",
            "load_json",
            "save_json",
            "set_icon_path"
        ]
    },
    "anylabeling/views/labeling/chatbot/__init__.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/__init__.py",
        "imports": [
            "animation.*",
            "chat.*",
            "config.*",
            "general.*",
            "handler.*",
            "provider.*",
            "render.*",
            "style.*",
            "utils.*"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/chatbot/handler.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/handler.py",
        "imports": [
            "PyQt5.QtCore.QObject",
            "PyQt5.QtCore.pyqtSignal"
        ],
        "classes": [
            {
                "class_name": "StreamingHandler",
                "methods": [
                    "__init__",
                    "reset",
                    "append_text",
                    "get_current_message",
                    "start_loading",
                    "stop_loading",
                    "start_typing",
                    "stop_typing",
                    "report_error"
                ]
            }
        ],
        "functions": [
            "__init__",
            "reset",
            "append_text",
            "get_current_message",
            "start_loading",
            "stop_loading",
            "start_typing",
            "stop_typing",
            "report_error"
        ]
    },
    "anylabeling/views/labeling/chatbot/config.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/config.py",
        "imports": [
            "os"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/chatbot/general.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/general.py",
        "imports": [
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.pyqtSignal",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QTextEdit"
        ],
        "classes": [
            {
                "class_name": "BatchProcessDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "center_on_parent",
                    "get_prompt",
                    "exec_"
                ]
            }
        ],
        "functions": [
            "__init__",
            "setup_ui",
            "center_on_parent",
            "get_prompt",
            "exec_"
        ]
    },
    "anylabeling/views/labeling/chatbot/chat.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/chat.py",
        "imports": [
            "PyQt5.QtCore.QEasingCurve",
            "PyQt5.QtCore.QPropertyAnimation",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtGui.QIcon",
            "PyQt5.QtGui.QPixmap",
            "PyQt5.QtGui.QTextCursor",
            "PyQt5.QtGui.QDesktopServices",
            "PyQt5.QtWidgets.QApplication",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QMenu",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QSizePolicy",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWebEngineWidgets.QWebEngineView",
            "anylabeling.views.labeling.chatbot.config.*",
            "anylabeling.views.labeling.chatbot.render.*",
            "anylabeling.views.labeling.chatbot.style.*",
            "anylabeling.views.labeling.chatbot.utils.*",
            "anylabeling.views.labeling.utils.qt.new_icon",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [
            {
                "class_name": "ChatMessage",
                "methods": [
                    "__init__",
                    "_process_content",
                    "_create_content_label",
                    "set_action_buttons_enabled",
                    "update_width_constraint",
                    "resizeEvent",
                    "copy_content_to_clipboard",
                    "reset_copy_button",
                    "adjust_height_after_animation",
                    "apply_webview_height",
                    "enter_edit_mode",
                    "save_edit",
                    "exit_edit_mode",
                    "resend_message",
                    "adjust_height_during_edit",
                    "regenerate_response",
                    "confirm_delete_message",
                    "delete_message",
                    "enterEvent",
                    "leaveEvent",
                    "show_context_menu",
                    "handle_external_link"
                ]
            }
        ],
        "functions": [
            "__init__",
            "_process_content",
            "_create_content_label",
            "set_action_buttons_enabled",
            "update_width_constraint",
            "resizeEvent",
            "copy_content_to_clipboard",
            "reset_copy_button",
            "adjust_height_after_animation",
            "apply_webview_height",
            "enter_edit_mode",
            "save_edit",
            "exit_edit_mode",
            "resend_message",
            "adjust_height_during_edit",
            "regenerate_response",
            "confirm_delete_message",
            "delete_message",
            "enterEvent",
            "leaveEvent",
            "show_context_menu",
            "handle_external_link"
        ]
    },
    "anylabeling/views/labeling/chatbot/style.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/style.py",
        "imports": [
            "typing.Dict",
            "typing.List",
            "typing.Tuple",
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtWidgets.QFrame",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QGridLayout",
            "PyQt5.QtCore.Qt",
            "anylabeling.views.labeling.chatbot.config.*"
        ],
        "classes": [
            {
                "class_name": "CustomTooltip",
                "methods": [
                    "__init__",
                    "show_at"
                ]
            },
            {
                "class_name": "ChatbotDialogStyle",
                "methods": [
                    "get_menu_style",
                    "get_dialog_style",
                    "get_main_splitter_style",
                    "get_provider_button_style",
                    "get_left_widget_style",
                    "get_middle_widget_style",
                    "get_chat_container_style",
                    "get_chat_scroll_area_style",
                    "get_input_container_style",
                    "get_input_frame_style",
                    "get_message_input_style",
                    "get_send_button_style",
                    "get_image_preview_style",
                    "get_button_style",
                    "get_model_button_style",
                    "get_settings_label_style",
                    "get_help_btn_style",
                    "get_settings_edit_style",
                    "get_right_splitter_style",
                    "get_right_widget_style",
                    "get_temperature_label_style",
                    "get_tab_widget_style",
                    "get_slider_style",
                    "get_settings_tabs_style",
                    "get_spinbox_style",
                    "get_progress_dialog_style",
                    "get_option_dialog_style"
                ]
            },
            {
                "class_name": "ChatMessageStyle",
                "methods": [
                    "get_bubble_style",
                    "get_role_label_style",
                    "get_role_label_background_style",
                    "get_button_style",
                    "get_content_label_style",
                    "get_fade_in_text_style",
                    "get_animation_style",
                    "get_edit_area_style",
                    "get_edit_button_wdiget_style",
                    "get_resend_button_style",
                    "get_cancel_button_style",
                    "get_save_button_style"
                ]
            }
        ],
        "functions": [
            "__init__",
            "show_at",
            "get_menu_style",
            "get_dialog_style",
            "get_main_splitter_style",
            "get_provider_button_style",
            "get_left_widget_style",
            "get_middle_widget_style",
            "get_chat_container_style",
            "get_chat_scroll_area_style",
            "get_input_container_style",
            "get_input_frame_style",
            "get_message_input_style",
            "get_send_button_style",
            "get_image_preview_style",
            "get_button_style",
            "get_model_button_style",
            "get_settings_label_style",
            "get_help_btn_style",
            "get_settings_edit_style",
            "get_right_splitter_style",
            "get_right_widget_style",
            "get_temperature_label_style",
            "get_tab_widget_style",
            "get_slider_style",
            "get_settings_tabs_style",
            "get_spinbox_style",
            "get_progress_dialog_style",
            "get_option_dialog_style",
            "get_bubble_style",
            "get_role_label_style",
            "get_role_label_background_style",
            "get_button_style",
            "get_content_label_style",
            "get_fade_in_text_style",
            "get_animation_style",
            "get_edit_area_style",
            "get_edit_button_wdiget_style",
            "get_resend_button_style",
            "get_cancel_button_style",
            "get_save_button_style"
        ]
    },
    "anylabeling/views/labeling/chatbot/animation.py": {
        "file_name": "/anylabeling/views/labeling/chatbot/animation.py",
        "imports": [
            "PyQt5.QtWidgets.QWidget",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QPropertyAnimation",
            "PyQt5.QtCore.QEasingCurve",
            "PyQt5.QtCore.pyqtProperty",
            "PyQt5.QtGui.QPainter",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QBrush"
        ],
        "classes": [
            {
                "class_name": "PulsatingDot",
                "methods": [
                    "__init__",
                    "_toggle_size_animation",
                    "_toggle_color_animation",
                    "get_dot_size",
                    "set_dot_size",
                    "get_dot_color",
                    "set_dot_color",
                    "paintEvent",
                    "stop_animation"
                ]
            }
        ],
        "functions": [
            "__init__",
            "_toggle_size_animation",
            "_toggle_color_animation",
            "get_dot_size",
            "set_dot_size",
            "get_dot_color",
            "set_dot_color",
            "paintEvent",
            "stop_animation"
        ]
    },
    "anylabeling/views/labeling/vqa/utils.py": {
        "file_name": "/anylabeling/views/labeling/vqa/utils.py",
        "imports": [
            "base64",
            "json",
            "os",
            "re",
            "requests",
            "PyQt5.QtCore.QThread",
            "PyQt5.QtCore.pyqtSignal",
            "anylabeling.views.labeling.chatbot.config.MODELS_CONFIG_PATH",
            "anylabeling.views.labeling.chatbot.config.PROVIDERS_CONFIG_PATH",
            "anylabeling.views.labeling.logger.logger",
            "anylabeling.views.labeling.vqa.config.REQUEST_TIMEOUT"
        ],
        "classes": [
            {
                "class_name": "AIWorkerThread",
                "methods": [
                    "__init__",
                    "run",
                    "process_special_references",
                    "cancel",
                    "load_models_config",
                    "load_providers_config",
                    "call_openai_api"
                ]
            }
        ],
        "functions": [
            "__init__",
            "run",
            "process_special_references",
            "cancel",
            "load_models_config",
            "load_providers_config",
            "call_openai_api",
            "apply_option_mapping",
            "value_contains_deleted_options",
            "get_default_value",
            "get_label_file_path",
            "get_real_modified_options"
        ]
    },
    "anylabeling/views/labeling/vqa/__init__.py": {
        "file_name": "/anylabeling/views/labeling/vqa/__init__.py",
        "imports": [
            "config.*",
            "dialogs.*",
            "layout.*",
            "style.*",
            "utils.*",
            "widgets.*"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/vqa/dialogs.py": {
        "file_name": "/anylabeling/views/labeling/vqa/dialogs.py",
        "imports": [
            "json",
            "os",
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QTimer",
            "PyQt5.QtGui.QColor",
            "PyQt5.QtGui.QWheelEvent",
            "PyQt5.QtGui.QTextCharFormat",
            "PyQt5.QtGui.QTextCursor",
            "PyQt5.QtWidgets.QAbstractItemView",
            "PyQt5.QtWidgets.QCheckBox",
            "PyQt5.QtWidgets.QComboBox",
            "PyQt5.QtWidgets.QDialog",
            "PyQt5.QtWidgets.QHBoxLayout",
            "PyQt5.QtWidgets.QHeaderView",
            "PyQt5.QtWidgets.QLabel",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QMessageBox",
            "PyQt5.QtWidgets.QPushButton",
            "PyQt5.QtWidgets.QGraphicsDropShadowEffect",
            "PyQt5.QtWidgets.QTableWidget",
            "PyQt5.QtWidgets.QTableWidgetItem",
            "PyQt5.QtWidgets.QTextEdit",
            "PyQt5.QtWidgets.QVBoxLayout",
            "PyQt5.QtWidgets.QWidget",
            "anylabeling.views.labeling.vqa.config.DEFAULT_COMPONENT_WINDOW_SIZE",
            "anylabeling.views.labeling.vqa.config.DEFAULT_TEMPLATES",
            "anylabeling.views.labeling.vqa.config.PROMPTS_CONFIG_PATH",
            "anylabeling.views.labeling.vqa.config.SUPPORTED_WIDGETS",
            "anylabeling.views.labeling.vqa.style.get_content_input_style",
            "anylabeling.views.labeling.vqa.style.get_component_dialog_combobox_style",
            "anylabeling.views.labeling.vqa.style.get_dialog_button_style",
            "anylabeling.views.labeling.vqa.style.get_filename_label_style",
            "anylabeling.views.labeling.vqa.style.get_name_input_style",
            "anylabeling.views.labeling.vqa.style.get_message_label_style",
            "anylabeling.views.labeling.vqa.style.get_page_input_style",
            "anylabeling.views.labeling.vqa.style.get_prompt_input_style",
            "anylabeling.views.labeling.vqa.style.get_status_label_style",
            "anylabeling.views.labeling.vqa.style.get_table_style",
            "anylabeling.views.labeling.vqa.style.get_title_label_style",
            "anylabeling.views.labeling.vqa.style.get_ui_style"
        ],
        "classes": [
            {
                "class_name": "QComboBox",
                "methods": [
                    "wheelEvent"
                ]
            },
            {
                "class_name": "PromptTemplateDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "get_default_templates",
                    "load_templates",
                    "populate_table",
                    "on_checkbox_toggled",
                    "add_template",
                    "delete_template",
                    "save_user_template",
                    "remove_user_template",
                    "get_selected_template",
                    "on_item_double_clicked",
                    "update_user_template"
                ]
            },
            {
                "class_name": "AddTemplateDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "prefill_data",
                    "validate_and_accept",
                    "get_template_data"
                ]
            },
            {
                "class_name": "AILoadingDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "setup_animation",
                    "update_dots",
                    "center_on_parent",
                    "exec_",
                    "closeEvent",
                    "reject"
                ]
            },
            {
                "class_name": "AIPromptDialog",
                "methods": [
                    "__init__",
                    "setup_ui",
                    "open_template_library",
                    "center_on_parent",
                    "get_prompt",
                    "exec_",
                    "on_text_changed"
                ]
            },
            {
                "class_name": "ComponentDialog",
                "methods": [
                    "__init__",
                    "on_type_changed",
                    "validate_and_accept",
                    "get_component_data"
                ]
            },
            {
                "class_name": "DeleteComponentDialog",
                "methods": [
                    "__init__",
                    "populate_table",
                    "on_select_all_changed",
                    "on_item_selection_changed",
                    "get_selected_count",
                    "update_ui_state",
                    "get_selected_indices",
                    "get_selected_index"
                ]
            },
            {
                "class_name": "ExportLabelsDialog",
                "methods": [
                    "__init__",
                    "populate_table",
                    "on_select_all_changed",
                    "on_item_selection_changed",
                    "get_selected_count",
                    "update_ui_state",
                    "get_export_config"
                ]
            }
        ],
        "functions": [
            "wheelEvent",
            "__init__",
            "setup_ui",
            "get_default_templates",
            "load_templates",
            "populate_table",
            "on_checkbox_toggled",
            "add_template",
            "delete_template",
            "save_user_template",
            "remove_user_template",
            "get_selected_template",
            "on_item_double_clicked",
            "update_user_template",
            "__init__",
            "setup_ui",
            "prefill_data",
            "validate_and_accept",
            "get_template_data",
            "__init__",
            "setup_ui",
            "setup_animation",
            "update_dots",
            "center_on_parent",
            "exec_",
            "closeEvent",
            "reject",
            "__init__",
            "setup_ui",
            "open_template_library",
            "center_on_parent",
            "get_prompt",
            "exec_",
            "on_text_changed",
            "__init__",
            "on_type_changed",
            "validate_and_accept",
            "get_component_data",
            "__init__",
            "populate_table",
            "on_select_all_changed",
            "on_item_selection_changed",
            "get_selected_count",
            "update_ui_state",
            "get_selected_indices",
            "get_selected_index",
            "__init__",
            "populate_table",
            "on_select_all_changed",
            "on_item_selection_changed",
            "get_selected_count",
            "update_ui_state",
            "get_export_config"
        ]
    },
    "anylabeling/views/labeling/vqa/widgets.py": {
        "file_name": "/anylabeling/views/labeling/vqa/widgets.py",
        "imports": [
            "PyQt5.QtCore.Qt",
            "PyQt5.QtWidgets.QLineEdit",
            "PyQt5.QtWidgets.QTextEdit"
        ],
        "classes": [
            {
                "class_name": "AutoResizeTextEdit",
                "methods": [
                    "__init__",
                    "adjust_height"
                ]
            },
            {
                "class_name": "PageInputLineEdit",
                "methods": [
                    "__init__",
                    "keyPressEvent"
                ]
            }
        ],
        "functions": [
            "__init__",
            "adjust_height",
            "__init__",
            "keyPressEvent",
            "create_truncated_widget"
        ]
    },
    "anylabeling/views/labeling/vqa/config.py": {
        "file_name": "/anylabeling/views/labeling/vqa/config.py",
        "imports": [
            "os"
        ],
        "classes": [],
        "functions": []
    },
    "anylabeling/views/labeling/vqa/layout.py": {
        "file_name": "/anylabeling/views/labeling/vqa/layout.py",
        "imports": [
            "PyQt5.QtCore.Qt",
            "PyQt5.QtCore.QSize",
            "PyQt5.QtCore.QRect",
            "PyQt5.QtCore.QPoint",
            "PyQt5.QtWidgets.QLayout",
            "PyQt5.QtWidgets.QSizePolicy"
        ],
        "classes": [
            {
                "class_name": "FlowLayout",
                "methods": [
                    "__init__",
                    "__del__",
                    "addItem",
                    "count",
                    "itemAt",
                    "takeAt",
                    "expandingDirections",
                    "hasHeightForWidth",
                    "heightForWidth",
                    "setGeometry",
                    "sizeHint",
                    "minimumSize",
                    "doLayout",
                    "clear"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__del__",
            "addItem",
            "count",
            "itemAt",
            "takeAt",
            "expandingDirections",
            "hasHeightForWidth",
            "heightForWidth",
            "setGeometry",
            "sizeHint",
            "minimumSize",
            "doLayout",
            "clear"
        ]
    },
    "anylabeling/views/labeling/vqa/style.py": {
        "file_name": "/anylabeling/views/labeling/vqa/style.py",
        "imports": [
            "typing.Dict",
            "anylabeling.views.labeling.vqa.config.BORDER_RADIUS",
            "anylabeling.views.labeling.vqa.config.BUTTON_COLORS",
            "anylabeling.views.labeling.vqa.config.FONT_SIZE_SMALL",
            "anylabeling.views.labeling.vqa.config.FONT_SIZE_NORMAL",
            "anylabeling.views.labeling.vqa.config.FONT_SIZE_LARGE",
            "anylabeling.views.labeling.vqa.config.THEME",
            "anylabeling.views.labeling.utils.qt.new_icon_path"
        ],
        "classes": [],
        "functions": [
            "get_filename_label_style",
            "get_image_label_style",
            "get_image_container_style",
            "get_page_label_style",
            "get_message_label_style",
            "get_title_label_style",
            "get_status_label_style",
            "get_ui_style",
            "get_main_splitter_style",
            "get_component_dialog_combobox_style",
            "get_content_input_style",
            "get_name_input_style",
            "get_page_input_style",
            "get_prompt_input_style",
            "get_table_style",
            "get_button_style",
            "get_dialog_button_style"
        ]
    },
    "tools/label_drawer.py": {
        "file_name": "/tools/label_drawer.py",
        "imports": [
            "os",
            "os.path",
            "json",
            "argparse",
            "sys",
            "subprocess",
            "cv2",
            "natsort",
            "numpy",
            "tqdm.tqdm",
            "supervision",
            "supervision"
        ],
        "classes": [],
        "functions": [
            "create_video_from_images",
            "draw_polygon_from_custom",
            "draw_rectangle_from_custom",
            "draw_rotation_from_custom",
            "main"
        ]
    },
    "tools/label_converter.py": {
        "file_name": "/tools/label_converter.py",
        "imports": [
            "argparse",
            "json",
            "os",
            "os.path",
            "cv2",
            "time",
            "math",
            "PIL.Image",
            "PIL.ImageDraw",
            "tqdm.tqdm",
            "datetime.date",
            "numpy",
            "xml.dom.minidom",
            "xml.etree.ElementTree",
            "sys",
            "anylabeling.app_info.__version__",
            "pycocotools.mask",
            "pycocotools.mask",
            "pycocotools.mask",
            "pycocotools.mask"
        ],
        "classes": [
            {
                "class_name": "JsonEncoder",
                "methods": [
                    "default"
                ]
            },
            {
                "class_name": "BaseLabelConverter",
                "methods": [
                    "__init__",
                    "reset",
                    "get_image_size",
                    "get_minimal_enclosing_rectangle",
                    "get_poly_area",
                    "get_coco_data",
                    "ensure_output_path"
                ]
            },
            {
                "class_name": "RectLabelConverter",
                "methods": [
                    "custom_to_voc2017",
                    "voc2017_to_custom",
                    "custom_to_yolov5",
                    "yolov5_to_custom",
                    "custom_to_coco",
                    "coco_to_custom"
                ]
            },
            {
                "class_name": "PolyLabelConvert",
                "methods": [
                    "mask2box",
                    "polygons_to_mask",
                    "custom_to_coco",
                    "custom_to_yolov5",
                    "yolov5_to_custom",
                    "coco_to_custom"
                ]
            },
            {
                "class_name": "RotateLabelConverter",
                "methods": [
                    "custom_to_dota",
                    "dota_to_custom",
                    "dota_to_dcoco",
                    "dcoco_to_dota",
                    "dxml_to_dota",
                    "rotatePoint",
                    "rbndbox_to_dota",
                    "hbndbox_to_dota"
                ]
            },
            {
                "class_name": "MOTSConverter",
                "methods": [
                    "custom_to_gt",
                    "polygon_to_rle",
                    "rle_to_polygon",
                    "draw_rle_to_image"
                ]
            }
        ],
        "functions": [
            "default",
            "__init__",
            "reset",
            "get_image_size",
            "get_minimal_enclosing_rectangle",
            "get_poly_area",
            "get_coco_data",
            "ensure_output_path",
            "custom_to_voc2017",
            "voc2017_to_custom",
            "custom_to_yolov5",
            "yolov5_to_custom",
            "custom_to_coco",
            "coco_to_custom",
            "mask2box",
            "polygons_to_mask",
            "custom_to_coco",
            "custom_to_yolov5",
            "yolov5_to_custom",
            "coco_to_custom",
            "custom_to_dota",
            "dota_to_custom",
            "dota_to_dcoco",
            "dcoco_to_dota",
            "dxml_to_dota",
            "rotatePoint",
            "rbndbox_to_dota",
            "hbndbox_to_dota",
            "custom_to_gt",
            "polygon_to_rle",
            "rle_to_polygon",
            "draw_rle_to_image",
            "main"
        ]
    },
    "tools/onnx_exporter/export_rfdetr_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_rfdetr_onnx.py",
        "imports": [
            "cv2",
            "os",
            "random",
            "numpy",
            "onnxruntime",
            "PIL.Image"
        ],
        "classes": [],
        "functions": [
            "sigmoid",
            "box_cxcywh_to_xyxy",
            "preprocess",
            "postprocess",
            "main"
        ]
    },
    "tools/onnx_exporter/export_internimage_model_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_internimage_model_onnx.py",
        "imports": [
            "os",
            "os.path",
            "typing.Any",
            "cv2",
            "random",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "Model",
                "methods": [
                    "__init__",
                    "__call__",
                    "preprocess",
                    "softmax",
                    "postprocess",
                    "predict"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_ort_inference",
            "get_input_name",
            "get_input_shape",
            "get_output_name",
            "__init__",
            "__call__",
            "preprocess",
            "softmax",
            "postprocess",
            "predict"
        ]
    },
    "tools/onnx_exporter/export_u_rtdetr_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_u_rtdetr_onnx.py",
        "imports": [
            "os",
            "cv2",
            "random",
            "numpy",
            "onnxruntime"
        ],
        "classes": [],
        "functions": [
            "read_labels",
            "preprocess",
            "bbox_cxcywh_to_xyxy",
            "is_normalized",
            "normalize_scores",
            "rescale_boxes",
            "draw_boxes",
            "process_rtdetr",
            "process_image",
            "process_video",
            "main"
        ]
    },
    "tools/onnx_exporter/export_pulc_attribute_model_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_pulc_attribute_model_onnx.py",
        "imports": [
            "argparse",
            "os",
            "cv2",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "PULC_Attribute",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_ort_inference",
            "get_input_name",
            "get_input_shape",
            "get_output_name",
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload",
            "main"
        ]
    },
    "tools/onnx_exporter/export_geco_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_geco_onnx.py",
        "imports": [
            "argparse",
            "os",
            "os.path",
            "cv2",
            "time",
            "shutil",
            "numpy",
            "tempfile.mkdtemp",
            "types.MethodType",
            "collections.OrderedDict",
            "onnx",
            "onnxruntime",
            "onnx.external_data_helper.convert_model_to_external_data",
            "onnxruntime.quantization.QuantType",
            "onnxruntime.quantization.quantize.quantize_dynamic",
            "torch",
            "models.geco_infer.GeCo",
            "utils.box_ops.boxes_with_scores"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "GeCo",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "unload"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__init__",
            "get_ort_inference",
            "get_input_name",
            "get_input_shape",
            "get_output_name",
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "unload",
            "export_onnx",
            "decoder_forward"
        ]
    },
    "tools/onnx_exporter/export_yolov8_obb_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_yolov8_obb_onnx.py",
        "imports": [
            "os",
            "cv2",
            "time",
            "numpy",
            "onnxruntime"
        ],
        "classes": [
            {
                "class_name": "Colors",
                "methods": [
                    "__init__",
                    "__call__",
                    "hex2rgb"
                ]
            },
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "YOLOv8_OBB",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes"
                ]
            }
        ],
        "functions": [
            "clip_boxes",
            "scale_boxes",
            "letterbox",
            "box_area",
            "box_iou",
            "numpy_nms",
            "numpy_nms_rotated",
            "batch_probiou",
            "_get_covariance_matrix",
            "non_max_suppression_v8",
            "xywhr2xyxyxyxy",
            "box_label",
            "__init__",
            "__call__",
            "hex2rgb",
            "__init__",
            "get_ort_inference",
            "get_input_name",
            "get_input_shape",
            "get_output_name",
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes"
        ]
    },
    "tools/onnx_exporter/export_yolov10_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_yolov10_onnx.py",
        "imports": [
            "os",
            "cv2",
            "random",
            "numpy",
            "onnxruntime"
        ],
        "classes": [],
        "functions": [
            "letterbox",
            "rescale_coords",
            "preprocess",
            "postprocess",
            "main"
        ]
    },
    "tools/onnx_exporter/export_yolow_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_yolow_onnx.py",
        "imports": [
            "cv2",
            "time",
            "numpy",
            "onnxruntime"
        ],
        "classes": [],
        "functions": [
            "denormalize_bbox",
            "preprocess_image",
            "inference",
            "postprocess_results",
            "forward",
            "main"
        ]
    },
    "tools/onnx_exporter/export_recognize_anything_model_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_recognize_anything_model_onnx.py",
        "imports": [
            "os",
            "os.path",
            "argparse",
            "cv2",
            "numpy",
            "onnxruntime",
            "torch",
            "ram.models.ram",
            "onnx",
            "onnxruntime.quantization.QuantType",
            "onnxruntime.quantization.quantize.quantize_dynamic",
            "onnx"
        ],
        "classes": [
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "RAM",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "load_tag_list",
                    "unload"
                ]
            }
        ],
        "functions": [
            "__init__",
            "get_ort_inference",
            "get_input_name",
            "get_input_shape",
            "get_output_name",
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "load_tag_list",
            "unload",
            "export_onnx"
        ]
    },
    "tools/onnx_exporter/export_grounding_dino_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_grounding_dino_onnx.py",
        "imports": [
            "argparse",
            "os",
            "os.path",
            "cv2",
            "time",
            "numpy",
            "onnxruntime",
            "typing.Dict",
            "tokenizers.Tokenizer",
            "onnxruntime.quantization.QuantType",
            "onnxruntime.quantization.quantize.quantize_dynamic",
            "onnx",
            "torch",
            "groundingdino.models.build_model",
            "groundingdino.util.slconfig.SLConfig",
            "groundingdino.util.utils.clean_state_dict"
        ],
        "classes": [
            {
                "class_name": "Args",
                "methods": [
                    "__init__"
                ]
            },
            {
                "class_name": "OnnxBaseModel",
                "methods": [
                    "__init__",
                    "get_ort_inference",
                    "get_input_name",
                    "get_input_shape",
                    "get_output_name"
                ]
            },
            {
                "class_name": "Grounding_DINO",
                "methods": [
                    "__init__",
                    "preprocess",
                    "postprocess",
                    "predict_shapes",
                    "sig",
                    "rescale_boxes",
                    "get_configs",
                    "get_caption",
                    "get_tokenizer",
                    "get_phrases_from_posmap",
                    "generate_masks_with_special_tokens_and_transfer_map",
                    "unload"
                ]
            }
        ],
        "functions": [
            "__init__",
            "__init__",
            "get_ort_inference",
            "get_input_name",
            "get_input_shape",
            "get_output_name",
            "__init__",
            "preprocess",
            "postprocess",
            "predict_shapes",
            "sig",
            "rescale_boxes",
            "get_configs",
            "get_caption",
            "get_tokenizer",
            "get_phrases_from_posmap",
            "generate_masks_with_special_tokens_and_transfer_map",
            "unload",
            "load_pt_model",
            "export_onnx"
        ]
    },
    "tools/onnx_exporter/export_dfine_onnx.py": {
        "file_name": "/tools/onnx_exporter/export_dfine_onnx.py",
        "imports": [
            "cv2",
            "os",
            "random",
            "numpy",
            "onnxruntime",
            "PIL.Image"
        ],
        "classes": [],
        "functions": [
            "preprocess",
            "postprocess",
            "main"
        ]
    },
    "tests/__init__.py": {
        "file_name": "/tests/__init__.py",
        "imports": [],
        "classes": [],
        "functions": []
    },
    "tests/test_models/rmbg_v_1_4.py": {
        "file_name": "/tests/test_models/rmbg_v_1_4.py",
        "imports": [
            "numpy",
            "onnxruntime",
            "skimage.io",
            "PIL.Image",
            "cv2"
        ],
        "classes": [
            {
                "class_name": "ImageBackgroundRemover",
                "methods": [
                    "__init__",
                    "preprocess_image",
                    "postprocess_image",
                    "remove_background"
                ]
            }
        ],
        "functions": [
            "__init__",
            "preprocess_image",
            "postprocess_image",
            "remove_background"
        ]
    },
    "tests/test_utils/test_general.py": {
        "file_name": "/tests/test_utils/test_general.py",
        "imports": [
            "unittest",
            "anylabeling.views.labeling.utils.general.is_possible_rectangle"
        ],
        "classes": [
            {
                "class_name": "TestIsRectangle",
                "methods": [
                    "test_normal_rectangle",
                    "test_irregular_shape",
                    "test_rectangle_with_square_shape",
                    "test_rectangle_with_diagonal_points",
                    "test_lese_than_four_points",
                    "test_more_than_four_points"
                ]
            }
        ],
        "functions": [
            "test_normal_rectangle",
            "test_irregular_shape",
            "test_rectangle_with_square_shape",
            "test_rectangle_with_diagonal_points",
            "test_lese_than_four_points",
            "test_more_than_four_points"
        ]
    }
}